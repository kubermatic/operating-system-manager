apiVersion: v1
data:
  cloud-config: I2Nsb3VkLWNvbmZpZwpzc2hfcHdhdXRoOiBubwpzc2hfYXV0aG9yaXplZF9rZXlzOgotICdzc2gtcnNhIEFBQUFCM056YUMxeWMyRUFBQUFEQVFBQkFBQUNBUURkT0loWW16Q0s1RFNWTHUzYycKd3JpdGVfZmlsZXM6Ci0gcGF0aDogJy9ldGMvc3lzdGVtZC9qb3VybmFsZC5jb25mLmQvbWF4X2Rpc2tfdXNlLmNvbmYnCiAgY29udGVudDogfC0KICAgIFtKb3VybmFsXQogICAgU3lzdGVtTWF4VXNlPTVHCiAgICAKCi0gcGF0aDogJy9vcHQvbG9hZC1rZXJuZWwtbW9kdWxlcy5zaCcKICBwZXJtaXNzaW9uczogJzA3NTUnCiAgY29udGVudDogfC0KICAgICMhL3Vzci9iaW4vZW52IGJhc2gKICAgIHNldCAtZXVvIHBpcGVmYWlsCiAgICAKICAgIG1vZHByb2JlIGlwX3ZzCiAgICBtb2Rwcm9iZSBpcF92c19ycgogICAgbW9kcHJvYmUgaXBfdnNfd3JyCiAgICBtb2Rwcm9iZSBpcF92c19zaAogICAgCiAgICBpZiBtb2RpbmZvIG5mX2Nvbm50cmFja19pcHY0ICY+IC9kZXYvbnVsbDsgdGhlbgogICAgICBtb2Rwcm9iZSBuZl9jb25udHJhY2tfaXB2NAogICAgZWxzZQogICAgICBtb2Rwcm9iZSBuZl9jb25udHJhY2sKICAgIGZpCiAgICAKCi0gcGF0aDogJy9ldGMvc3lzY3RsLmQvazhzLmNvbmYnCiAgY29udGVudDogfC0KICAgIG5ldC5icmlkZ2UuYnJpZGdlLW5mLWNhbGwtaXA2dGFibGVzID0gMQogICAgbmV0LmJyaWRnZS5icmlkZ2UtbmYtY2FsbC1pcHRhYmxlcyA9IDEKICAgIGtlcm5lbC5wYW5pY19vbl9vb3BzID0gMQogICAga2VybmVsLnBhbmljID0gMTAKICAgIG5ldC5pcHY0LmlwX2ZvcndhcmQgPSAxCiAgICB2bS5vdmVyY29tbWl0X21lbW9yeSA9IDEKICAgIGZzLmlub3RpZnkubWF4X3VzZXJfd2F0Y2hlcyA9IDEwNDg1NzYKICAgIAoKLSBwYXRoOiAnL2V0Yy9kZWZhdWx0L2dydWIuZC82MC1zd2FwLWFjY291bnRpbmcuY2ZnJwogIGNvbnRlbnQ6IHwtCiAgICAjIEFkZGVkIGJ5IGt1YmVybWF0aWMgbWFjaGluZS1jb250cm9sbGVyCiAgICAjIEVuYWJsZSBjZ3JvdXBzIG1lbW9yeSBhbmQgc3dhcCBhY2NvdW50aW5nCiAgICBHUlVCX0NNRExJTkVfTElOVVg9ImNncm91cF9lbmFibGU9bWVtb3J5IHN3YXBhY2NvdW50PTEiCiAgICAKCi0gcGF0aDogJy9vcHQvYmluL3NldHVwJwogIHBlcm1pc3Npb25zOiAnMDc1NScKICBjb250ZW50OiB8LQogICAgIyEvYmluL2Jhc2gKICAgIHNldCAteGV1byBwaXBlZmFpbAogICAgaWYgc3lzdGVtY3RsIGlzLWFjdGl2ZSB1Znc7IHRoZW4gc3lzdGVtY3RsIHN0b3AgdWZ3OyBmaQogICAgc3lzdGVtY3RsIG1hc2sgdWZ3CiAgICBzeXN0ZW1jdGwgcmVzdGFydCBzeXN0ZW1kLW1vZHVsZXMtbG9hZC5zZXJ2aWNlCiAgICBzeXNjdGwgLS1zeXN0ZW0KICAgIHNlZCAtaS5vcmlnICcvLipzd2FwLiovZCcgL2V0Yy9mc3RhYgogICAgc3dhcG9mZiAtYQogICAgCiAgICBhcHQtZ2V0IHVwZGF0ZQogICAgCiAgICBERUJJQU5fRlJPTlRFTkQ9bm9uaW50ZXJhY3RpdmUgYXB0LWdldCAtbyBEcGtnOjpPcHRpb25zOjo9Ii0tZm9yY2UtY29uZmRlZiIgLW8gRHBrZzo6T3B0aW9uczo6PSItLWZvcmNlLWNvbmZvbGQiIGluc3RhbGwgLXkgXAogICAgICBjdXJsIFwKICAgICAgY2EtY2VydGlmaWNhdGVzIFwKICAgICAgY2VwaC1jb21tb24gXAogICAgICBjaWZzLXV0aWxzIFwKICAgICAgY29ubnRyYWNrIFwKICAgICAgZTJmc3Byb2dzIFwKICAgICAgZWJ0YWJsZXMgXAogICAgICBldGh0b29sIFwKICAgICAgZ2x1c3RlcmZzLWNsaWVudCBcCiAgICAgIGlwdGFibGVzIFwKICAgICAganEgXAogICAgICBrbW9kIFwKICAgICAgb3BlbnNzaC1jbGllbnQgXAogICAgICBuZnMtY29tbW9uIFwKICAgICAgc29jYXQgXAogICAgICB1dGlsLWxpbnV4IFwKICAgICAgaXB2c2FkbQogICAgYXB0LWdldCB1cGRhdGUKICAgIGFwdC1nZXQgaW5zdGFsbCAteSBhcHQtdHJhbnNwb3J0LWh0dHBzIGNhLWNlcnRpZmljYXRlcyBjdXJsIHNvZnR3YXJlLXByb3BlcnRpZXMtY29tbW9uIGxzYi1yZWxlYXNlCiAgICBjdXJsIC1mc1NMIGh0dHBzOi8vZG93bmxvYWQuZG9ja2VyLmNvbS9saW51eC91YnVudHUvZ3BnIHwgYXB0LWtleSBhZGQgLQogICAgYWRkLWFwdC1yZXBvc2l0b3J5ICJkZWIgaHR0cHM6Ly9kb3dubG9hZC5kb2NrZXIuY29tL2xpbnV4L3VidW50dSAkKGxzYl9yZWxlYXNlIC1jcykgc3RhYmxlIgogICAgCiAgICBjYXQgPDxFT0YgfCB0ZWUgL2V0Yy9jcmljdGwueWFtbAogICAgcnVudGltZS1lbmRwb2ludDogdW5peDovLy9ydW4vY29udGFpbmVyZC9jb250YWluZXJkLnNvY2sKICAgIEVPRgogICAgCiAgICBta2RpciAtcCAvZXRjL3N5c3RlbWQvc3lzdGVtL2NvbnRhaW5lcmQuc2VydmljZS5kCiAgICBjYXQgPDxFT0YgfCB0ZWUgL2V0Yy9zeXN0ZW1kL3N5c3RlbS9jb250YWluZXJkLnNlcnZpY2UuZC9lbnZpcm9ubWVudC5jb25mCiAgICBbU2VydmljZV0KICAgIFJlc3RhcnQ9YWx3YXlzCiAgICBFbnZpcm9ubWVudEZpbGU9LS9ldGMvZW52aXJvbm1lbnQKICAgIEVPRgogICAgCiAgICBhcHQtZ2V0IGluc3RhbGwgLXkgLS1hbGxvdy1kb3duZ3JhZGVzIGNvbnRhaW5lcmQuaW89MS40KgogICAgYXB0LW1hcmsgaG9sZCBjb250YWluZXJkLmlvCiAgICAKICAgIHN5c3RlbWN0bCBkYWVtb24tcmVsb2FkCiAgICBzeXN0ZW1jdGwgZW5hYmxlIC0tbm93IGNvbnRhaW5lcmQKICAgIG9wdF9iaW49L29wdC9iaW4KICAgIGNuaV9iaW5fZGlyPS9vcHQvY25pL2JpbgogICAgbWtkaXIgLXAgL2V0Yy9jbmkvbmV0LmQgL2V0Yy9rdWJlcm5ldGVzL2R5bmFtaWMtY29uZmlnLWRpciAvZXRjL2t1YmVybmV0ZXMvbWFuaWZlc3RzICIkb3B0X2JpbiIgIiRjbmlfYmluX2RpciIKICAgIGFyY2g9JHtIT1NUX0FSQ0gtfQogICAgaWYgWyAteiAiJGFyY2giIF0KICAgIHRoZW4KICAgIGNhc2UgJCh1bmFtZSAtbSkgaW4KICAgIHg4Nl82NCkKICAgICAgICBhcmNoPSJhbWQ2NCIKICAgICAgICA7OwogICAgYWFyY2g2NCkKICAgICAgICBhcmNoPSJhcm02NCIKICAgICAgICA7OwogICAgKikKICAgICAgICBlY2hvICJ1bnN1cHBvcnRlZCBDUFUgYXJjaGl0ZWN0dXJlLCBleGl0aW5nIgogICAgICAgIGV4aXQgMQogICAgICAgIDs7CiAgICBlc2FjCiAgICBmaQogICAgQ05JX1ZFUlNJT049IiR7Q05JX1ZFUlNJT046LXYwLjguN30iCiAgICBjbmlfYmFzZV91cmw9Imh0dHBzOi8vZ2l0aHViLmNvbS9jb250YWluZXJuZXR3b3JraW5nL3BsdWdpbnMvcmVsZWFzZXMvZG93bmxvYWQvJENOSV9WRVJTSU9OIgogICAgY25pX2ZpbGVuYW1lPSJjbmktcGx1Z2lucy1saW51eC0kYXJjaC0kQ05JX1ZFUlNJT04udGd6IgogICAgY3VybCAtTGZvICIkY25pX2Jpbl9kaXIvJGNuaV9maWxlbmFtZSIgIiRjbmlfYmFzZV91cmwvJGNuaV9maWxlbmFtZSIKICAgIGNuaV9zdW09JChjdXJsIC1MZiAiJGNuaV9iYXNlX3VybC8kY25pX2ZpbGVuYW1lLnNoYTI1NiIpCiAgICBjZCAiJGNuaV9iaW5fZGlyIgogICAgc2hhMjU2c3VtIC1jIDw8PCIkY25pX3N1bSIKICAgIHRhciB4dmYgIiRjbmlfZmlsZW5hbWUiCiAgICBybSAtZiAiJGNuaV9maWxlbmFtZSIKICAgIGNkIC0KICAgIEtVQkVfVkVSU0lPTj0iJHtLVUJFX1ZFUlNJT046LXYxLjIyLjF9IgogICAga3ViZV9kaXI9IiRvcHRfYmluL2t1YmVybmV0ZXMtJEtVQkVfVkVSU0lPTiIKICAgIGt1YmVfYmFzZV91cmw9Imh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9rdWJlcm5ldGVzLXJlbGVhc2UvcmVsZWFzZS8kS1VCRV9WRVJTSU9OL2Jpbi9saW51eC8kYXJjaCIKICAgIGt1YmVfc3VtX2ZpbGU9IiRrdWJlX2Rpci9zaGEyNTYiCiAgICBta2RpciAtcCAiJGt1YmVfZGlyIgogICAgOiA+IiRrdWJlX3N1bV9maWxlIgogICAgCiAgICBmb3IgYmluIGluIGt1YmVsZXQga3ViZWFkbSBrdWJlY3RsOyBkbwogICAgICAgIGN1cmwgLUxmbyAiJGt1YmVfZGlyLyRiaW4iICIka3ViZV9iYXNlX3VybC8kYmluIgogICAgICAgIGNobW9kICt4ICIka3ViZV9kaXIvJGJpbiIKICAgICAgICBzdW09JChjdXJsIC1MZiAiJGt1YmVfYmFzZV91cmwvJGJpbi5zaGEyNTYiKQogICAgICAgIGVjaG8gIiRzdW0gICRrdWJlX2Rpci8kYmluIiA+PiIka3ViZV9zdW1fZmlsZSIKICAgIGRvbmUKICAgIHNoYTI1NnN1bSAtYyAiJGt1YmVfc3VtX2ZpbGUiCiAgICAKICAgIGZvciBiaW4gaW4ga3ViZWxldCBrdWJlYWRtIGt1YmVjdGw7IGRvCiAgICAgICAgbG4gLXNmICIka3ViZV9kaXIvJGJpbiIgIiRvcHRfYmluIi8kYmluCiAgICBkb25lCiAgICAKICAgIGlmIFtbICEgLXggL29wdC9iaW4vaGVhbHRoLW1vbml0b3Iuc2ggXV07IHRoZW4KICAgICAgICBjdXJsIC1MZm8gL29wdC9iaW4vaGVhbHRoLW1vbml0b3Iuc2ggaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2t1YmVybWF0aWMvbWFjaGluZS1jb250cm9sbGVyLzc5NjdhMGFmMmI3NWYyOWFkMmFiMjI3ZWVhYTI2ZWE3YjBmMmZiZGUvcGtnL3VzZXJkYXRhL3NjcmlwdHMvaGVhbHRoLW1vbml0b3Iuc2gKICAgICAgICBjaG1vZCAreCAvb3B0L2Jpbi9oZWFsdGgtbW9uaXRvci5zaAogICAgZmkKICAgIAogICAgIyBzZXQga3ViZWxldCBub2RlaXAgZW52aXJvbm1lbnQgdmFyaWFibGUKICAgIC9vcHQvYmluL3NldHVwX25ldF9lbnYuc2gKICAgIAogICAgc3lzdGVtY3RsIGVuYWJsZSAtLW5vdyBrdWJlbGV0CiAgICBzeXN0ZW1jdGwgZW5hYmxlIC0tbm93IC0tbm8tYmxvY2sga3ViZWxldC1oZWFsdGhjaGVjay5zZXJ2aWNlCiAgICAKCi0gcGF0aDogJy9vcHQvYmluL3N1cGVydmlzZS5zaCcKICBwZXJtaXNzaW9uczogJzA3NTUnCiAgY29udGVudDogfC0KICAgICMhL2Jpbi9iYXNoCiAgICBzZXQgLXhldW8gcGlwZWZhaWwKICAgIHdoaWxlICEgIiRAIjsgZG8KICAgICAgc2xlZXAgMQogICAgZG9uZQogICAgCgotIHBhdGg6ICcvZXRjL3N5c3RlbWQvc3lzdGVtL2t1YmVsZXQuc2VydmljZScKICBjb250ZW50OiB8LQogICAgW1VuaXRdCiAgICBBZnRlcj1jb250YWluZXJkLnNlcnZpY2UKICAgIFJlcXVpcmVzPWNvbnRhaW5lcmQuc2VydmljZQogICAgCiAgICBEZXNjcmlwdGlvbj1rdWJlbGV0OiBUaGUgS3ViZXJuZXRlcyBOb2RlIEFnZW50CiAgICBEb2N1bWVudGF0aW9uPWh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL2hvbWUvCiAgICAKICAgIFtTZXJ2aWNlXQogICAgUmVzdGFydD1hbHdheXMKICAgIFN0YXJ0TGltaXRJbnRlcnZhbD0wCiAgICBSZXN0YXJ0U2VjPTEwCiAgICBDUFVBY2NvdW50aW5nPXRydWUKICAgIE1lbW9yeUFjY291bnRpbmc9dHJ1ZQogICAgCiAgICBFbnZpcm9ubWVudD0iUEFUSD0vb3B0L2JpbjovYmluOi91c3IvbG9jYWwvc2JpbjovdXNyL2xvY2FsL2JpbjovdXNyL3NiaW46L3Vzci9iaW46L3NiaW4vIgogICAgRW52aXJvbm1lbnRGaWxlPS0vZXRjL2Vudmlyb25tZW50CiAgICAKICAgIEV4ZWNTdGFydFByZT0vYmluL2Jhc2ggL29wdC9sb2FkLWtlcm5lbC1tb2R1bGVzLnNoCiAgICBFeGVjU3RhcnRQcmU9L2Jpbi9iYXNoIC9vcHQvYmluL3NldHVwX25ldF9lbnYuc2gKICAgIEV4ZWNTdGFydD0vb3B0L2Jpbi9rdWJlbGV0ICRLVUJFTEVUX0VYVFJBX0FSR1MgXAogICAgICAtLWJvb3RzdHJhcC1rdWJlY29uZmlnPS9ldGMva3ViZXJuZXRlcy9ib290c3RyYXAta3ViZWxldC5jb25mIFwKICAgICAgLS1rdWJlY29uZmlnPS92YXIvbGliL2t1YmVsZXQva3ViZWNvbmZpZyBcCiAgICAgIC0tY29uZmlnPS9ldGMva3ViZXJuZXRlcy9rdWJlbGV0LmNvbmYgXAogICAgICAtLW5ldHdvcmstcGx1Z2luPWNuaSBcCiAgICAgIC0tY2VydC1kaXI9L2V0Yy9rdWJlcm5ldGVzL3BraSBcCiAgICAgIC0tY2xvdWQtcHJvdmlkZXI9YXdzIFwKICAgICAgLS1jbG91ZC1jb25maWc9L2V0Yy9rdWJlcm5ldGVzL2Nsb3VkLWNvbmZpZyBcCiAgICAgIC0tZHluYW1pYy1jb25maWctZGlyPS9ldGMva3ViZXJuZXRlcy9keW5hbWljLWNvbmZpZy1kaXIgXAogICAgICAtLWZlYXR1cmUtZ2F0ZXM9RHluYW1pY0t1YmVsZXRDb25maWc9dHJ1ZSBcCiAgICAgIC0tZXhpdC1vbi1sb2NrLWNvbnRlbnRpb24gXAogICAgICAtLWxvY2stZmlsZT0vdG1wL2t1YmVsZXQubG9jayBcCiAgICAgIC0tY29udGFpbmVyLXJ1bnRpbWU9cmVtb3RlIFwKICAgICAgLS1jb250YWluZXItcnVudGltZS1lbmRwb2ludD11bml4Oi8vL3J1bi9jb250YWluZXJkL2NvbnRhaW5lcmQuc29jayBcCiAgICAgIC0tbm9kZS1pcCAke0tVQkVMRVRfTk9ERV9JUH0KICAgIAogICAgW0luc3RhbGxdCiAgICBXYW50ZWRCeT1tdWx0aS11c2VyLnRhcmdldAogICAgCgotIHBhdGg6ICcvZXRjL3N5c3RlbWQvc3lzdGVtL2t1YmVsZXQuc2VydmljZS5kL2V4dHJhcy5jb25mJwogIGNvbnRlbnQ6IHwtCiAgICBbU2VydmljZV0KICAgIEVudmlyb25tZW50PSJLVUJFTEVUX0VYVFJBX0FSR1M9LS1yZXNvbHYtY29uZj0vcnVuL3N5c3RlbWQvcmVzb2x2ZS9yZXNvbHYuY29uZiIKICAgIAoKLSBwYXRoOiAnL2V0Yy9rdWJlcm5ldGVzL2Nsb3VkLWNvbmZpZycKICBwZXJtaXNzaW9uczogJzA2MDAnCiAgY29udGVudDogfC0KICAgIFtnbG9iYWxdCiAgICBab25lPSIiCiAgICBWUEM9IiIKICAgIFN1Ym5ldElEPSJ0ZXN0LXN1Ym5ldCIKICAgIAogICAgCgotIHBhdGg6ICcvb3B0L2Jpbi9zZXR1cF9uZXRfZW52LnNoJwogIHBlcm1pc3Npb25zOiAnMDc1NScKICBjb250ZW50OiB8LQogICAgIyEvdXNyL2Jpbi9lbnYgYmFzaAogICAgZWNob2RhdGUoKSB7CiAgICAgIGVjaG8gIlskKGRhdGUgLUlzKV0iICIkQCIKICAgIH0KICAgIAogICAgIyBnZXQgdGhlIGRlZmF1bHQgaW50ZXJmYWNlIElQIGFkZHJlc3MKICAgIERFRkFVTFRfSUZDX0lQPSQoaXAgLW8gIHJvdXRlIGdldCAxIHwgZ3JlcCAtb1AgInNyYyBcS1xTKyIpCiAgICAKICAgIGlmIFsgLXogIiR7REVGQVVMVF9JRkNfSVB9IiBdCiAgICB0aGVuCiAgICAgIGVjaG9kYXRlICJGYWlsZWQgdG8gZ2V0IElQIGFkZHJlc3MgZm9yIHRoZSBkZWZhdWx0IHJvdXRlIGludGVyZmFjZSIKICAgICAgZXhpdCAxCiAgICBmaQogICAgCiAgICAgIyBnZXQgdGhlIGZ1bGwgaG9zdG5hbWUKICAgIEZVTExfSE9TVE5BTUU9JChob3N0bmFtZSAtZikKICAgIAogICAgIyB3cml0ZSB0aGUgbm9kZWlwX2VudiBmaWxlCiAgICAjIHdlIG5lZWQgdGhlIGxpbmUgYmVsb3cgYmVjYXVzZSBmbGF0Y2FyIGhhcyB0aGUgc2FtZSBzdHJpbmcgImNvcmVvcyIgaW4gdGhhdCBmaWxlCiAgICBpZiBncmVwIC1xIGNvcmVvcyAvZXRjL29zLXJlbGVhc2UKICAgIHRoZW4KICAgICAgZWNobyAiS1VCRUxFVF9OT0RFX0lQPSR7REVGQVVMVF9JRkNfSVB9XG5LVUJFTEVUX0hPU1ROQU1FPSR7RlVMTF9IT1NUTkFNRX0iID4gL2V0Yy9rdWJlcm5ldGVzL25vZGVpcC5jb25mCiAgICBlbGlmIFsgISAtZCAvZXRjL3N5c3RlbWQvc3lzdGVtL2t1YmVsZXQuc2VydmljZS5kIF0KICAgIHRoZW4KICAgICAgZWNob2RhdGUgIkNhbid0IGZpbmQga3ViZWxldCBzZXJ2aWNlIGV4dHJhcyBkaXJlY3RvcnkiCiAgICAgIGV4aXQgMQogICAgZWxzZQogICAgICBlY2hvIC1lICJbU2VydmljZV1cbkVudmlyb25tZW50PVwiS1VCRUxFVF9OT0RFX0lQPSR7REVGQVVMVF9JRkNfSVB9XCJcbkVudmlyb25tZW50PVwiS1VCRUxFVF9IT1NUTkFNRT0ke0ZVTExfSE9TVE5BTUV9XCIiID4gL2V0Yy9zeXN0ZW1kL3N5c3RlbS9rdWJlbGV0LnNlcnZpY2UuZC9ub2RlaXAuY29uZgogICAgZmkKICAgIAoKLSBwYXRoOiAnL2V0Yy9rdWJlcm5ldGVzL2Jvb3RzdHJhcC1rdWJlbGV0LmNvbmYnCiAgcGVybWlzc2lvbnM6ICcwNjAwJwogIGNvbnRlbnQ6IHwtCiAgICBhcGlWZXJzaW9uOiB2MQogICAgY2x1c3RlcnM6CiAgICAtIGNsdXN0ZXI6CiAgICAgICAgY2VydGlmaWNhdGUtYXV0aG9yaXR5LWRhdGE6IExTMHRMUzFDUlVkSlRpQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENrMUpTVVZYYWtORFFUQkxaMEYzU1VKQlowbEtRVXhtVW14WGMwazRXVkZJVFVFd1IwTlRjVWRUU1dJelJGRkZRa0pSVlVGTlNITjRRM3BCU2tKblRsWUtRa0ZaVkVGc1ZsUk5VWE4zUTFGWlJGWlJVVWxGZDBwRVVWUkZWMDFDVVVkQk1WVkZRbmhOVGxVeVJuVkpSVnA1V1ZjMWFtRllUbXBpZWtWVlRVSkpSd3BCTVZWRlEyaE5URkZ1U21oYVIxcHdaRWh3Y0dKdFRYaEZha0ZSUW1kT1ZrSkJUVlJEVjNoMldUSkdjMkZIT1hwa1JFVmtUVUp6UjBOVGNVZFRTV0l6Q2tSUlJVcEJVbGxQV1c1S2FGcEZRbXRaVnpWdVdWTTFhbUl5TUhkSWFHTk9UVlJSZDA1NlJURk5ha0V3VG1wQk1WZG9ZMDVOVkdOM1RsUkJNRTFxUVRBS1RtcEJNVmRxUWpkTlVYTjNRMUZaUkZaUlVVZEZkMHBXVlhwRlRFMUJhMGRCTVZWRlEwSk5RMUV3UlhoR2FrRlZRbWRPVmtKQlkxUkVWazVvWW1sQ1J3cGpiVVoxV1RKc2Vsa3lPSGhHUkVGVFFtZE9Wa0pCYjFSRE1FcDVXVmRTYldGWVVqWmhWelZxVFZKSmQwVkJXVVJXVVZGRVJYZHNjMkl5VG1oaVIyaDJDbU16VVhoSVZFRmlRbWRyY1docmFVYzVkekJDUTFGRlYwUnRTbmxaVjFKQldrZEdkVm95UlhWWk1qbDBUVWxKUWtscVFVNUNaMnR4YUd0cFJ6bDNNRUlLUVZGRlJrRkJUME5CVVRoQlRVbEpRa05uUzBOQlVVVkJkRFZtUVdwd05HWlVZMlZyVjFWVVpucHpjREJyZVdsb01VOVpZbk5IVERCTFdERmxVbUpUVXdwU09FOWtNQ3M1VVRZeVNIbHVlU3RIUm5kTlZHSTBRUzlMVlRodGMzTnZTSFpqWTJWVFFVRmlkMlppZUVaTEx5dHpOVEZVYjJKeFZXNVBVbHB5VDI5VUNscHFhMVY1WjJKNVdFUlRTems1V1VKaVkxSXhVR2x3T0haM1RWUnRORmhMZFV4MFEybG5aVUpDWkdwcVFWRmtaMVZQTWpoTVJVNUhiSE5OYm0xbFdXc0tTbVpQUkZaSGJsWnRjalZNZEdJNVFVNUJPRWxMZVZSbWMyNUlTalJwVDBOVEwxQnNVR0pWYWpKeE4xbHViMVpNY0c5elZVSk5iR2RWWWk5RGVXdFlNd3B0VDI5TVlqUjVTa3BSZVVFdmFWTlVObHA0YVVsRmFqTTJSRFI1VjFvMWJHYzNXVXBzSzFWcGFVSlJTRWREYmxCa1IzbHBjSEZXTURabGVEQm9aVmxYQ21OaGFWYzRURmRhVTFWUk9UTnFVU3RYVmtOSU9HaFVOMFJSVHpGa2JYTjJWVzFZYkhFdlNtVkJiSGRSTDFGSlJFRlJRVUp2TkVoblRVbElaRTFDTUVjS1FURlZaRVJuVVZkQ1FsSmpRVkpQZEdoVE5GQTBWVGQyVkdacVFubEROVFk1VWpkRk5rUkRRbkpSV1VSV1VqQnFRa2xIYkUxSlIybG5RbEpqUVZKUGRBcG9VelJRTkZVM2RsUm1ha0o1UXpVMk9WSTNSVFpMUmk5d1NEQjNaWHBGVEUxQmEwZEJNVlZGUW1oTlExWldUWGhEZWtGS1FtZE9Wa0pCWjFSQmEwNUNDazFTV1hkR1FWbEVWbEZSU0VWM01WUlpWelJuVW01S2FHSnRUbkJqTWs1MlRWSlJkMFZuV1VSV1VWRkxSWGQwUTJOdFJtdGFiV3d3Wlcxc2RWbDZSVk1LVFVKQlIwRXhWVVZCZUUxS1lrYzVhbGxYZUc5aU0wNHdUVkl3ZDBkM1dVcExiMXBKYUhaalRrRlJhMEpHWnpWcFkyMUdhMUZIVW1oaWJXUm9URzFPZGdwaVdVbEtRVXhtVW14WGMwazRXVkZJVFVGM1IwRXhWV1JGZDFGR1RVRk5Ra0ZtT0hkRVVWbEtTMjlhU1doMlkwNUJVVVZHUWxGQlJHZG5SVUpCUnpab0NsVTVaamx6VGtnd0x6WnZRbUpIUjNreVJWWlZNRlZuU1ZSVlVVbHlSbGR2T1hKR2EzSlhOV3N2V0d0RWFsRnRLek5zZW1wVU1HbEhValJKZUVVdlFXOEtaVlUyYzFGb2RXRTNkM0pYWlVaRmJqUTNSMHc1T0d4dVEzTktaRVEzYjFwT2FFWnRVVGsxVkdJdlRHNUVWV3B6TlZscU9XSnlVREJPVjNwWVpsbFZOQXBWU3pKYWJrbE9TbEpqU25CQ09HbFNRMkZEZUVVNFJHUmpWVVl3V0hGSlJYRTJjRUV5TnpKemJtOU1iV2xZVEUxMlRtd3phMWxGWkcwcmFtVTJkbTlFQ2pVNFUwNVdSVlZ6ZW5SNlVYbFliVXBGYUVOd2QxWkpNRUUyVVVOcWVsaHFLM0YyY0cxM00xcGFTR2s0U25kWVpXazRXbHBDVEZSVFJrSnJhVGhhTjI0S2MwZzVRa0pJTXpndlUzcFZiVUZPTkZGSVUxQjVNV2RxY1cwd01FOUJSVGhPWVZsRWEyZ3ZZbnBGTkdRM2JVeEhSMDFYY0M5WFJUTkxVRk4xT0RKSVJncHJVR1UyV0c5VFltbE1iUzlyZUdzek1sUXdQUW90TFMwdExVVk9SQ0JEUlZKVVNVWkpRMEZVUlMwdExTMHQKICAgICAgICBzZXJ2ZXI6IGh0dHBzOi8vc2VydmVyOjQ0MwogICAgICBuYW1lOiAiIgogICAgY29udGV4dHM6IG51bGwKICAgIGN1cnJlbnQtY29udGV4dDogIiIKICAgIGtpbmQ6IENvbmZpZwogICAgcHJlZmVyZW5jZXM6IHt9CiAgICB1c2VyczoKICAgIC0gbmFtZTogIiIKICAgICAgdXNlcjoKICAgICAgICB0b2tlbjogbXktdG9rZW4KICAgIAogICAgCgotIHBhdGg6ICcvZXRjL2t1YmVybmV0ZXMvcGtpL2NhLmNydCcKICBjb250ZW50OiB8LQogICAgLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCiAgICBNSUlFV2pDQ0EwS2dBd0lCQWdJSkFMZlJsV3NJOFlRSE1BMEdDU3FHU0liM0RRRUJCUVVBTUhzeEN6QUpCZ05WCiAgICBCQVlUQWxWVE1Rc3dDUVlEVlFRSUV3SkRRVEVXTUJRR0ExVUVCeE1OVTJGdUlFWnlZVzVqYVhOamJ6RVVNQklHCiAgICBBMVVFQ2hNTFFuSmhaR1pwZEhwcGJtTXhFakFRQmdOVkJBTVRDV3h2WTJGc2FHOXpkREVkTUJzR0NTcUdTSWIzCiAgICBEUUVKQVJZT1luSmhaRUJrWVc1bllTNWpiMjB3SGhjTk1UUXdOekUxTWpBME5qQTFXaGNOTVRjd05UQTBNakEwCiAgICBOakExV2pCN01Rc3dDUVlEVlFRR0V3SlZVekVMTUFrR0ExVUVDQk1DUTBFeEZqQVVCZ05WQkFjVERWTmhiaUJHCiAgICBjbUZ1WTJselkyOHhGREFTQmdOVkJBb1RDMEp5WVdSbWFYUjZhVzVqTVJJd0VBWURWUVFERXdsc2IyTmhiR2h2CiAgICBjM1F4SFRBYkJna3Foa2lHOXcwQkNRRVdEbUp5WVdSQVpHRnVaMkV1WTI5dE1JSUJJakFOQmdrcWhraUc5dzBCCiAgICBBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF0NWZBanA0ZlRjZWtXVVRmenNwMGt5aWgxT1lic0dMMEtYMWVSYlNTCiAgICBSOE9kMCs5UTYySHlueStHRndNVGI0QS9LVThtc3NvSHZjY2VTQUFid2ZieEZLLytzNTFUb2JxVW5PUlpyT29UCiAgICBaamtVeWdieVhEU0s5OVlCYmNSMVBpcDh2d01UbTRYS3VMdENpZ2VCQmRqakFRZGdVTzI4TEVOR2xzTW5tZVlrCiAgICBKZk9EVkduVm1yNUx0YjlBTkE4SUt5VGZzbkhKNGlPQ1MvUGxQYlVqMnE3WW5vVkxwb3NVQk1sZ1ViL0N5a1gzCiAgICBtT29MYjR5SkpReUEvaVNUNlp4aUlFajM2RDR5V1o1bGc3WUpsK1VpaUJRSEdDblBkR3lpcHFWMDZleDBoZVlXCiAgICBjYWlXOExXWlNVUTkzalErV1ZDSDhoVDdEUU8xZG1zdlVtWGxxL0plQWx3US9RSURBUUFCbzRIZ01JSGRNQjBHCiAgICBBMVVkRGdRV0JCUmNBUk90aFM0UDRVN3ZUZmpCeUM1NjlSN0U2RENCclFZRFZSMGpCSUdsTUlHaWdCUmNBUk90CiAgICBoUzRQNFU3dlRmakJ5QzU2OVI3RTZLRi9wSDB3ZXpFTE1Ba0dBMVVFQmhNQ1ZWTXhDekFKQmdOVkJBZ1RBa05CCiAgICBNUll3RkFZRFZRUUhFdzFUWVc0Z1JuSmhibU5wYzJOdk1SUXdFZ1lEVlFRS0V3dENjbUZrWm1sMGVtbHVZekVTCiAgICBNQkFHQTFVRUF4TUpiRzlqWVd4b2IzTjBNUjB3R3dZSktvWklodmNOQVFrQkZnNWljbUZrUUdSaGJtZGhMbU52CiAgICBiWUlKQUxmUmxXc0k4WVFITUF3R0ExVWRFd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVGQlFBRGdnRUJBRzZoCiAgICBVOWY5c05IMC82b0JiR0d5MkVWVTBVZ0lUVVFJckZXbzlyRmtyVzVrL1hrRGpRbSszbHpqVDBpR1I0SXhFL0FvCiAgICBlVTZzUWh1YTd3cldlRkVuNDdHTDk4bG5Dc0pkRDdvWk5oRm1ROTVUYi9MbkRVanM1WWo5YnJQME5XelhmWVU0CiAgICBVSzJabklOSlJjSnBCOGlSQ2FDeEU4RGRjVUYwWHFJRXE2cEEyNzJzbm9MbWlYTE12Tmwza1lFZG0ramU2dm9ECiAgICA1OFNOVkVVc3p0elF5WG1KRWhDcHdWSTBBNlFDanpYaitxdnBtdzNaWkhpOEp3WGVpOFpaQkxUU0ZCa2k4WjduCiAgICBzSDlCQkgzOC9TelVtQU40UUhTUHkxZ2pxbTAwT0FFOE5hWURraC9iekU0ZDdtTEdHTVdwL1dFM0tQU3U4MkhGCiAgICBrUGU2WG9TYmlMbS9reGszMlQwPQogICAgLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQogICAgCgotIHBhdGg6ICcvZXRjL3N5c3RlbWQvc3lzdGVtL3NldHVwLnNlcnZpY2UnCiAgcGVybWlzc2lvbnM6ICcwNjQ0JwogIGNvbnRlbnQ6IHwtCiAgICBbSW5zdGFsbF0KICAgIFdhbnRlZEJ5PW11bHRpLXVzZXIudGFyZ2V0CiAgICAKICAgIFtVbml0XQogICAgUmVxdWlyZXM9bmV0d29yay1vbmxpbmUudGFyZ2V0CiAgICBBZnRlcj1uZXR3b3JrLW9ubGluZS50YXJnZXQKICAgIAogICAgW1NlcnZpY2VdCiAgICBUeXBlPW9uZXNob3QKICAgIFJlbWFpbkFmdGVyRXhpdD10cnVlCiAgICBFbnZpcm9ubWVudEZpbGU9LS9ldGMvZW52aXJvbm1lbnQKICAgIEV4ZWNTdGFydD0vb3B0L2Jpbi9zdXBlcnZpc2Uuc2ggL29wdC9iaW4vc2V0dXAKICAgIAoKLSBwYXRoOiAnL2V0Yy9wcm9maWxlLmQvb3B0LWJpbi1wYXRoLnNoJwogIHBlcm1pc3Npb25zOiAnMDY0NCcKICBjb250ZW50OiB8LQogICAgZXhwb3J0IFBBVEg9Ii9vcHQvYmluOiRQQVRIIgogICAgCgotIHBhdGg6ICcvZXRjL2t1YmVybmV0ZXMva3ViZWxldC5jb25mJwogIGNvbnRlbnQ6IHwtCiAgICBhcGlWZXJzaW9uOiBrdWJlbGV0LmNvbmZpZy5rOHMuaW8vdjFiZXRhMQogICAga2luZDogS3ViZWxldENvbmZpZ3VyYXRpb24KICAgIGF1dGhlbnRpY2F0aW9uOgogICAgICBhbm9ueW1vdXM6CiAgICAgICAgZW5hYmxlZDogZmFsc2UKICAgICAgd2ViaG9vazoKICAgICAgICBlbmFibGVkOiB0cnVlCiAgICAgIHg1MDk6CiAgICAgICAgY2xpZW50Q0FGaWxlOiAvZXRjL2t1YmVybmV0ZXMvcGtpL2NhLmNydAogICAgYXV0aG9yaXphdGlvbjoKICAgICAgbW9kZTogV2ViaG9vawogICAgY2dyb3VwRHJpdmVyOiBzeXN0ZW1kCiAgICBjbHVzdGVyRE5TOgogICAgLSAiMTAuMC4wLjAiCiAgICBjbHVzdGVyRG9tYWluOiBjbHVzdGVyLmxvY2FsCiAgICBmZWF0dXJlR2F0ZXM6CiAgICAgIFJvdGF0ZUt1YmVsZXRTZXJ2ZXJDZXJ0aWZpY2F0ZTogdHJ1ZQogICAgcHJvdGVjdEtlcm5lbERlZmF1bHRzOiB0cnVlCiAgICByZWFkT25seVBvcnQ6IDAKICAgIHJvdGF0ZUNlcnRpZmljYXRlczogdHJ1ZQogICAgc2VydmVyVExTQm9vdHN0cmFwOiB0cnVlCiAgICBzdGF0aWNQb2RQYXRoOiAvZXRjL2t1YmVybmV0ZXMvbWFuaWZlc3RzCiAgICBrdWJlUmVzZXJ2ZWQ6CiAgICAgIGNwdTogMjAwbQogICAgICBlcGhlbWVyYWwtc3RvcmFnZTogMUdpCiAgICAgIG1lbW9yeTogMjAwTWkKICAgIHN5c3RlbVJlc2VydmVkOgogICAgICBjcHU6IDIwMG0KICAgICAgZXBoZW1lcmFsLXN0b3JhZ2U6IDFHaQogICAgICBtZW1vcnk6IDIwME1pCiAgICB2b2x1bWVQbHVnaW5EaXI6IC92YXIvbGliL2t1YmVsZXQvdm9sdW1lcGx1Z2lucwogICAgCgotIHBhdGg6ICcvZXRjL3N5c3RlbWQvc3lzdGVtL2t1YmVsZXQtaGVhbHRoY2hlY2suc2VydmljZScKICBwZXJtaXNzaW9uczogJzA2NDQnCiAgY29udGVudDogfC0KICAgIFtVbml0XQogICAgUmVxdWlyZXM9a3ViZWxldC5zZXJ2aWNlCiAgICBBZnRlcj1rdWJlbGV0LnNlcnZpY2UKICAgIAogICAgW1NlcnZpY2VdCiAgICBFeGVjU3RhcnQ9L29wdC9iaW4vaGVhbHRoLW1vbml0b3Iuc2gga3ViZWxldAogICAgCiAgICBbSW5zdGFsbF0KICAgIFdhbnRlZEJ5PW11bHRpLXVzZXIudGFyZ2V0CiAgICAKCi0gcGF0aDogJy9ldGMvY29udGFpbmVyZC9jb25maWcudG9tbCcKICBwZXJtaXNzaW9uczogJzA2NDQnCiAgY29udGVudDogfC0KICAgIHZlcnNpb24gPSAyCiAgICAKICAgIFttZXRyaWNzXQogICAgYWRkcmVzcyA9ICIxMjcuMC4wLjE6MTMzOCIKICAgIAogICAgW3BsdWdpbnNdCiAgICBbcGx1Z2lucy4iaW8uY29udGFpbmVyZC5ncnBjLnYxLmNyaSJdCiAgICBbcGx1Z2lucy4iaW8uY29udGFpbmVyZC5ncnBjLnYxLmNyaSIuY29udGFpbmVyZF0KICAgIFtwbHVnaW5zLiJpby5jb250YWluZXJkLmdycGMudjEuY3JpIi5jb250YWluZXJkLnJ1bnRpbWVzXQogICAgW3BsdWdpbnMuImlvLmNvbnRhaW5lcmQuZ3JwYy52MS5jcmkiLmNvbnRhaW5lcmQucnVudGltZXMucnVuY10KICAgIHJ1bnRpbWVfdHlwZSA9ICJpby5jb250YWluZXJkLnJ1bmMudjIiCiAgICBbcGx1Z2lucy4iaW8uY29udGFpbmVyZC5ncnBjLnYxLmNyaSIuY29udGFpbmVyZC5ydW50aW1lcy5ydW5jLm9wdGlvbnNdCiAgICBTeXN0ZW1kQ2dyb3VwID0gdHJ1ZQogICAgW3BsdWdpbnMuImlvLmNvbnRhaW5lcmQuZ3JwYy52MS5jcmkiLnJlZ2lzdHJ5XQogICAgW3BsdWdpbnMuImlvLmNvbnRhaW5lcmQuZ3JwYy52MS5jcmkiLnJlZ2lzdHJ5Lm1pcnJvcnNdCiAgICBbcGx1Z2lucy4iaW8uY29udGFpbmVyZC5ncnBjLnYxLmNyaSIucmVnaXN0cnkubWlycm9ycy4iZG9ja2VyLmlvIl0KICAgIGVuZHBvaW50ID0gWyJodHRwczovL3JlZ2lzdHJ5LTEuZG9ja2VyLmlvIl0KICAgIAoKcnVuY21kOgotIHN5c3RlbWN0bCByZXN0YXJ0IGt1YmVsZXQuc2VydmljZQotIHN5c3RlbWN0bCByZXN0YXJ0IHNldHVwLnNlcnZpY2UKLSBzeXN0ZW1jdGwgcmVzdGFydCBrdWJlbGV0LWhlYWx0aGNoZWNrLnNlcnZpY2UKLSBzeXN0ZW1jdGwgZGFlbW9uLXJlbG9hZAo=
kind: Secret
metadata:
  creationTimestamp: null
  name: ubuntu-20.04-aws-osc-provisioning
  namespace: cloud-init-settings
  resourceVersion: "1"
