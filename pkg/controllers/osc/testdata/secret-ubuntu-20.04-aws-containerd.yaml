apiVersion: v1
data:
  cloud-init: 
kind: Secret
metadata:
  creationTimestamp: null
  name: ubuntu-20.04-aws-osc-provisioning
  namespace: kube-system
  resourceVersion: "1"
