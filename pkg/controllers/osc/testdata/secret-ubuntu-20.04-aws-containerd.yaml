apiVersion: v1
data:
  cloud-config: I2Nsb3VkLWNvbmZpZwpzc2hfcHdhdXRoOiBubwpzc2hfYXV0aG9yaXplZF9rZXlzOgotICdzc2gtcnNhIEFBQUFCM056YUMxeWMyRUFBQUFEQVFBQkFBQUNBUURkT0loWW16Q0s1RFNWTHUzYycKd3JpdGVfZmlsZXM6Ci0gcGF0aDogJy9ldGMvc3lzdGVtZC9qb3VybmFsZC5jb25mLmQvbWF4X2Rpc2tfdXNlLmNvbmYnCiAgY29udGVudDogfC0KICAgIFtKb3VybmFsXQogICAgU3lzdGVtTWF4VXNlPTVHCiAgICAKCi0gcGF0aDogJy9vcHQvbG9hZC1rZXJuZWwtbW9kdWxlcy5zaCcKICBwZXJtaXNzaW9uczogJzA3NTUnCiAgY29udGVudDogfC0KICAgICMhL3Vzci9iaW4vZW52IGJhc2gKICAgIHNldCAtZXVvIHBpcGVmYWlsCiAgICAKICAgIG1vZHByb2JlIGlwX3ZzCiAgICBtb2Rwcm9iZSBpcF92c19ycgogICAgbW9kcHJvYmUgaXBfdnNfd3JyCiAgICBtb2Rwcm9iZSBpcF92c19zaAogICAgCiAgICBpZiBtb2RpbmZvIG5mX2Nvbm50cmFja19pcHY0ICY+IC9kZXYvbnVsbDsgdGhlbgogICAgICBtb2Rwcm9iZSBuZl9jb25udHJhY2tfaXB2NAogICAgZWxzZQogICAgICBtb2Rwcm9iZSBuZl9jb25udHJhY2sKICAgIGZpCiAgICAKCi0gcGF0aDogJy9ldGMvc3lzY3RsLmQvazhzLmNvbmYnCiAgY29udGVudDogfC0KICAgIG5ldC5icmlkZ2UuYnJpZGdlLW5mLWNhbGwtaXA2dGFibGVzID0gMQogICAgbmV0LmJyaWRnZS5icmlkZ2UtbmYtY2FsbC1pcHRhYmxlcyA9IDEKICAgIGtlcm5lbC5wYW5pY19vbl9vb3BzID0gMQogICAga2VybmVsLnBhbmljID0gMTAKICAgIG5ldC5pcHY0LmlwX2ZvcndhcmQgPSAxCiAgICB2bS5vdmVyY29tbWl0X21lbW9yeSA9IDEKICAgIGZzLmlub3RpZnkubWF4X3VzZXJfd2F0Y2hlcyA9IDEwNDg1NzYKICAgIAoKLSBwYXRoOiAnL2V0Yy9kZWZhdWx0L2dydWIuZC82MC1zd2FwLWFjY291bnRpbmcuY2ZnJwogIGNvbnRlbnQ6IHwtCiAgICAjIEFkZGVkIGJ5IGt1YmVybWF0aWMgbWFjaGluZS1jb250cm9sbGVyCiAgICAjIEVuYWJsZSBjZ3JvdXBzIG1lbW9yeSBhbmQgc3dhcCBhY2NvdW50aW5nCiAgICBHUlVCX0NNRExJTkVfTElOVVg9ImNncm91cF9lbmFibGU9bWVtb3J5IHN3YXBhY2NvdW50PTEiCiAgICAKCi0gcGF0aDogJy9vcHQvYmluL3NldHVwJwogIHBlcm1pc3Npb25zOiAnMDc1NScKICBjb250ZW50OiB8LQogICAgIyEvYmluL2Jhc2gKICAgIHNldCAteGV1byBwaXBlZmFpbAogICAgaWYgc3lzdGVtY3RsIGlzLWFjdGl2ZSB1Znc7IHRoZW4gc3lzdGVtY3RsIHN0b3AgdWZ3OyBmaQogICAgc3lzdGVtY3RsIG1hc2sgdWZ3CiAgICBzeXN0ZW1jdGwgcmVzdGFydCBzeXN0ZW1kLW1vZHVsZXMtbG9hZC5zZXJ2aWNlCiAgICBzeXNjdGwgLS1zeXN0ZW0KICAgIHNlZCAtaS5vcmlnICcvLipzd2FwLiovZCcgL2V0Yy9mc3RhYgogICAgc3dhcG9mZiAtYQogICAgCiAgICBhcHQtZ2V0IHVwZGF0ZQogICAgCiAgICBERUJJQU5fRlJPTlRFTkQ9bm9uaW50ZXJhY3RpdmUgYXB0LWdldCAtbyBEcGtnOjpPcHRpb25zOjo9Ii0tZm9yY2UtY29uZmRlZiIgLW8gRHBrZzo6T3B0aW9uczo6PSItLWZvcmNlLWNvbmZvbGQiIGluc3RhbGwgLXkgXAogICAgICBjdXJsIFwKICAgICAgY2EtY2VydGlmaWNhdGVzIFwKICAgICAgY2VwaC1jb21tb24gXAogICAgICBjaWZzLXV0aWxzIFwKICAgICAgY29ubnRyYWNrIFwKICAgICAgZTJmc3Byb2dzIFwKICAgICAgZWJ0YWJsZXMgXAogICAgICBldGh0b29sIFwKICAgICAgZ2x1c3RlcmZzLWNsaWVudCBcCiAgICAgIGlwdGFibGVzIFwKICAgICAganEgXAogICAgICBrbW9kIFwKICAgICAgb3BlbnNzaC1jbGllbnQgXAogICAgICBuZnMtY29tbW9uIFwKICAgICAgc29jYXQgXAogICAgICB1dGlsLWxpbnV4IFwKICAgICAgaXB2c2FkbQogICAgYXB0LWdldCB1cGRhdGUKICAgIGFwdC1nZXQgaW5zdGFsbCAteSBhcHQtdHJhbnNwb3J0LWh0dHBzIGNhLWNlcnRpZmljYXRlcyBjdXJsIHNvZnR3YXJlLXByb3BlcnRpZXMtY29tbW9uIGxzYi1yZWxlYXNlCiAgICBjdXJsIC1mc1NMIGh0dHBzOi8vZG93bmxvYWQuZG9ja2VyLmNvbS9saW51eC91YnVudHUvZ3BnIHwgYXB0LWtleSBhZGQgLQogICAgYWRkLWFwdC1yZXBvc2l0b3J5ICJkZWIgaHR0cHM6Ly9kb3dubG9hZC5kb2NrZXIuY29tL2xpbnV4L3VidW50dSAkKGxzYl9yZWxlYXNlIC1jcykgc3RhYmxlIgogICAgCiAgICBjYXQgPDxFT0YgfCB0ZWUgL2V0Yy9jcmljdGwueWFtbAogICAgcnVudGltZS1lbmRwb2ludDogdW5peDovLy9ydW4vY29udGFpbmVyZC9jb250YWluZXJkLnNvY2sKICAgIEVPRgogICAgCiAgICBta2RpciAtcCAvZXRjL3N5c3RlbWQvc3lzdGVtL2NvbnRhaW5lcmQuc2VydmljZS5kCiAgICBjYXQgPDxFT0YgfCB0ZWUgL2V0Yy9zeXN0ZW1kL3N5c3RlbS9jb250YWluZXJkLnNlcnZpY2UuZC9lbnZpcm9ubWVudC5jb25mCiAgICBbU2VydmljZV0KICAgIFJlc3RhcnQ9YWx3YXlzCiAgICBFbnZpcm9ubWVudEZpbGU9LS9ldGMvZW52aXJvbm1lbnQKICAgIEVPRgogICAgCiAgICBhcHQtZ2V0IGluc3RhbGwgLXkgLS1hbGxvdy1kb3duZ3JhZGVzIGNvbnRhaW5lcmQuaW89MS40KgogICAgYXB0LW1hcmsgaG9sZCBjb250YWluZXJkLmlvCiAgICAKICAgIHN5c3RlbWN0bCBkYWVtb24tcmVsb2FkCiAgICBzeXN0ZW1jdGwgZW5hYmxlIC0tbm93IGNvbnRhaW5lcmQKICAgIG9wdF9iaW49L29wdC9iaW4KICAgIGNuaV9iaW5fZGlyPS9vcHQvY25pL2JpbgogICAgbWtkaXIgLXAgL2V0Yy9jbmkvbmV0LmQgL2V0Yy9rdWJlcm5ldGVzL2R5bmFtaWMtY29uZmlnLWRpciAvZXRjL2t1YmVybmV0ZXMvbWFuaWZlc3RzICIkb3B0X2JpbiIgIiRjbmlfYmluX2RpciIKICAgIGFyY2g9JHtIT1NUX0FSQ0gtfQogICAgaWYgWyAteiAiJGFyY2giIF0KICAgIHRoZW4KICAgIGNhc2UgJCh1bmFtZSAtbSkgaW4KICAgIHg4Nl82NCkKICAgICAgICBhcmNoPSJhbWQ2NCIKICAgICAgICA7OwogICAgYWFyY2g2NCkKICAgICAgICBhcmNoPSJhcm02NCIKICAgICAgICA7OwogICAgKikKICAgICAgICBlY2hvICJ1bnN1cHBvcnRlZCBDUFUgYXJjaGl0ZWN0dXJlLCBleGl0aW5nIgogICAgICAgIGV4aXQgMQogICAgICAgIDs7CiAgICBlc2FjCiAgICBmaQogICAgQ05JX1ZFUlNJT049IiR7Q05JX1ZFUlNJT046LXYwLjguN30iCiAgICBjbmlfYmFzZV91cmw9Imh0dHBzOi8vZ2l0aHViLmNvbS9jb250YWluZXJuZXR3b3JraW5nL3BsdWdpbnMvcmVsZWFzZXMvZG93bmxvYWQvJENOSV9WRVJTSU9OIgogICAgY25pX2ZpbGVuYW1lPSJjbmktcGx1Z2lucy1saW51eC0kYXJjaC0kQ05JX1ZFUlNJT04udGd6IgogICAgY3VybCAtTGZvICIkY25pX2Jpbl9kaXIvJGNuaV9maWxlbmFtZSIgIiRjbmlfYmFzZV91cmwvJGNuaV9maWxlbmFtZSIKICAgIGNuaV9zdW09JChjdXJsIC1MZiAiJGNuaV9iYXNlX3VybC8kY25pX2ZpbGVuYW1lLnNoYTI1NiIpCiAgICBjZCAiJGNuaV9iaW5fZGlyIgogICAgc2hhMjU2c3VtIC1jIDw8PCIkY25pX3N1bSIKICAgIHRhciB4dmYgIiRjbmlfZmlsZW5hbWUiCiAgICBybSAtZiAiJGNuaV9maWxlbmFtZSIKICAgIGNkIC0KICAgIEtVQkVfVkVSU0lPTj0iJHtLVUJFX1ZFUlNJT046LXYxLjIyLjF9IgogICAga3ViZV9kaXI9IiRvcHRfYmluL2t1YmVybmV0ZXMtJEtVQkVfVkVSU0lPTiIKICAgIGt1YmVfYmFzZV91cmw9Imh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9rdWJlcm5ldGVzLXJlbGVhc2UvcmVsZWFzZS8kS1VCRV9WRVJTSU9OL2Jpbi9saW51eC8kYXJjaCIKICAgIGt1YmVfc3VtX2ZpbGU9IiRrdWJlX2Rpci9zaGEyNTYiCiAgICBta2RpciAtcCAiJGt1YmVfZGlyIgogICAgOiA+IiRrdWJlX3N1bV9maWxlIgogICAgCiAgICBmb3IgYmluIGluIGt1YmVsZXQga3ViZWFkbSBrdWJlY3RsOyBkbwogICAgICAgIGN1cmwgLUxmbyAiJGt1YmVfZGlyLyRiaW4iICIka3ViZV9iYXNlX3VybC8kYmluIgogICAgICAgIGNobW9kICt4ICIka3ViZV9kaXIvJGJpbiIKICAgICAgICBzdW09JChjdXJsIC1MZiAiJGt1YmVfYmFzZV91cmwvJGJpbi5zaGEyNTYiKQogICAgICAgIGVjaG8gIiRzdW0gICRrdWJlX2Rpci8kYmluIiA+PiIka3ViZV9zdW1fZmlsZSIKICAgIGRvbmUKICAgIHNoYTI1NnN1bSAtYyAiJGt1YmVfc3VtX2ZpbGUiCiAgICAKICAgIGZvciBiaW4gaW4ga3ViZWxldCBrdWJlYWRtIGt1YmVjdGw7IGRvCiAgICAgICAgbG4gLXNmICIka3ViZV9kaXIvJGJpbiIgIiRvcHRfYmluIi8kYmluCiAgICBkb25lCiAgICAKICAgIGlmIFtbICEgLXggL29wdC9iaW4vaGVhbHRoLW1vbml0b3Iuc2ggXV07IHRoZW4KICAgICAgICBjdXJsIC1MZm8gL29wdC9iaW4vaGVhbHRoLW1vbml0b3Iuc2ggaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2t1YmVybWF0aWMvbWFjaGluZS1jb250cm9sbGVyLzc5NjdhMGFmMmI3NWYyOWFkMmFiMjI3ZWVhYTI2ZWE3YjBmMmZiZGUvcGtnL3VzZXJkYXRhL3NjcmlwdHMvaGVhbHRoLW1vbml0b3Iuc2gKICAgICAgICBjaG1vZCAreCAvb3B0L2Jpbi9oZWFsdGgtbW9uaXRvci5zaAogICAgZmkKICAgIAogICAgIyBzZXQga3ViZWxldCBub2RlaXAgZW52aXJvbm1lbnQgdmFyaWFibGUKICAgIC9vcHQvYmluL3NldHVwX25ldF9lbnYuc2gKICAgIAogICAgc3lzdGVtY3RsIGVuYWJsZSAtLW5vdyBrdWJlbGV0CiAgICBzeXN0ZW1jdGwgZW5hYmxlIC0tbm93IC0tbm8tYmxvY2sga3ViZWxldC1oZWFsdGhjaGVjay5zZXJ2aWNlCiAgICAKCi0gcGF0aDogJy9vcHQvYmluL3N1cGVydmlzZS5zaCcKICBwZXJtaXNzaW9uczogJzA3NTUnCiAgY29udGVudDogfC0KICAgICMhL2Jpbi9iYXNoCiAgICBzZXQgLXhldW8gcGlwZWZhaWwKICAgIHdoaWxlICEgIiRAIjsgZG8KICAgICAgc2xlZXAgMQogICAgZG9uZQogICAgCgotIHBhdGg6ICcvZXRjL3N5c3RlbWQvc3lzdGVtL2t1YmVsZXQuc2VydmljZScKICBjb250ZW50OiB8LQogICAgW1VuaXRdCiAgICBBZnRlcj1jb250YWluZXJkLnNlcnZpY2UKICAgIFJlcXVpcmVzPWNvbnRhaW5lcmQuc2VydmljZQogICAgCiAgICBEZXNjcmlwdGlvbj1rdWJlbGV0OiBUaGUgS3ViZXJuZXRlcyBOb2RlIEFnZW50CiAgICBEb2N1bWVudGF0aW9uPWh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL2hvbWUvCiAgICAKICAgIFtTZXJ2aWNlXQogICAgUmVzdGFydD1hbHdheXMKICAgIFN0YXJ0TGltaXRJbnRlcnZhbD0wCiAgICBSZXN0YXJ0U2VjPTEwCiAgICBDUFVBY2NvdW50aW5nPXRydWUKICAgIE1lbW9yeUFjY291bnRpbmc9dHJ1ZQogICAgCiAgICBFbnZpcm9ubWVudD0iUEFUSD0vb3B0L2JpbjovYmluOi91c3IvbG9jYWwvc2JpbjovdXNyL2xvY2FsL2JpbjovdXNyL3NiaW46L3Vzci9iaW46L3NiaW4vIgogICAgRW52aXJvbm1lbnRGaWxlPS0vZXRjL2Vudmlyb25tZW50CiAgICAKICAgIEV4ZWNTdGFydFByZT0vYmluL2Jhc2ggL29wdC9sb2FkLWtlcm5lbC1tb2R1bGVzLnNoCiAgICBFeGVjU3RhcnRQcmU9L2Jpbi9iYXNoIC9vcHQvYmluL3NldHVwX25ldF9lbnYuc2gKICAgIEV4ZWNTdGFydD0vb3B0L2Jpbi9rdWJlbGV0ICRLVUJFTEVUX0VYVFJBX0FSR1MgXAogICAgICAtLWJvb3RzdHJhcC1rdWJlY29uZmlnPS9ldGMva3ViZXJuZXRlcy9ib290c3RyYXAta3ViZWxldC5jb25mIFwKICAgICAgLS1rdWJlY29uZmlnPS92YXIvbGliL2t1YmVsZXQva3ViZWNvbmZpZyBcCiAgICAgIC0tY29uZmlnPS9ldGMva3ViZXJuZXRlcy9rdWJlbGV0LmNvbmYgXAogICAgICAtLW5ldHdvcmstcGx1Z2luPWNuaSBcCiAgICAgIC0tY2VydC1kaXI9L2V0Yy9rdWJlcm5ldGVzL3BraSBcCiAgICAgIC0tY2xvdWQtcHJvdmlkZXI9YXdzIFwKICAgICAgLS1jbG91ZC1jb25maWc9L2V0Yy9rdWJlcm5ldGVzL2Nsb3VkLWNvbmZpZyBcCiAgICAgIC0tZHluYW1pYy1jb25maWctZGlyPS9ldGMva3ViZXJuZXRlcy9keW5hbWljLWNvbmZpZy1kaXIgXAogICAgICAtLWZlYXR1cmUtZ2F0ZXM9RHluYW1pY0t1YmVsZXRDb25maWc9dHJ1ZSBcCiAgICAgIC0tZXhpdC1vbi1sb2NrLWNvbnRlbnRpb24gXAogICAgICAtLWxvY2stZmlsZT0vdG1wL2t1YmVsZXQubG9jayBcCiAgICAgIC0tY29udGFpbmVyLXJ1bnRpbWU9cmVtb3RlIFwKICAgICAgLS1jb250YWluZXItcnVudGltZS1lbmRwb2ludD11bml4Oi8vL3J1bi9jb250YWluZXJkL2NvbnRhaW5lcmQuc29jayBcCiAgICAgIC0tbm9kZS1pcCAke0tVQkVMRVRfTk9ERV9JUH0KICAgIAogICAgW0luc3RhbGxdCiAgICBXYW50ZWRCeT1tdWx0aS11c2VyLnRhcmdldAogICAgCgotIHBhdGg6ICcvZXRjL3N5c3RlbWQvc3lzdGVtL2t1YmVsZXQuc2VydmljZS5kL2V4dHJhcy5jb25mJwogIGNvbnRlbnQ6IHwtCiAgICBbU2VydmljZV0KICAgIEVudmlyb25tZW50PSJLVUJFTEVUX0VYVFJBX0FSR1M9LS1yZXNvbHYtY29uZj0vcnVuL3N5c3RlbWQvcmVzb2x2ZS9yZXNvbHYuY29uZiIKICAgIAoKLSBwYXRoOiAnL2V0Yy9rdWJlcm5ldGVzL2Nsb3VkLWNvbmZpZycKICBwZXJtaXNzaW9uczogJzA2MDAnCiAgY29udGVudDogfC0KICAgIFtnbG9iYWxdCiAgICBab25lPWV1LWNlbnRyYWwtMWIKICAgIFZQQz1lLTEyM2YKICAgIFN1Ym5ldElEPXRlc3Qtc3VibmV0CiAgICAKCi0gcGF0aDogJy9vcHQvYmluL3NldHVwX25ldF9lbnYuc2gnCiAgcGVybWlzc2lvbnM6ICcwNzU1JwogIGNvbnRlbnQ6IHwtCiAgICAjIS91c3IvYmluL2VudiBiYXNoCiAgICBlY2hvZGF0ZSgpIHsKICAgICAgZWNobyAiWyQoZGF0ZSAtSXMpXSIgIiRAIgogICAgfQogICAgCiAgICAjIGdldCB0aGUgZGVmYXVsdCBpbnRlcmZhY2UgSVAgYWRkcmVzcwogICAgREVGQVVMVF9JRkNfSVA9JChpcCAtbyAgcm91dGUgZ2V0IDEgfCBncmVwIC1vUCAic3JjIFxLXFMrIikKICAgIAogICAgaWYgWyAteiAiJHtERUZBVUxUX0lGQ19JUH0iIF0KICAgIHRoZW4KICAgICAgZWNob2RhdGUgIkZhaWxlZCB0byBnZXQgSVAgYWRkcmVzcyBmb3IgdGhlIGRlZmF1bHQgcm91dGUgaW50ZXJmYWNlIgogICAgICBleGl0IDEKICAgIGZpCiAgICAKICAgICAjIGdldCB0aGUgZnVsbCBob3N0bmFtZQogICAgRlVMTF9IT1NUTkFNRT0kKGhvc3RuYW1lIC1mKQogICAgCiAgICAjIHdyaXRlIHRoZSBub2RlaXBfZW52IGZpbGUKICAgICMgd2UgbmVlZCB0aGUgbGluZSBiZWxvdyBiZWNhdXNlIGZsYXRjYXIgaGFzIHRoZSBzYW1lIHN0cmluZyAiY29yZW9zIiBpbiB0aGF0IGZpbGUKICAgIGlmIGdyZXAgLXEgY29yZW9zIC9ldGMvb3MtcmVsZWFzZQogICAgdGhlbgogICAgICBlY2hvICJLVUJFTEVUX05PREVfSVA9JHtERUZBVUxUX0lGQ19JUH1cbktVQkVMRVRfSE9TVE5BTUU9JHtGVUxMX0hPU1ROQU1FfSIgPiAvZXRjL2t1YmVybmV0ZXMvbm9kZWlwLmNvbmYKICAgIGVsaWYgWyAhIC1kIC9ldGMvc3lzdGVtZC9zeXN0ZW0va3ViZWxldC5zZXJ2aWNlLmQgXQogICAgdGhlbgogICAgICBlY2hvZGF0ZSAiQ2FuJ3QgZmluZCBrdWJlbGV0IHNlcnZpY2UgZXh0cmFzIGRpcmVjdG9yeSIKICAgICAgZXhpdCAxCiAgICBlbHNlCiAgICAgIGVjaG8gLWUgIltTZXJ2aWNlXVxuRW52aXJvbm1lbnQ9XCJLVUJFTEVUX05PREVfSVA9JHtERUZBVUxUX0lGQ19JUH1cIlxuRW52aXJvbm1lbnQ9XCJLVUJFTEVUX0hPU1ROQU1FPSR7RlVMTF9IT1NUTkFNRX1cIiIgPiAvZXRjL3N5c3RlbWQvc3lzdGVtL2t1YmVsZXQuc2VydmljZS5kL25vZGVpcC5jb25mCiAgICBmaQogICAgCgotIHBhdGg6ICcvZXRjL2t1YmVybmV0ZXMvYm9vdHN0cmFwLWt1YmVsZXQuY29uZicKICBwZXJtaXNzaW9uczogJzA2MDAnCiAgY29udGVudDogfC0KICAgIGFwaVZlcnNpb246IHYxCiAgICBjbHVzdGVyczoKICAgIC0gY2x1c3RlcjoKICAgICAgICBjZXJ0aWZpY2F0ZS1hdXRob3JpdHktZGF0YTogTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVVlhha05EUVRCTFowRjNTVUpCWjBsS1FVeG1VbXhYYzBrNFdWRklUVUV3UjBOVGNVZFRTV0l6UkZGRlFrSlJWVUZOU0hONFEzcEJTa0puVGxZS1FrRlpWRUZzVmxSTlVYTjNRMUZaUkZaUlVVbEZkMHBFVVZSRlYwMUNVVWRCTVZWRlFuaE5UbFV5Um5WSlJWcDVXVmMxYW1GWVRtcGlla1ZWVFVKSlJ3cEJNVlZGUTJoTlRGRnVTbWhhUjFwd1pFaHdjR0p0VFhoRmFrRlJRbWRPVmtKQlRWUkRWM2gyV1RKR2MyRkhPWHBrUkVWa1RVSnpSME5UY1VkVFNXSXpDa1JSUlVwQlVsbFBXVzVLYUZwRlFtdFpWelZ1V1ZNMWFtSXlNSGRJYUdOT1RWUlJkMDU2UlRGTmFrRXdUbXBCTVZkb1kwNU5WR04zVGxSQk1FMXFRVEFLVG1wQk1WZHFRamROVVhOM1ExRlpSRlpSVVVkRmQwcFdWWHBGVEUxQmEwZEJNVlZGUTBKTlExRXdSWGhHYWtGVlFtZE9Wa0pCWTFSRVZrNW9ZbWxDUndwamJVWjFXVEpzZWxreU9IaEdSRUZUUW1kT1ZrSkJiMVJETUVwNVdWZFNiV0ZZVWpaaFZ6VnFUVkpKZDBWQldVUldVVkZFUlhkc2MySXlUbWhpUjJoMkNtTXpVWGhJVkVGaVFtZHJjV2hyYVVjNWR6QkNRMUZGVjBSdFNubFpWMUpCV2tkR2RWb3lSWFZaTWpsMFRVbEpRa2xxUVU1Q1oydHhhR3RwUnpsM01FSUtRVkZGUmtGQlQwTkJVVGhCVFVsSlFrTm5TME5CVVVWQmREVm1RV3B3TkdaVVkyVnJWMVZVWm5wemNEQnJlV2xvTVU5WlluTkhUREJMV0RGbFVtSlRVd3BTT0U5a01DczVVVFl5U0hsdWVTdEhSbmROVkdJMFFTOUxWVGh0YzNOdlNIWmpZMlZUUVVGaWQyWmllRVpMTHl0ek5URlViMkp4Vlc1UFVscHlUMjlVQ2xwcWExVjVaMko1V0VSVFN6azVXVUppWTFJeFVHbHdPSFozVFZSdE5GaExkVXgwUTJsblpVSkNaR3BxUVZGa1oxVlBNamhNUlU1SGJITk5ibTFsV1dzS1NtWlBSRlpIYmxadGNqVk1kR0k1UVU1Qk9FbExlVlJtYzI1SVNqUnBUME5UTDFCc1VHSlZhakp4TjFsdWIxWk1jRzl6VlVKTmJHZFZZaTlEZVd0WU13cHRUMjlNWWpSNVNrcFJlVUV2YVZOVU5scDRhVWxGYWpNMlJEUjVWMW8xYkdjM1dVcHNLMVZwYVVKUlNFZERibEJrUjNscGNIRldNRFpsZURCb1pWbFhDbU5oYVZjNFRGZGFVMVZST1ROcVVTdFhWa05JT0doVU4wUlJUekZrYlhOMlZXMVliSEV2U21WQmJIZFJMMUZKUkVGUlFVSnZORWhuVFVsSVpFMUNNRWNLUVRGVlpFUm5VVmRDUWxKalFWSlBkR2hUTkZBMFZUZDJWR1pxUW5sRE5UWTVVamRGTmtSRFFuSlJXVVJXVWpCcVFrbEhiRTFKUjJsblFsSmpRVkpQZEFwb1V6UlFORlUzZGxSbWFrSjVRelUyT1ZJM1JUWkxSaTl3U0RCM1pYcEZURTFCYTBkQk1WVkZRbWhOUTFaV1RYaERla0ZLUW1kT1ZrSkJaMVJCYTA1Q0NrMVNXWGRHUVZsRVZsRlJTRVYzTVZSWlZ6Um5VbTVLYUdKdFRuQmpNazUyVFZKUmQwVm5XVVJXVVZGTFJYZDBRMk50Um10YWJXd3daVzFzZFZsNlJWTUtUVUpCUjBFeFZVVkJlRTFLWWtjNWFsbFhlRzlpTTA0d1RWSXdkMGQzV1VwTGIxcEphSFpqVGtGUmEwSkdaelZwWTIxR2ExRkhVbWhpYldSb1RHMU9kZ3BpV1VsS1FVeG1VbXhYYzBrNFdWRklUVUYzUjBFeFZXUkZkMUZHVFVGTlFrRm1PSGRFVVZsS1MyOWFTV2gyWTA1QlVVVkdRbEZCUkdkblJVSkJSelpvQ2xVNVpqbHpUa2d3THpadlFtSkhSM2t5UlZaVk1GVm5TVlJWVVVseVJsZHZPWEpHYTNKWE5Xc3ZXR3RFYWxGdEt6TnNlbXBVTUdsSFVqUkplRVV2UVc4S1pWVTJjMUZvZFdFM2QzSlhaVVpGYmpRM1IwdzVPR3h1UTNOS1pFUTNiMXBPYUVadFVUazFWR0l2VEc1RVZXcHpOVmxxT1dKeVVEQk9WM3BZWmxsVk5BcFZTekphYmtsT1NsSmpTbkJDT0dsU1EyRkRlRVU0UkdSalZVWXdXSEZKUlhFMmNFRXlOekp6Ym05TWJXbFlURTEyVG13emExbEZaRzByYW1VMmRtOUVDalU0VTA1V1JWVnplblI2VVhsWWJVcEZhRU53ZDFaSk1FRTJVVU5xZWxocUszRjJjRzEzTTFwYVNHazRTbmRZWldrNFdscENURlJUUmtKcmFUaGFOMjRLYzBnNVFrSklNemd2VTNwVmJVRk9ORkZJVTFCNU1XZHFjVzB3TUU5QlJUaE9ZVmxFYTJndllucEZOR1EzYlV4SFIwMVhjQzlYUlROTFVGTjFPREpJUmdwclVHVTJXRzlUWW1sTWJTOXJlR3N6TWxRd1BRb3RMUzB0TFVWT1JDQkRSVkpVU1VaSlEwRlVSUzB0TFMwdAogICAgICAgIHNlcnZlcjogaHR0cHM6Ly9zZXJ2ZXI6NDQzCiAgICAgIG5hbWU6ICIiCiAgICBjb250ZXh0czogbnVsbAogICAgY3VycmVudC1jb250ZXh0OiAiIgogICAga2luZDogQ29uZmlnCiAgICBwcmVmZXJlbmNlczoge30KICAgIHVzZXJzOgogICAgLSBuYW1lOiAiIgogICAgICB1c2VyOgogICAgICAgIHRva2VuOiBteS10b2tlbgogICAgCiAgICAKCi0gcGF0aDogJy9ldGMva3ViZXJuZXRlcy9wa2kvY2EuY3J0JwogIGNvbnRlbnQ6IHwtCiAgICAtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KICAgIE1JSUVXakNDQTBLZ0F3SUJBZ0lKQUxmUmxXc0k4WVFITUEwR0NTcUdTSWIzRFFFQkJRVUFNSHN4Q3pBSkJnTlYKICAgIEJBWVRBbFZUTVFzd0NRWURWUVFJRXdKRFFURVdNQlFHQTFVRUJ4TU5VMkZ1SUVaeVlXNWphWE5qYnpFVU1CSUcKICAgIEExVUVDaE1MUW5KaFpHWnBkSHBwYm1NeEVqQVFCZ05WQkFNVENXeHZZMkZzYUc5emRERWRNQnNHQ1NxR1NJYjMKICAgIERRRUpBUllPWW5KaFpFQmtZVzVuWVM1amIyMHdIaGNOTVRRd056RTFNakEwTmpBMVdoY05NVGN3TlRBME1qQTAKICAgIE5qQTFXakI3TVFzd0NRWURWUVFHRXdKVlV6RUxNQWtHQTFVRUNCTUNRMEV4RmpBVUJnTlZCQWNURFZOaGJpQkcKICAgIGNtRnVZMmx6WTI4eEZEQVNCZ05WQkFvVEMwSnlZV1JtYVhSNmFXNWpNUkl3RUFZRFZRUURFd2xzYjJOaGJHaHYKICAgIGMzUXhIVEFiQmdrcWhraUc5dzBCQ1FFV0RtSnlZV1JBWkdGdVoyRXVZMjl0TUlJQklqQU5CZ2txaGtpRzl3MEIKICAgIEFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXQ1ZkFqcDRmVGNla1dVVGZ6c3Awa3lpaDFPWWJzR0wwS1gxZVJiU1MKICAgIFI4T2QwKzlRNjJIeW55K0dGd01UYjRBL0tVOG1zc29IdmNjZVNBQWJ3ZmJ4RksvK3M1MVRvYnFVbk9SWnJPb1QKICAgIFpqa1V5Z2J5WERTSzk5WUJiY1IxUGlwOHZ3TVRtNFhLdUx0Q2lnZUJCZGpqQVFkZ1VPMjhMRU5HbHNNbm1lWWsKICAgIEpmT0RWR25WbXI1THRiOUFOQThJS3lUZnNuSEo0aU9DUy9QbFBiVWoycTdZbm9WTHBvc1VCTWxnVWIvQ3lrWDMKICAgIG1Pb0xiNHlKSlF5QS9pU1Q2WnhpSUVqMzZENHlXWjVsZzdZSmwrVWlpQlFIR0NuUGRHeWlwcVYwNmV4MGhlWVcKICAgIGNhaVc4TFdaU1VROTNqUStXVkNIOGhUN0RRTzFkbXN2VW1YbHEvSmVBbHdRL1FJREFRQUJvNEhnTUlIZE1CMEcKICAgIEExVWREZ1FXQkJSY0FST3RoUzRQNFU3dlRmakJ5QzU2OVI3RTZEQ0JyUVlEVlIwakJJR2xNSUdpZ0JSY0FST3QKICAgIGhTNFA0VTd2VGZqQnlDNTY5UjdFNktGL3BIMHdlekVMTUFrR0ExVUVCaE1DVlZNeEN6QUpCZ05WQkFnVEFrTkIKICAgIE1SWXdGQVlEVlFRSEV3MVRZVzRnUm5KaGJtTnBjMk52TVJRd0VnWURWUVFLRXd0Q2NtRmtabWwwZW1sdVl6RVMKICAgIE1CQUdBMVVFQXhNSmJHOWpZV3hvYjNOME1SMHdHd1lKS29aSWh2Y05BUWtCRmc1aWNtRmtRR1JoYm1kaExtTnYKICAgIGJZSUpBTGZSbFdzSThZUUhNQXdHQTFVZEV3UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUZCUUFEZ2dFQkFHNmgKICAgIFU5ZjlzTkgwLzZvQmJHR3kyRVZVMFVnSVRVUUlyRldvOXJGa3JXNWsvWGtEalFtKzNsempUMGlHUjRJeEUvQW8KICAgIGVVNnNRaHVhN3dyV2VGRW40N0dMOThsbkNzSmREN29aTmhGbVE5NVRiL0xuRFVqczVZajliclAwTld6WGZZVTQKICAgIFVLMlpuSU5KUmNKcEI4aVJDYUN4RThEZGNVRjBYcUlFcTZwQTI3MnNub0xtaVhMTXZObDNrWUVkbStqZTZ2b0QKICAgIDU4U05WRVVzenR6UXlYbUpFaENwd1ZJMEE2UUNqelhqK3F2cG13M1paSGk4SndYZWk4WlpCTFRTRkJraThaN24KICAgIHNIOUJCSDM4L1N6VW1BTjRRSFNQeTFnanFtMDBPQUU4TmFZRGtoL2J6RTRkN21MR0dNV3AvV0UzS1BTdTgySEYKICAgIGtQZTZYb1NiaUxtL2t4azMyVDA9CiAgICAtLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCiAgICAKCi0gcGF0aDogJy9ldGMvc3lzdGVtZC9zeXN0ZW0vc2V0dXAuc2VydmljZScKICBwZXJtaXNzaW9uczogJzA2NDQnCiAgY29udGVudDogfC0KICAgIFtJbnN0YWxsXQogICAgV2FudGVkQnk9bXVsdGktdXNlci50YXJnZXQKICAgIAogICAgW1VuaXRdCiAgICBSZXF1aXJlcz1uZXR3b3JrLW9ubGluZS50YXJnZXQKICAgIEFmdGVyPW5ldHdvcmstb25saW5lLnRhcmdldAogICAgCiAgICBbU2VydmljZV0KICAgIFR5cGU9b25lc2hvdAogICAgUmVtYWluQWZ0ZXJFeGl0PXRydWUKICAgIEVudmlyb25tZW50RmlsZT0tL2V0Yy9lbnZpcm9ubWVudAogICAgRXhlY1N0YXJ0PS9vcHQvYmluL3N1cGVydmlzZS5zaCAvb3B0L2Jpbi9zZXR1cAogICAgCgotIHBhdGg6ICcvZXRjL3Byb2ZpbGUuZC9vcHQtYmluLXBhdGguc2gnCiAgcGVybWlzc2lvbnM6ICcwNjQ0JwogIGNvbnRlbnQ6IHwtCiAgICBleHBvcnQgUEFUSD0iL29wdC9iaW46JFBBVEgiCiAgICAKCi0gcGF0aDogJy9ldGMva3ViZXJuZXRlcy9rdWJlbGV0LmNvbmYnCiAgY29udGVudDogfC0KICAgIGFwaVZlcnNpb246IGt1YmVsZXQuY29uZmlnLms4cy5pby92MWJldGExCiAgICBraW5kOiBLdWJlbGV0Q29uZmlndXJhdGlvbgogICAgYXV0aGVudGljYXRpb246CiAgICAgIGFub255bW91czoKICAgICAgICBlbmFibGVkOiBmYWxzZQogICAgICB3ZWJob29rOgogICAgICAgIGVuYWJsZWQ6IHRydWUKICAgICAgeDUwOToKICAgICAgICBjbGllbnRDQUZpbGU6IC9ldGMva3ViZXJuZXRlcy9wa2kvY2EuY3J0CiAgICBhdXRob3JpemF0aW9uOgogICAgICBtb2RlOiBXZWJob29rCiAgICBjZ3JvdXBEcml2ZXI6IHN5c3RlbWQKICAgIGNsdXN0ZXJETlM6CiAgICAtICIxMC4wLjAuMCIKICAgIGNsdXN0ZXJEb21haW46IGNsdXN0ZXIubG9jYWwKICAgIGZlYXR1cmVHYXRlczoKICAgICAgUm90YXRlS3ViZWxldFNlcnZlckNlcnRpZmljYXRlOiB0cnVlCiAgICBwcm90ZWN0S2VybmVsRGVmYXVsdHM6IHRydWUKICAgIHJlYWRPbmx5UG9ydDogMAogICAgcm90YXRlQ2VydGlmaWNhdGVzOiB0cnVlCiAgICBzZXJ2ZXJUTFNCb290c3RyYXA6IHRydWUKICAgIHN0YXRpY1BvZFBhdGg6IC9ldGMva3ViZXJuZXRlcy9tYW5pZmVzdHMKICAgIGt1YmVSZXNlcnZlZDoKICAgICAgY3B1OiAyMDBtCiAgICAgIGVwaGVtZXJhbC1zdG9yYWdlOiAxR2kKICAgICAgbWVtb3J5OiAyMDBNaQogICAgc3lzdGVtUmVzZXJ2ZWQ6CiAgICAgIGNwdTogMjAwbQogICAgICBlcGhlbWVyYWwtc3RvcmFnZTogMUdpCiAgICAgIG1lbW9yeTogMjAwTWkKICAgIHZvbHVtZVBsdWdpbkRpcjogL3Zhci9saWIva3ViZWxldC92b2x1bWVwbHVnaW5zCiAgICAKCi0gcGF0aDogJy9ldGMvc3lzdGVtZC9zeXN0ZW0va3ViZWxldC1oZWFsdGhjaGVjay5zZXJ2aWNlJwogIHBlcm1pc3Npb25zOiAnMDY0NCcKICBjb250ZW50OiB8LQogICAgW1VuaXRdCiAgICBSZXF1aXJlcz1rdWJlbGV0LnNlcnZpY2UKICAgIEFmdGVyPWt1YmVsZXQuc2VydmljZQogICAgCiAgICBbU2VydmljZV0KICAgIEV4ZWNTdGFydD0vb3B0L2Jpbi9oZWFsdGgtbW9uaXRvci5zaCBrdWJlbGV0CiAgICAKICAgIFtJbnN0YWxsXQogICAgV2FudGVkQnk9bXVsdGktdXNlci50YXJnZXQKICAgIAoKLSBwYXRoOiAnL2V0Yy9jb250YWluZXJkL2NvbmZpZy50b21sJwogIHBlcm1pc3Npb25zOiAnMDY0NCcKICBjb250ZW50OiB8LQogICAgdmVyc2lvbiA9IDIKICAgIAogICAgW21ldHJpY3NdCiAgICBhZGRyZXNzID0gIjEyNy4wLjAuMToxMzM4IgogICAgCiAgICBbcGx1Z2luc10KICAgIFtwbHVnaW5zLiJpby5jb250YWluZXJkLmdycGMudjEuY3JpIl0KICAgIFtwbHVnaW5zLiJpby5jb250YWluZXJkLmdycGMudjEuY3JpIi5jb250YWluZXJkXQogICAgW3BsdWdpbnMuImlvLmNvbnRhaW5lcmQuZ3JwYy52MS5jcmkiLmNvbnRhaW5lcmQucnVudGltZXNdCiAgICBbcGx1Z2lucy4iaW8uY29udGFpbmVyZC5ncnBjLnYxLmNyaSIuY29udGFpbmVyZC5ydW50aW1lcy5ydW5jXQogICAgcnVudGltZV90eXBlID0gImlvLmNvbnRhaW5lcmQucnVuYy52MiIKICAgIFtwbHVnaW5zLiJpby5jb250YWluZXJkLmdycGMudjEuY3JpIi5jb250YWluZXJkLnJ1bnRpbWVzLnJ1bmMub3B0aW9uc10KICAgIFN5c3RlbWRDZ3JvdXAgPSB0cnVlCiAgICBbcGx1Z2lucy4iaW8uY29udGFpbmVyZC5ncnBjLnYxLmNyaSIucmVnaXN0cnldCiAgICBbcGx1Z2lucy4iaW8uY29udGFpbmVyZC5ncnBjLnYxLmNyaSIucmVnaXN0cnkubWlycm9yc10KICAgIFtwbHVnaW5zLiJpby5jb250YWluZXJkLmdycGMudjEuY3JpIi5yZWdpc3RyeS5taXJyb3JzLiJkb2NrZXIuaW8iXQogICAgZW5kcG9pbnQgPSBbImh0dHBzOi8vcmVnaXN0cnktMS5kb2NrZXIuaW8iXQogICAgCgpydW5jbWQ6Ci0gc3lzdGVtY3RsIHJlc3RhcnQga3ViZWxldC5zZXJ2aWNlCi0gc3lzdGVtY3RsIHJlc3RhcnQgc2V0dXAuc2VydmljZQotIHN5c3RlbWN0bCByZXN0YXJ0IGt1YmVsZXQtaGVhbHRoY2hlY2suc2VydmljZQotIHN5c3RlbWN0bCBkYWVtb24tcmVsb2FkCg==
kind: Secret
metadata:
  creationTimestamp: null
  name: ubuntu-20.04-aws-osc-provisioning
  namespace: cloud-init-settings
  resourceVersion: "1"
