apiVersion: v1
data:
  cloud-config: #cloud-config
ssh_pwauth: false
ssh_authorized_keys:
- 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDdOIhYmzCK5DSVLu3c'
write_files:
- path: '/opt/bin/health-monitor.sh'
  permissions: '0755'
  encoding: 'b64'
  content: |-
    IyEvdXNyL2Jpbi9lbnYgYmFzaAoKIyBDb3B5cmlnaHQgMjAxNiBUaGUgS3ViZXJuZXRlcyBBdXRob3JzLgojCiMgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiMgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgojIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAojCiMgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAojCiMgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQojIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiMgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiMgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAojIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoKIyBUaGlzIHNjcmlwdCBpcyBmb3IgbWFzdGVyIGFuZCBub2RlIGluc3RhbmNlIGhlYWx0aCBtb25pdG9yaW5nLCB3aGljaCBpcwojIHBhY2tlZCBpbiBrdWJlLW1hbmlmZXN0IHRhcmJhbGwuIEl0IGlzIGV4ZWN1dGVkIHRocm91Z2ggYSBzeXN0ZW1kIHNlcnZpY2UKIyBpbiBjbHVzdGVyL2djZS9nY2kvPG1hc3Rlci9ub2RlPi55YW1sLiBUaGUgZW52IHZhcmlhYmxlcyBjb21lIGZyb20gYW4gZW52CiMgZmlsZSBwcm92aWRlZCBieSB0aGUgc3lzdGVtZCBzZXJ2aWNlLgoKIyBUaGlzIHNjcmlwdCBpcyBhIHNsaWdodGx5IGFkanVzdGVkIHZlcnNpb24gb2YKIyBodHRwczovL2dpdGh1Yi5jb20va3ViZXJuZXRlcy9rdWJlcm5ldGVzL2Jsb2IvZTFhMWFhMjExMjI0ZmNkOWIyMTM0MjBiODBiMmFlNjgwNjY5NjgzZC9jbHVzdGVyL2djZS9nY2kvaGVhbHRoLW1vbml0b3Iuc2gKIyBBZGp1c3RtZW50cyBhcmU6CiMgKiBLdWJlbGV0IGhlYWx0aCBwb3J0IGlzIDEwMjQ4IG5vdCAxMDI1NQojICogUmVtb3ZhbCBvZiBhbGwgYWxsIHJlZmVyZW5jZXMgdG8gdGhlIEtVQkVfRU5WIGZpbGUKCnNldCAtbyBub3Vuc2V0CnNldCAtbyBwaXBlZmFpbAoKIyBXZSBzaW1wbHkga2lsbCB0aGUgcHJvY2VzcyB3aGVuIHRoZXJlIGlzIGEgZmFpbHVyZS4gQW5vdGhlciBzeXN0ZW1kIHNlcnZpY2Ugd2lsbAojIGF1dG9tYXRpY2FsbHkgcmVzdGFydCB0aGUgcHJvY2Vzcy4KZnVuY3Rpb24gY29udGFpbmVyX3J1bnRpbWVfbW9uaXRvcmluZygpIHsKICBsb2NhbCAtciBtYXhfYXR0ZW1wdHM9NQogIGxvY2FsIGF0dGVtcHQ9MQogIGxvY2FsIC1yIGNvbnRhaW5lcl9ydW50aW1lX25hbWU9IiR7Q09OVEFJTkVSX1JVTlRJTUVfTkFNRTotZG9ja2VyfSIKICAjIFdlIHN0aWxsIG5lZWQgdG8gdXNlICdkb2NrZXIgcHMnIHdoZW4gY29udGFpbmVyIHJ1bnRpbWUgaXMgImRvY2tlciIuIFRoaXMgaXMgYmVjYXVzZQogICMgZG9ja2Vyc2hpbSBpcyBzdGlsbCBwYXJ0IG9mIGt1YmVsZXQgdG9kYXkuIFdoZW4ga3ViZWxldCBpcyBkb3duLCBjcmljdGwgcG9kcwogICMgd2lsbCBhbHNvIGZhaWwsIGFuZCBkb2NrZXIgd2lsbCBiZSBraWxsZWQuIFRoaXMgaXMgdW5kZXNpcmFibGUgZXNwZWNpYWxseSB3aGVuCiAgIyBkb2NrZXIgbGl2ZSByZXN0b3JlIGlzIGRpc2FibGVkLgogIGxvY2FsIGhlYWx0aGNoZWNrX2NvbW1hbmQ9ImRvY2tlciBwcyIKICBpZiBbWyAiJHtDT05UQUlORVJfUlVOVElNRTotZG9ja2VyfSIgIT0gImRvY2tlciIgXV07IHRoZW4KICAgIGhlYWx0aGNoZWNrX2NvbW1hbmQ9ImNyaWN0bCBwb2RzIgogIGZpCiAgIyBDb250YWluZXIgcnVudGltZSBzdGFydHVwIHRha2VzIHRpbWUuIE1ha2UgaW5pdGlhbCBhdHRlbXB0cyBiZWZvcmUgc3RhcnRpbmcKICAjIGtpbGxpbmcgdGhlIGNvbnRhaW5lciBydW50aW1lLgogIHVudGlsIHRpbWVvdXQgNjAgJHtoZWFsdGhjaGVja19jb21tYW5kfSA+IC9kZXYvbnVsbDsgZG8KICAgIGlmICgoYXR0ZW1wdCA9PSBtYXhfYXR0ZW1wdHMpKTsgdGhlbgogICAgICBlY2hvICJNYXggYXR0ZW1wdCAke21heF9hdHRlbXB0c30gcmVhY2hlZCEgUHJvY2VlZGluZyB0byBtb25pdG9yIGNvbnRhaW5lciBydW50aW1lIGhlYWx0aGluZXNzLiIKICAgICAgYnJlYWsKICAgIGZpCiAgICBlY2hvICIkYXR0ZW1wdCBpbml0aWFsIGF0dGVtcHQgXCIke2hlYWx0aGNoZWNrX2NvbW1hbmR9XCIhIFRyeWluZyBhZ2FpbiBpbiAkYXR0ZW1wdCBzZWNvbmRzLi4uIgogICAgc2xlZXAgIiQoKDIgKiogYXR0ZW1wdCsrKSkiCiAgZG9uZQogIHdoaWxlIHRydWU7IGRvCiAgICBpZiAhIHRpbWVvdXQgNjAgJHtoZWFsdGhjaGVja19jb21tYW5kfSA+IC9kZXYvbnVsbDsgdGhlbgogICAgICBlY2hvICJDb250YWluZXIgcnVudGltZSAke2NvbnRhaW5lcl9ydW50aW1lX25hbWV9IGZhaWxlZCEiCiAgICAgIGlmIFtbICIkY29udGFpbmVyX3J1bnRpbWVfbmFtZSIgPT0gImRvY2tlciIgXV07IHRoZW4KICAgICAgICAjIER1bXAgc3RhY2sgb2YgZG9ja2VyIGRhZW1vbiBmb3IgaW52ZXN0aWdhdGlvbi4KICAgICAgICAjIExvZyBmaWxlIG5hbWUgbG9va3MgbGlrZSBnb3JvdXRpbmUtc3RhY2tzLVRJTUVTVEFNUCBhbmQgd2lsbCBiZSBzYXZlZCB0bwogICAgICAgICMgdGhlIGV4ZWMgcm9vdCBkaXJlY3RvcnksIHdoaWNoIGlzIC92YXIvcnVuL2RvY2tlci8gb24gVWJ1bnR1IGFuZCBDT1MuCiAgICAgICAgcGtpbGwgLVNJR1VTUjEgZG9ja2VyZAogICAgICBmaQogICAgICBzeXN0ZW1jdGwga2lsbCAtLWtpbGwtd2hvPW1haW4gIiR7Y29udGFpbmVyX3J1bnRpbWVfbmFtZX0iCiAgICAgICMgV2FpdCBmb3IgYSB3aGlsZSwgYXMgd2UgZG9uJ3Qgd2FudCB0byBraWxsIGl0IGFnYWluIGJlZm9yZSBpdCBpcyByZWFsbHkgdXAuCiAgICAgIHNsZWVwIDEyMAogICAgZWxzZQogICAgICBzbGVlcCAiJHtTTEVFUF9TRUNPTkRTfSIKICAgIGZpCiAgZG9uZQp9CgpmdW5jdGlvbiBrdWJlbGV0X21vbml0b3JpbmcoKSB7CiAgZWNobyAiV2FpdCBmb3IgMiBtaW51dGVzIGZvciBrdWJlbGV0IHRvIGJlIGZ1bmN0aW9uYWwiCiAgc2xlZXAgMTIwCiAgbG9jYWwgLXIgbWF4X3NlY29uZHM9MTAKICBsb2NhbCBvdXRwdXQ9IiIKICB3aGlsZSB0cnVlOyBkbwogICAgbG9jYWwgZmFpbGVkPWZhbHNlCgogICAgaWYgam91cm5hbGN0bCAtdSBrdWJlbGV0IC1uIDEgfCBncmVwIC1xICJ1c2Ugb2YgY2xvc2VkIG5ldHdvcmsgY29ubmVjdGlvbiI7IHRoZW4KICAgICAgZmFpbGVkPXRydWUKICAgICAgZWNobyAiS3ViZWxldCBzdG9wcGVkIHBvc3Rpbmcgbm9kZSBzdGF0dXMuIFJlc3RhcnRpbmciCiAgICBlbGlmICEgb3V0cHV0PSQoY3VybCAtbSAiJHttYXhfc2Vjb25kc30iIC1mIC1zIC1TIGh0dHA6Ly8xMjcuMC4wLjE6MTAyNDgvaGVhbHRoeiAyPiYxKTsgdGhlbgogICAgICBmYWlsZWQ9dHJ1ZQogICAgICAjIFByaW50IHRoZSByZXNwb25zZSBhbmQvb3IgZXJyb3JzLgogICAgICBlY2hvICIkb3V0cHV0IgogICAgZmkKCiAgICBpZiBbWyAiJGZhaWxlZCIgPT0gInRydWUiIF1dOyB0aGVuCiAgICAgIGVjaG8gIkt1YmVsZXQgaXMgdW5oZWFsdGh5ISIKICAgICAgc3lzdGVtY3RsIGtpbGwga3ViZWxldAogICAgICAjIFdhaXQgZm9yIGEgd2hpbGUsIGFzIHdlIGRvbid0IHdhbnQgdG8ga2lsbCBpdCBhZ2FpbiBiZWZvcmUgaXQgaXMgcmVhbGx5IHVwLgogICAgICBzbGVlcCA2MAogICAgZWxzZQogICAgICBzbGVlcCAiJHtTTEVFUF9TRUNPTkRTfSIKICAgIGZpCiAgZG9uZQp9CgojIyMjIyMjIyMjIyMjIyBNYWluIEZ1bmN0aW9uICMjIyMjIyMjIyMjIyMjIyMKaWYgW1sgIiQjIiAtbmUgMSBdXTsgdGhlbgogIGVjaG8gIlVzYWdlOiBoZWFsdGgtbW9uaXRvci5zaCA8Y29udGFpbmVyLXJ1bnRpbWUva3ViZWxldD4iCiAgZXhpdCAxCmZpCgpTTEVFUF9TRUNPTkRTPTEwCmNvbXBvbmVudD0kMQplY2hvICJTdGFydCBrdWJlcm5ldGVzIGhlYWx0aCBtb25pdG9yaW5nIGZvciAke2NvbXBvbmVudH0iCmlmIFtbICIke2NvbXBvbmVudH0iID09ICJjb250YWluZXItcnVudGltZSIgXV07IHRoZW4KICBjb250YWluZXJfcnVudGltZV9tb25pdG9yaW5nCmVsaWYgW1sgIiR7Y29tcG9uZW50fSIgPT0gImt1YmVsZXQiIF1dOyB0aGVuCiAga3ViZWxldF9tb25pdG9yaW5nCmVsc2UKICBlY2hvICJIZWFsdGggbW9uaXRvcmluZyBmb3IgY29tcG9uZW50ICR7Y29tcG9uZW50fSBpcyBub3Qgc3VwcG9ydGVkISIKZmkK

- path: '/etc/systemd/journald.conf.d/max_disk_use.conf'
  permissions: '0644'
  encoding: 'b64'
  content: |-
    W0pvdXJuYWxdClN5c3RlbU1heFVzZT01Rwo=

- path: '/opt/load-kernel-modules.sh'
  permissions: '0755'
  encoding: 'b64'
  content: |-
    IyEvdXNyL2Jpbi9lbnYgYmFzaApzZXQgLWV1byBwaXBlZmFpbAoKbW9kcHJvYmUgaXBfdnMKbW9kcHJvYmUgaXBfdnNfcnIKbW9kcHJvYmUgaXBfdnNfd3JyCm1vZHByb2JlIGlwX3ZzX3NoCgppZiBtb2RpbmZvIG5mX2Nvbm50cmFja19pcHY0ICY+IC9kZXYvbnVsbDsgdGhlbgogIG1vZHByb2JlIG5mX2Nvbm50cmFja19pcHY0CmVsc2UKICBtb2Rwcm9iZSBuZl9jb25udHJhY2sKZmkK

- path: '/etc/sysctl.d/k8s.conf'
  permissions: '0644'
  encoding: 'b64'
  content: |-
    bmV0LmJyaWRnZS5icmlkZ2UtbmYtY2FsbC1pcDZ0YWJsZXMgPSAxCm5ldC5icmlkZ2UuYnJpZGdlLW5mLWNhbGwtaXB0YWJsZXMgPSAxCmtlcm5lbC5wYW5pY19vbl9vb3BzID0gMQprZXJuZWwucGFuaWMgPSAxMApuZXQuaXB2NC5pcF9mb3J3YXJkID0gMQp2bS5vdmVyY29tbWl0X21lbW9yeSA9IDEKZnMuaW5vdGlmeS5tYXhfdXNlcl93YXRjaGVzID0gMTA0ODU3Ngpmcy5pbm90aWZ5Lm1heF91c2VyX2luc3RhbmNlcyA9IDgxOTIK

- path: '/etc/default/grub.d/60-swap-accounting.cfg'
  permissions: '0644'
  encoding: 'b64'
  content: |-
    IyBBZGRlZCBieSBrdWJlcm1hdGljIG1hY2hpbmUtY29udHJvbGxlcgojIEVuYWJsZSBjZ3JvdXBzIG1lbW9yeSBhbmQgc3dhcCBhY2NvdW50aW5nCkdSVUJfQ01ETElORV9MSU5VWD0iY2dyb3VwX2VuYWJsZT1tZW1vcnkgc3dhcGFjY291bnQ9MSIK

- path: '/opt/bin/setup'
  permissions: '0755'
  encoding: 'b64'
  content: |-
    IyEvYmluL2Jhc2gKc2V0IC14ZXVvIHBpcGVmYWlsCmlmIHN5c3RlbWN0bCBpcy1hY3RpdmUgdWZ3OyB0aGVuIHN5c3RlbWN0bCBzdG9wIHVmdzsgZmkKc3lzdGVtY3RsIG1hc2sgdWZ3CnN5c3RlbWN0bCByZXN0YXJ0IHN5c3RlbWQtbW9kdWxlcy1sb2FkLnNlcnZpY2UKc3lzY3RsIC0tc3lzdGVtCgphcHQtZ2V0IHVwZGF0ZQoKREVCSUFOX0ZST05URU5EPW5vbmludGVyYWN0aXZlIGFwdC1nZXQgLW8gRHBrZzo6T3B0aW9uczo6PSItLWZvcmNlLWNvbmZkZWYiIC1vIERwa2c6Ok9wdGlvbnM6Oj0iLS1mb3JjZS1jb25mb2xkIiBpbnN0YWxsIC15IFwKICBjdXJsIFwKICBjYS1jZXJ0aWZpY2F0ZXMgXAogIGNlcGgtY29tbW9uIFwKICBjaWZzLXV0aWxzIFwKICBjb25udHJhY2sgXAogIGUyZnNwcm9ncyBcCiAgZWJ0YWJsZXMgXAogIGV0aHRvb2wgXAogIGdsdXN0ZXJmcy1jbGllbnQgXAogIGlwdGFibGVzIFwKICBqcSBcCiAga21vZCBcCiAgb3BlbnNzaC1jbGllbnQgXAogIG5mcy1jb21tb24gXAogIHNvY2F0IFwKICB1dGlsLWxpbnV4IFwKICBpcHZzYWRtCmFwdC1nZXQgdXBkYXRlCmFwdC1nZXQgaW5zdGFsbCAteSBhcHQtdHJhbnNwb3J0LWh0dHBzIGNhLWNlcnRpZmljYXRlcyBjdXJsIHNvZnR3YXJlLXByb3BlcnRpZXMtY29tbW9uIGxzYi1yZWxlYXNlCmN1cmwgLWZzU0wgaHR0cHM6Ly9kb3dubG9hZC5kb2NrZXIuY29tL2xpbnV4L3VidW50dS9ncGcgfCBhcHQta2V5IGFkZCAtCmFkZC1hcHQtcmVwb3NpdG9yeSAiZGViIGh0dHBzOi8vZG93bmxvYWQuZG9ja2VyLmNvbS9saW51eC91YnVudHUgJChsc2JfcmVsZWFzZSAtY3MpIHN0YWJsZSIKCmFwdC1nZXQgaW5zdGFsbCAtLWFsbG93LWRvd25ncmFkZXMgLXkgXAogICAgY29udGFpbmVyZC5pbz0xLjUqIFwKICAgIGRvY2tlci1jZS1jbGk9NToyMC4xMCogXAogICAgZG9ja2VyLWNlPTU6MjAuMTAqCmFwdC1tYXJrIGhvbGQgZG9ja2VyLWNlKiBjb250YWluZXJkLmlvCgpzeXN0ZW1jdGwgZGFlbW9uLXJlbG9hZApzeXN0ZW1jdGwgZW5hYmxlIC0tbm93IGRvY2tlcgoKb3B0X2Jpbj0vb3B0L2Jpbgp1c3JfbG9jYWxfYmluPS91c3IvbG9jYWwvYmluCmNuaV9iaW5fZGlyPS9vcHQvY25pL2Jpbgpta2RpciAtcCAvZXRjL2NuaS9uZXQuZCAvZXRjL2t1YmVybmV0ZXMvbWFuaWZlc3RzICIkb3B0X2JpbiIgIiRjbmlfYmluX2RpciIKbWtkaXIgLXAgL2V0Yy9rdWJlcm5ldGVzL2R5bmFtaWMtY29uZmlnLWRpcgphcmNoPSR7SE9TVF9BUkNILX0KaWYgWyAteiAiJGFyY2giIF0KdGhlbgpjYXNlICQodW5hbWUgLW0pIGluCng4Nl82NCkKICAgIGFyY2g9ImFtZDY0IgogICAgOzsKYWFyY2g2NCkKICAgIGFyY2g9ImFybTY0IgogICAgOzsKKikKICAgIGVjaG8gInVuc3VwcG9ydGVkIENQVSBhcmNoaXRlY3R1cmUsIGV4aXRpbmciCiAgICBleGl0IDEKICAgIDs7CmVzYWMKZmkKQ05JX1ZFUlNJT049IiR7Q05JX1ZFUlNJT046LXYwLjguN30iCmNuaV9iYXNlX3VybD0iaHR0cHM6Ly9naXRodWIuY29tL2NvbnRhaW5lcm5ldHdvcmtpbmcvcGx1Z2lucy9yZWxlYXNlcy9kb3dubG9hZC8kQ05JX1ZFUlNJT04iCmNuaV9maWxlbmFtZT0iY25pLXBsdWdpbnMtbGludXgtJGFyY2gtJENOSV9WRVJTSU9OLnRneiIKY3VybCAtTGZvICIkY25pX2Jpbl9kaXIvJGNuaV9maWxlbmFtZSIgIiRjbmlfYmFzZV91cmwvJGNuaV9maWxlbmFtZSIKY25pX3N1bT0kKGN1cmwgLUxmICIkY25pX2Jhc2VfdXJsLyRjbmlfZmlsZW5hbWUuc2hhMjU2IikKY2QgIiRjbmlfYmluX2RpciIKc2hhMjU2c3VtIC1jIDw8PCIkY25pX3N1bSIKdGFyIHh2ZiAiJGNuaV9maWxlbmFtZSIKcm0gLWYgIiRjbmlfZmlsZW5hbWUiCmNkIC0KQ1JJX1RPT0xTX1JFTEVBU0U9IiR7Q1JJX1RPT0xTX1JFTEVBU0U6LXYxLjIyLjB9IgpjcmlfdG9vbHNfYmFzZV91cmw9Imh0dHBzOi8vZ2l0aHViLmNvbS9rdWJlcm5ldGVzLXNpZ3MvY3JpLXRvb2xzL3JlbGVhc2VzL2Rvd25sb2FkLyR7Q1JJX1RPT0xTX1JFTEVBU0V9IgpjcmlfdG9vbHNfZmlsZW5hbWU9ImNyaWN0bC0ke0NSSV9UT09MU19SRUxFQVNFfS1saW51eC0ke2FyY2h9LnRhci5neiIKY3VybCAtTGZvICIkb3B0X2Jpbi8kY3JpX3Rvb2xzX2ZpbGVuYW1lIiAiJGNyaV90b29sc19iYXNlX3VybC8kY3JpX3Rvb2xzX2ZpbGVuYW1lIgpjcmlfdG9vbHNfc3VtPSQoY3VybCAtTGYgIiRjcmlfdG9vbHNfYmFzZV91cmwvJGNyaV90b29sc19maWxlbmFtZS5zaGEyNTYiIHwgc2VkICdzL1wqXC8vLycpCmNkICIkb3B0X2JpbiIKc2hhMjU2c3VtIC1jIDw8PCIkY3JpX3Rvb2xzX3N1bSIKdGFyIHh2ZiAiJGNyaV90b29sc19maWxlbmFtZSIKcm0gLWYgIiRjcmlfdG9vbHNfZmlsZW5hbWUiCmxuIC1zZiAiJG9wdF9iaW4vY3JpY3RsIiAiJHVzcl9sb2NhbF9iaW4iL2NyaWN0bCB8fCBlY2hvICJzeW1ib2xpYyBsaW5rIGlzIHNraXBwZWQiCmNkIC0KS1VCRV9WRVJTSU9OPSIke0tVQkVfVkVSU0lPTjotdjEuMjIuMn0iCmt1YmVfZGlyPSIkb3B0X2Jpbi9rdWJlcm5ldGVzLSRLVUJFX1ZFUlNJT04iCmt1YmVfYmFzZV91cmw9Imh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9rdWJlcm5ldGVzLXJlbGVhc2UvcmVsZWFzZS8kS1VCRV9WRVJTSU9OL2Jpbi9saW51eC8kYXJjaCIKa3ViZV9zdW1fZmlsZT0iJGt1YmVfZGlyL3NoYTI1NiIKbWtkaXIgLXAgIiRrdWJlX2RpciIKOiA+IiRrdWJlX3N1bV9maWxlIgoKZm9yIGJpbiBpbiBrdWJlbGV0IGt1YmVhZG0ga3ViZWN0bDsgZG8KICAgIGN1cmwgLUxmbyAiJGt1YmVfZGlyLyRiaW4iICIka3ViZV9iYXNlX3VybC8kYmluIgogICAgY2htb2QgK3ggIiRrdWJlX2Rpci8kYmluIgogICAgc3VtPSQoY3VybCAtTGYgIiRrdWJlX2Jhc2VfdXJsLyRiaW4uc2hhMjU2IikKICAgIGVjaG8gIiRzdW0gICRrdWJlX2Rpci8kYmluIiA+PiIka3ViZV9zdW1fZmlsZSIKZG9uZQpzaGEyNTZzdW0gLWMgIiRrdWJlX3N1bV9maWxlIgoKZm9yIGJpbiBpbiBrdWJlbGV0IGt1YmVhZG0ga3ViZWN0bDsgZG8KICAgIGxuIC1zZiAiJGt1YmVfZGlyLyRiaW4iICIkb3B0X2JpbiIvJGJpbgpkb25lCgojIHNldCBrdWJlbGV0IG5vZGVpcCBlbnZpcm9ubWVudCB2YXJpYWJsZQovb3B0L2Jpbi9zZXR1cF9uZXRfZW52LnNoCgpzeXN0ZW1jdGwgZW5hYmxlIC0tbm93IGt1YmVsZXQKc3lzdGVtY3RsIGVuYWJsZSAtLW5vdyAtLW5vLWJsb2NrIGt1YmVsZXQtaGVhbHRoY2hlY2suc2VydmljZQpzeXN0ZW1jdGwgZGlzYWJsZSBzZXR1cC5zZXJ2aWNlCg==

- path: '/opt/bin/supervise.sh'
  permissions: '0755'
  encoding: 'b64'
  content: |-
    IyEvYmluL2Jhc2gKc2V0IC14ZXVvIHBpcGVmYWlsCndoaWxlICEgIiRAIjsgZG8KICBzbGVlcCAxCmRvbmUK

- path: '/etc/systemd/system/kubelet.service'
  permissions: '0644'
  encoding: 'b64'
  content: |-
    W1VuaXRdCkFmdGVyPWRvY2tlci5zZXJ2aWNlClJlcXVpcmVzPWRvY2tlci5zZXJ2aWNlCgpEZXNjcmlwdGlvbj1rdWJlbGV0OiBUaGUgS3ViZXJuZXRlcyBOb2RlIEFnZW50CkRvY3VtZW50YXRpb249aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvaG9tZS8KCltTZXJ2aWNlXQpVc2VyPXJvb3QKUmVzdGFydD1hbHdheXMKU3RhcnRMaW1pdEludGVydmFsPTAKUmVzdGFydFNlYz0xMApDUFVBY2NvdW50aW5nPXRydWUKTWVtb3J5QWNjb3VudGluZz10cnVlCgpFbnZpcm9ubWVudD0iUEFUSD0vb3B0L2JpbjovYmluOi91c3IvbG9jYWwvc2JpbjovdXNyL2xvY2FsL2JpbjovdXNyL3NiaW46L3Vzci9iaW46L3NiaW4vIgpFbnZpcm9ubWVudEZpbGU9LS9ldGMvZW52aXJvbm1lbnQKCkV4ZWNTdGFydFByZT0vYmluL2Jhc2ggL29wdC9kaXNhYmxlLXN3YXAuc2gKRXhlY1N0YXJ0UHJlPS9iaW4vYmFzaCAvb3B0L2xvYWQta2VybmVsLW1vZHVsZXMuc2gKRXhlY1N0YXJ0UHJlPS9iaW4vYmFzaCAvb3B0L2Jpbi9zZXR1cF9uZXRfZW52LnNoCkV4ZWNTdGFydD0vb3B0L2Jpbi9rdWJlbGV0ICRLVUJFTEVUX0VYVFJBX0FSR1MgXAogIC0tYm9vdHN0cmFwLWt1YmVjb25maWc9L2V0Yy9rdWJlcm5ldGVzL2Jvb3RzdHJhcC1rdWJlbGV0LmNvbmYgXAogIC0ta3ViZWNvbmZpZz0vdmFyL2xpYi9rdWJlbGV0L2t1YmVjb25maWcgXAogIC0tY29uZmlnPS9ldGMva3ViZXJuZXRlcy9rdWJlbGV0LmNvbmYgXAogIC0tbmV0d29yay1wbHVnaW49Y25pIFwKICAtLWNlcnQtZGlyPS9ldGMva3ViZXJuZXRlcy9wa2kgXAogIC0tY2xvdWQtcHJvdmlkZXI9YXdzIFwKICAtLWNsb3VkLWNvbmZpZz0vZXRjL2t1YmVybmV0ZXMvY2xvdWQtY29uZmlnIFwKICAtLWR5bmFtaWMtY29uZmlnLWRpcj0vZXRjL2t1YmVybmV0ZXMvZHluYW1pYy1jb25maWctZGlyIFwKICAtLWZlYXR1cmUtZ2F0ZXM9RHluYW1pY0t1YmVsZXRDb25maWc9dHJ1ZSBcCiAgLS1leGl0LW9uLWxvY2stY29udGVudGlvbiBcCiAgLS1sb2NrLWZpbGU9L3RtcC9rdWJlbGV0LmxvY2sgXAogIC0tY29udGFpbmVyLXJ1bnRpbWU9ZG9ja2VyIFwKICAtLWNvbnRhaW5lci1ydW50aW1lLWVuZHBvaW50PXVuaXg6Ly8vdmFyL3J1bi9kb2NrZXJzaGltLnNvY2sgXAogIC0tbm9kZS1pcCAke0tVQkVMRVRfTk9ERV9JUH0KCltJbnN0YWxsXQpXYW50ZWRCeT1tdWx0aS11c2VyLnRhcmdldAo=

- path: '/etc/systemd/system/kubelet.service.d/extras.conf'
  permissions: '0644'
  encoding: 'b64'
  content: |-
    W1NlcnZpY2VdCkVudmlyb25tZW50PSJLVUJFTEVUX0VYVFJBX0FSR1M9LS1yZXNvbHYtY29uZj0vcnVuL3N5c3RlbWQvcmVzb2x2ZS9yZXNvbHYuY29uZiIK

- path: '/etc/kubernetes/cloud-config'
  permissions: '0600'
  encoding: 'b64'
  content: |-
    W2dsb2JhbF0KWm9uZT0iZXUtY2VudHJhbC0xYiIKVlBDPSJlLTEyM2YiClN1Ym5ldElEPSJ0ZXN0LXN1Ym5ldCIKCg==

- path: '/opt/bin/setup_net_env.sh'
  permissions: '0755'
  encoding: 'b64'
  content: |-
    IyEvdXNyL2Jpbi9lbnYgYmFzaAplY2hvZGF0ZSgpIHsKICBlY2hvICJbJChkYXRlIC1JcyldIiAiJEAiCn0KCiMgZ2V0IHRoZSBkZWZhdWx0IGludGVyZmFjZSBJUCBhZGRyZXNzCkRFRkFVTFRfSUZDX0lQPSQoaXAgLW8gIHJvdXRlIGdldCAxIHwgZ3JlcCAtb1AgInNyYyBcS1xTKyIpCgppZiBbIC16ICIke0RFRkFVTFRfSUZDX0lQfSIgXQp0aGVuCiAgZWNob2RhdGUgIkZhaWxlZCB0byBnZXQgSVAgYWRkcmVzcyBmb3IgdGhlIGRlZmF1bHQgcm91dGUgaW50ZXJmYWNlIgogIGV4aXQgMQpmaQoKIyBnZXQgdGhlIGZ1bGwgaG9zdG5hbWUKRlVMTF9IT1NUTkFNRT0kKGhvc3RuYW1lIC1mKQojIGlmIC9ldGMvaG9zdG5hbWUgaXMgbm90IGVtcHR5IHRoZW4gdXNlIHRoZSBob3N0bmFtZSBmcm9tIHRoZXJlCmlmIFsgLXMgL2V0Yy9ob3N0bmFtZSBdOyB0aGVuCiAgRlVMTF9IT1NUTkFNRT0kKGNhdCAvZXRjL2hvc3RuYW1lKQpmaQoKIyB3cml0ZSB0aGUgbm9kZWlwX2VudiBmaWxlCiMgd2UgbmVlZCB0aGUgbGluZSBiZWxvdyBiZWNhdXNlIGZsYXRjYXIgaGFzIHRoZSBzYW1lIHN0cmluZyAiY29yZW9zIiBpbiB0aGF0IGZpbGUKaWYgZ3JlcCAtcSBjb3Jlb3MgL2V0Yy9vcy1yZWxlYXNlCnRoZW4KICBlY2hvICJLVUJFTEVUX05PREVfSVA9JHtERUZBVUxUX0lGQ19JUH1cbktVQkVMRVRfSE9TVE5BTUU9JHtGVUxMX0hPU1ROQU1FfSIgPiAvZXRjL2t1YmVybmV0ZXMvbm9kZWlwLmNvbmYKZWxpZiBbICEgLWQgL2V0Yy9zeXN0ZW1kL3N5c3RlbS9rdWJlbGV0LnNlcnZpY2UuZCBdCnRoZW4KICBlY2hvZGF0ZSAiQ2FuJ3QgZmluZCBrdWJlbGV0IHNlcnZpY2UgZXh0cmFzIGRpcmVjdG9yeSIKICBleGl0IDEKZWxzZQogIGVjaG8gLWUgIltTZXJ2aWNlXVxuRW52aXJvbm1lbnQ9XCJLVUJFTEVUX05PREVfSVA9JHtERUZBVUxUX0lGQ19JUH1cIlxuRW52aXJvbm1lbnQ9XCJLVUJFTEVUX0hPU1ROQU1FPSR7RlVMTF9IT1NUTkFNRX1cIiIgPiAvZXRjL3N5c3RlbWQvc3lzdGVtL2t1YmVsZXQuc2VydmljZS5kL25vZGVpcC5jb25mCmZpCg==

- path: '/etc/kubernetes/pki/ca.crt'
  permissions: '0644'
  encoding: 'b64'
  content: |-
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVXakNDQTBLZ0F3SUJBZ0lKQUxmUmxXc0k4WVFITUEwR0NTcUdTSWIzRFFFQkJRVUFNSHN4Q3pBSkJnTlYKQkFZVEFsVlRNUXN3Q1FZRFZRUUlFd0pEUVRFV01CUUdBMVVFQnhNTlUyRnVJRVp5WVc1amFYTmpiekVVTUJJRwpBMVVFQ2hNTFFuSmhaR1pwZEhwcGJtTXhFakFRQmdOVkJBTVRDV3h2WTJGc2FHOXpkREVkTUJzR0NTcUdTSWIzCkRRRUpBUllPWW5KaFpFQmtZVzVuWVM1amIyMHdIaGNOTVRRd056RTFNakEwTmpBMVdoY05NVGN3TlRBME1qQTAKTmpBMVdqQjdNUXN3Q1FZRFZRUUdFd0pWVXpFTE1Ba0dBMVVFQ0JNQ1EwRXhGakFVQmdOVkJBY1REVk5oYmlCRwpjbUZ1WTJselkyOHhGREFTQmdOVkJBb1RDMEp5WVdSbWFYUjZhVzVqTVJJd0VBWURWUVFERXdsc2IyTmhiR2h2CmMzUXhIVEFiQmdrcWhraUc5dzBCQ1FFV0RtSnlZV1JBWkdGdVoyRXVZMjl0TUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdDVmQWpwNGZUY2VrV1VUZnpzcDBreWloMU9ZYnNHTDBLWDFlUmJTUwpSOE9kMCs5UTYySHlueStHRndNVGI0QS9LVThtc3NvSHZjY2VTQUFid2ZieEZLLytzNTFUb2JxVW5PUlpyT29UClpqa1V5Z2J5WERTSzk5WUJiY1IxUGlwOHZ3TVRtNFhLdUx0Q2lnZUJCZGpqQVFkZ1VPMjhMRU5HbHNNbm1lWWsKSmZPRFZHblZtcjVMdGI5QU5BOElLeVRmc25ISjRpT0NTL1BsUGJVajJxN1lub1ZMcG9zVUJNbGdVYi9DeWtYMwptT29MYjR5SkpReUEvaVNUNlp4aUlFajM2RDR5V1o1bGc3WUpsK1VpaUJRSEdDblBkR3lpcHFWMDZleDBoZVlXCmNhaVc4TFdaU1VROTNqUStXVkNIOGhUN0RRTzFkbXN2VW1YbHEvSmVBbHdRL1FJREFRQUJvNEhnTUlIZE1CMEcKQTFVZERnUVdCQlJjQVJPdGhTNFA0VTd2VGZqQnlDNTY5UjdFNkRDQnJRWURWUjBqQklHbE1JR2lnQlJjQVJPdApoUzRQNFU3dlRmakJ5QzU2OVI3RTZLRi9wSDB3ZXpFTE1Ba0dBMVVFQmhNQ1ZWTXhDekFKQmdOVkJBZ1RBa05CCk1SWXdGQVlEVlFRSEV3MVRZVzRnUm5KaGJtTnBjMk52TVJRd0VnWURWUVFLRXd0Q2NtRmtabWwwZW1sdVl6RVMKTUJBR0ExVUVBeE1KYkc5allXeG9iM04wTVIwd0d3WUpLb1pJaHZjTkFRa0JGZzVpY21Ga1FHUmhibWRoTG1OdgpiWUlKQUxmUmxXc0k4WVFITUF3R0ExVWRFd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVGQlFBRGdnRUJBRzZoClU5ZjlzTkgwLzZvQmJHR3kyRVZVMFVnSVRVUUlyRldvOXJGa3JXNWsvWGtEalFtKzNsempUMGlHUjRJeEUvQW8KZVU2c1FodWE3d3JXZUZFbjQ3R0w5OGxuQ3NKZEQ3b1pOaEZtUTk1VGIvTG5EVWpzNVlqOWJyUDBOV3pYZllVNApVSzJabklOSlJjSnBCOGlSQ2FDeEU4RGRjVUYwWHFJRXE2cEEyNzJzbm9MbWlYTE12Tmwza1lFZG0ramU2dm9ECjU4U05WRVVzenR6UXlYbUpFaENwd1ZJMEE2UUNqelhqK3F2cG13M1paSGk4SndYZWk4WlpCTFRTRkJraThaN24Kc0g5QkJIMzgvU3pVbUFONFFIU1B5MWdqcW0wME9BRThOYVlEa2gvYnpFNGQ3bUxHR01XcC9XRTNLUFN1ODJIRgprUGU2WG9TYmlMbS9reGszMlQwPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==

- path: '/etc/kubernetes/bootstrap-kubelet.conf'
  permissions: '0644'
  encoding: 'b64'
  content: |-
    YXBpVmVyc2lvbjogdjEKY2x1c3RlcnM6Ci0gY2x1c3RlcjoKICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VSSFJFTkRRV2REWjBGM1NVSkJaMGxDUVVSQlRrSm5hM0ZvYTJsSE9YY3dRa0ZSYzBaQlJFRTVUVlJ6ZDA5UldVUldVVkZFUlhwS2VXSXlPVEFLVEZkT2FFeHVVVE5qVjNSNFpVUldlR1JETld4a1dFcDJZMGRWZEdReVZucGtSRTEwV1hrMWExcFlXWFZoTTFacFdsaEtkRmxZVW5CWmVUVndZbnBCWlFwR2R6QjRUMFJCZVUxRVJYaE5lbFV5VFVSb1lVWjNNSGxQUkVGNFRYcEJlRTE2VlRKTlJHaGhUVVF3ZUU5NlFUVkNaMDVXUWtGTlZFMXVTblppTTFGMENsa3lSWFZrUkdSNFlUTkdORTVZUmpCTWJWWXhZMjA1ZDFwVE1UTmFXRTR3VFhreGFreHRVbXhrYVRWeVpGZEtiR050TVdoa1IyeHFURzFzZGsxSlNVSUtTV3BCVGtKbmEzRm9hMmxIT1hjd1FrRlJSVVpCUVU5RFFWRTRRVTFKU1VKRFowdERRVkZGUVhBMlNEWldOVFppV1VoMlEyVjZUR3R5WmtsNlRUZ3hZZ3BwYnpjdldtRjNMMHhMUlhjd1pVWXJURTEyTkVVckwxRXZaa1pvYzBoREsyMW9aVXhuTVVoWFZWQkdVRkpyTkZCUk9EVnRRUzgwZEdwcGJXcFRVRVpFQ21zMlUwbHRla3RHVEZsUlozZERaMmRwVnpoT01taFBLemw2Y2tKVlFVeEtSa2RDTmpSdlQyTmlRbW8yUlhJdkswNXNVRWRKTTFKU1YxZGthVVZVVjBZS1YxbEROR3BtU21waVJqVlFZbmw1V0VodWMwZG1kRk5PV1ZwQ1REY3hWemRvT1dwTVYzQjVWVmRMVERaYVdVRk9kMFJQVGpKU1luQTNkSEIxZHpCWU5ncHJheXN3UVZaM1ZucHJNekFyVFU1NmJXWTFNSEYzSzI4NE1UaGlaa3hWUkd0aFRrMW1URk0yU1RCM1VXMDNVa2RuSzAxblZsSkVlVE5EZFZseFprbFhDbGt5ZW5nMll6ZFFjWHBHYzFaV1prbHlZVEJpTUhGaGRFNXNNVmhJYWpoMEswZE9jV1JpYVRJdlJsRnFRM2hwYkZST2RXNTBWRE4yZVRKbFQwaFJTVVFLUVZGQlFtOTVUWGRKVkVGUFFtZE9Wa2hST0VKQlpqaEZRa0ZOUTBGeFVYZEVkMWxFVmxJd1ZFRlJTQzlDUVZWM1FYZEZRaTk2UVU1Q1oydHhhR3RwUndvNWR6QkNRVkZ6UmtGQlQwTkJVVVZCU1cxRmJrbFlWak5FZVcxRGNUbHhVRGR3SzNWS05UVjFabGhrYTFJeVoyaEVWVmx5VkZSalVIZHFVakpxVkVoaENtbGFRU3RuT0c0MlVYSlZiME5FTm5ONlJ5dHNhR0ZzTjJoUU5uaGtWM1ZTYWxoR1NFODNZazUyTmpOSmNVVkhlbEpFWjNjMVozZGpjVlZVV2tWMmQyY0taMjE2TnpVNWR5OWhSbVl4VmpFeWFERmhabEJ0UVRsRlJ6Vk9aRWg0YzNnNVFXeElLMFkyZEhsemNIQlhhRlU0V0VWUlZVRkxRMUJxYm5kVmJVczBjQW8zWjNaVVduSXllbm8wYm5kb1dtOHpURGc1TUROeGNIUmpjVEZzV2pSUFdYTkViMWh2YkRGMWVtRlJTRGd5ZUhsM1pWTkxRMHRZY0U5aWFYcGxOVm93Q25kd2JtcGtSSFZJT0RkNE5ISTBUR3BOV25CMU0zWllOa3hxUWtSTlVGZHJTRWhRVGpWQmFXMHhTa3gwTnk5U1RGQm5WSFJxYzBwTmNsUkJVemRvWjFvS1prdE1URGxSVFZGc05uTXhja2hLTkV0ckwyVTNTMGM0U0VFMGFFVk9SV2hyT1ZsRVpsRTlQUW90TFMwdExVVk9SQ0JEUlZKVVNVWkpRMEZVUlMwdExTMHRDZz09CiAgICBzZXJ2ZXI6IGh0dHBzOi8vZm9vLmJhcjo2NDQzCiAgbmFtZTogYwpjb250ZXh0czoKLSBjb250ZXh0OgogICAgY2x1c3RlcjogYwogICAgdXNlcjogYwogIG5hbWU6IGMKY3VycmVudC1jb250ZXh0OiBjCmtpbmQ6IENvbmZpZwpwcmVmZXJlbmNlczoge30KdXNlcnM6Ci0gbmFtZTogYwogIHVzZXI6CiAgICB0b2tlbjogdGVzdC50ZXN0Cgo=

- path: '/etc/systemd/system/setup.service'
  permissions: '0644'
  encoding: 'b64'
  content: |-
    W0luc3RhbGxdCldhbnRlZEJ5PW11bHRpLXVzZXIudGFyZ2V0CgpbVW5pdF0KUmVxdWlyZXM9bmV0d29yay1vbmxpbmUudGFyZ2V0CkFmdGVyPW5ldHdvcmstb25saW5lLnRhcmdldAoKW1NlcnZpY2VdClR5cGU9b25lc2hvdApSZW1haW5BZnRlckV4aXQ9dHJ1ZQpFbnZpcm9ubWVudEZpbGU9LS9ldGMvZW52aXJvbm1lbnQKRXhlY1N0YXJ0PS9vcHQvYmluL3N1cGVydmlzZS5zaCAvb3B0L2Jpbi9zZXR1cAo=

- path: '/etc/profile.d/opt-bin-path.sh'
  permissions: '0644'
  encoding: 'b64'
  content: |-
    ZXhwb3J0IFBBVEg9Ii9vcHQvYmluOiRQQVRIIgo=

- path: '/etc/kubernetes/kubelet.conf'
  permissions: '0644'
  encoding: 'b64'
  content: |-
    YXBpVmVyc2lvbjoga3ViZWxldC5jb25maWcuazhzLmlvL3YxYmV0YTEKa2luZDogS3ViZWxldENvbmZpZ3VyYXRpb24KYXV0aGVudGljYXRpb246CiAgYW5vbnltb3VzOgogICAgZW5hYmxlZDogZmFsc2UKICB3ZWJob29rOgogICAgY2FjaGVUVEw6IDBzCiAgICBlbmFibGVkOiB0cnVlCiAgeDUwOToKICAgIGNsaWVudENBRmlsZTogL2V0Yy9rdWJlcm5ldGVzL3BraS9jYS5jcnQKYXV0aG9yaXphdGlvbjoKICBtb2RlOiBXZWJob29rCiAgd2ViaG9vazoKICAgIGNhY2hlQXV0aG9yaXplZFRUTDogMHMKICAgIGNhY2hlVW5hdXRob3JpemVkVFRMOiAwcwpjZ3JvdXBEcml2ZXI6IHN5c3RlbWQKY2x1c3RlckROUzoKLSAiMTAuMC4wLjAiCmNsdXN0ZXJEb21haW46IGNsdXN0ZXIubG9jYWwKY3B1TWFuYWdlclJlY29uY2lsZVBlcmlvZDogMHMKZXZpY3Rpb25QcmVzc3VyZVRyYW5zaXRpb25QZXJpb2Q6IDBzCmZlYXR1cmVHYXRlczoKICBHcmFjZWZ1bE5vZGVTaHV0ZG93bjogdHJ1ZQogIElkZW50aWZ5UG9kT1M6IGZhbHNlCmZpbGVDaGVja0ZyZXF1ZW5jeTogMHMKaHR0cENoZWNrRnJlcXVlbmN5OiAwcwppbWFnZU1pbmltdW1HQ0FnZTogMHMKbG9nZ2luZzoKICBmbHVzaEZyZXF1ZW5jeTogMAogIG9wdGlvbnM6CiAgICBqc29uOgogICAgICBpbmZvQnVmZmVyU2l6ZTogIjAiCiAgdmVyYm9zaXR5OiAwCm1lbW9yeVN3YXA6IHt9Cm5vZGVTdGF0dXNSZXBvcnRGcmVxdWVuY3k6IDBzCm5vZGVTdGF0dXNVcGRhdGVGcmVxdWVuY3k6IDBzCnByb3RlY3RLZXJuZWxEZWZhdWx0czogdHJ1ZQpyZWFkT25seVBvcnQ6IDAKcm90YXRlQ2VydGlmaWNhdGVzOiB0cnVlCnJ1bnRpbWVSZXF1ZXN0VGltZW91dDogMHMKc2VydmVyVExTQm9vdHN0cmFwOiB0cnVlCnNodXRkb3duR3JhY2VQZXJpb2Q6IDBzCnNodXRkb3duR3JhY2VQZXJpb2RDcml0aWNhbFBvZHM6IDBzCnN0YXRpY1BvZFBhdGg6IC9ldGMva3ViZXJuZXRlcy9tYW5pZmVzdHMKc3RyZWFtaW5nQ29ubmVjdGlvbklkbGVUaW1lb3V0OiAwcwpzeW5jRnJlcXVlbmN5OiAwcwprdWJlUmVzZXJ2ZWQ6CiAgY3B1OiAyMDBtCiAgZXBoZW1lcmFsLXN0b3JhZ2U6IDFHaQogIG1lbW9yeTogMjAwTWkKc3lzdGVtUmVzZXJ2ZWQ6CiAgY3B1OiAyMDBtCiAgZXBoZW1lcmFsLXN0b3JhZ2U6IDFHaQogIG1lbW9yeTogMjAwTWkKZXZpY3Rpb25IYXJkOgogIGltYWdlZnMuYXZhaWxhYmxlOiAxNSUKICBtZW1vcnkuYXZhaWxhYmxlOiAxMDBNaQogIG5vZGVmcy5hdmFpbGFibGU6IDEwJQogIG5vZGVmcy5pbm9kZXNGcmVlOiA1JQp0bHNDaXBoZXJTdWl0ZXM6Ci0gVExTX0FFU18xMjhfR0NNX1NIQTI1NgotIFRMU19BRVNfMjU2X0dDTV9TSEEzODQKLSBUTFNfQ0hBQ0hBMjBfUE9MWTEzMDVfU0hBMjU2Ci0gVExTX0VDREhFX0VDRFNBX1dJVEhfQUVTXzEyOF9HQ01fU0hBMjU2Ci0gVExTX0VDREhFX0VDRFNBX1dJVEhfQUVTXzI1Nl9HQ01fU0hBMzg0Ci0gVExTX0VDREhFX0VDRFNBX1dJVEhfQ0hBQ0hBMjBfUE9MWTEzMDUKLSBUTFNfRUNESEVfUlNBX1dJVEhfQUVTXzEyOF9HQ01fU0hBMjU2Ci0gVExTX0VDREhFX1JTQV9XSVRIX0FFU18yNTZfR0NNX1NIQTM4NAotIFRMU19FQ0RIRV9SU0FfV0lUSF9DSEFDSEEyMF9QT0xZMTMwNQp2b2x1bWVQbHVnaW5EaXI6IC92YXIvbGliL2t1YmVsZXQvdm9sdW1lcGx1Z2lucwp2b2x1bWVTdGF0c0FnZ1BlcmlvZDogMHMK

- path: '/etc/systemd/system/kubelet-healthcheck.service'
  permissions: '0644'
  encoding: 'b64'
  content: |-
    W1VuaXRdClJlcXVpcmVzPWt1YmVsZXQuc2VydmljZQpBZnRlcj1rdWJlbGV0LnNlcnZpY2UKCltTZXJ2aWNlXQpFeGVjU3RhcnQ9L29wdC9iaW4vaGVhbHRoLW1vbml0b3Iuc2gga3ViZWxldAoKW0luc3RhbGxdCldhbnRlZEJ5PW11bHRpLXVzZXIudGFyZ2V0Cg==

- path: '/opt/disable-swap.sh'
  permissions: '0755'
  encoding: 'b64'
  content: |-
    IyEvdXNyL2Jpbi9lbnYgYmFzaApzZXQgLWV1byBwaXBlZmFpbAoKIyBNYWtlIHN1cmUgd2UgYWx3YXlzIGRpc2FibGUgc3dhcCAtIE90aGVyd2lzZSB0aGUga3ViZWxldCB3b24ndCBzdGFydCBhcyBmb3Igc29tZSBjbG91ZAojIHByb3ZpZGVycyBzd2FwIGdldHMgZW5hYmxlZCBvbiByZWJvb3Qgb3IgYWZ0ZXIgdGhlIHNldHVwIHNjcmlwdCBoYXMgZmluaXNoZWQgZXhlY3V0aW5nLgpzZWQgLWkub3JpZyAnLy4qc3dhcC4qL2QnIC9ldGMvZnN0YWIKc3dhcG9mZiAtYQo=

- path: '/etc/systemd/system/containerd.service.d/environment.conf'
  permissions: '0644'
  content: |-
    [Service]
    Restart=always
    EnvironmentFile=-/etc/environment
    

- path: '/etc/systemd/system/docker.service.d/environment.conf'
  permissions: '0644'
  content: |-
    [Service]
    Restart=always
    EnvironmentFile=-/etc/environment
    

- path: '/etc/docker/daemon.json'
  permissions: '0644'
  encoding: 'b64'
  content: |-
    eyJleGVjLW9wdHMiOlsibmF0aXZlLmNncm91cGRyaXZlcj1zeXN0ZW1kIl0sInN0b3JhZ2UtZHJpdmVyIjoib3ZlcmxheTIiLCJsb2ctZHJpdmVyIjoianNvbi1maWxlIiwibG9nLW9wdHMiOnsibWF4LWZpbGUiOiI1IiwibWF4LXNpemUiOiIxMDBtIn0sImluc2VjdXJlLXJlZ2lzdHJpZXMiOlsiMTkyLjE2OC4xMDAuMTAwOjUwMDAiLCIxMC4wLjAuMTo1MDAwIl0sInJlZ2lzdHJ5LW1pcnJvcnMiOlsiaHR0cHM6Ly9yZWdpc3RyeS5kb2NrZXItY24uY29tIl19

- path: '/root/.docker/config.json'
  permissions: '0600'
  encoding: 'b64'
  content: |-
    

immutable: true
kind: Secret
metadata:
  annotations:
    k8c.io/machine-deployment-revision: "1"
  creationTimestamp: null
  name: ubuntu-aws-kube-system-provisioning-config
  namespace: cloud-init-settings
  resourceVersion: "1"
type: Opaque
