apiVersion: v1
data:
  cloud-config: 
immutable: true
kind: Secret
metadata:
  creationTimestamp: null
  name: ubuntu-20.04-aws-osc-provisioning
  namespace: cloud-init-settings
  resourceVersion: "1"
