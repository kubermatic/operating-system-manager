apiVersion: v1
data:
  cloud-config: #cloud-config
ssh_pwauth: no
ssh_authorized_keys:
- 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDdOIhYmzCK5DSVLu3c'
write_files:
- path: '/etc/systemd/journald.conf.d/max_disk_use.conf'
  content: |-
    [Journal]
    SystemMaxUse=5G
    

- path: '/opt/load-kernel-modules.sh'
  permissions: '0755'
  content: |-
    #!/usr/bin/env bash
    set -euo pipefail
    
    modprobe ip_vs
    modprobe ip_vs_rr
    modprobe ip_vs_wrr
    modprobe ip_vs_sh
    
    if modinfo nf_conntrack_ipv4 &> /dev/null; then
      modprobe nf_conntrack_ipv4
    else
      modprobe nf_conntrack
    fi
    

- path: '/etc/sysctl.d/k8s.conf'
  content: |-
    net.bridge.bridge-nf-call-ip6tables = 1
    net.bridge.bridge-nf-call-iptables = 1
    kernel.panic_on_oops = 1
    kernel.panic = 10
    net.ipv4.ip_forward = 1
    vm.overcommit_memory = 1
    fs.inotify.max_user_watches = 1048576
    

- path: '/etc/default/grub.d/60-swap-accounting.cfg'
  content: |-
    # Added by kubermatic machine-controller
    # Enable cgroups memory and swap accounting
    GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1"
    

- path: '/opt/bin/setup'
  permissions: '0755'
  content: |-
    #!/bin/bash
    set -xeuo pipefail
    if systemctl is-active ufw; then systemctl stop ufw; fi
    systemctl mask ufw
    systemctl restart systemd-modules-load.service
    sysctl --system
    sed -i.orig '/.*swap.*/d' /etc/fstab
    swapoff -a
    
    apt-get update
    
    DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y \
      curl \
      ca-certificates \
      ceph-common \
      cifs-utils \
      conntrack \
      e2fsprogs \
      ebtables \
      ethtool \
      glusterfs-client \
      iptables \
      jq \
      kmod \
      openssh-client \
      nfs-common \
      socat \
      util-linux \
      ipvsadm
    apt-get update
    apt-get install -y apt-transport-https ca-certificates curl software-properties-common lsb-release
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
    add-apt-repository "deb https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    
    mkdir -p /etc/systemd/system/containerd.service.d /etc/systemd/system/docker.service.d
    
    cat <<EOF | tee /etc/systemd/system/containerd.service.d/environment.conf /etc/systemd/system/docker.service.d/environment.conf
    [Service]
    Restart=always
    EnvironmentFile=-/etc/environment
    EOF
    
    apt-get install -y \
        containerd.io=1.4.3* \
        docker-ce=5:19.03.13* \
        docker-ce-cli=5:19.03.13*
    apt-mark hold docker-ce docker-ce-cli containerd.io
    
    systemctl daemon-reload
    systemctl enable --now docker
    opt_bin=/opt/bin
    cni_bin_dir=/opt/cni/bin
    mkdir -p /etc/cni/net.d /etc/kubernetes/dynamic-config-dir /etc/kubernetes/manifests "$opt_bin" "$cni_bin_dir"
    arch=${HOST_ARCH-}
    if [ -z "$arch" ]
    then
    case $(uname -m) in
    x86_64)
        arch="amd64"
        ;;
    aarch64)
        arch="arm64"
        ;;
    *)
        echo "unsupported CPU architecture, exiting"
        exit 1
        ;;
    esac
    fi
    CNI_VERSION="${CNI_VERSION:-v0.8.7}"
    cni_base_url="https://github.com/containernetworking/plugins/releases/download/$CNI_VERSION"
    cni_filename="cni-plugins-linux-$arch-$CNI_VERSION.tgz"
    curl -Lfo "$cni_bin_dir/$cni_filename" "$cni_base_url/$cni_filename"
    cni_sum=$(curl -Lf "$cni_base_url/$cni_filename.sha256")
    cd "$cni_bin_dir"
    sha256sum -c <<<"$cni_sum"
    tar xvf "$cni_filename"
    rm -f "$cni_filename"
    cd -
    KUBE_VERSION="${KUBE_VERSION:-v1.22.1}"
    kube_dir="$opt_bin/kubernetes-$KUBE_VERSION"
    kube_base_url="https://storage.googleapis.com/kubernetes-release/release/$KUBE_VERSION/bin/linux/$arch"
    kube_sum_file="$kube_dir/sha256"
    mkdir -p "$kube_dir"
    : >"$kube_sum_file"
    
    for bin in kubelet kubeadm kubectl; do
        curl -Lfo "$kube_dir/$bin" "$kube_base_url/$bin"
        chmod +x "$kube_dir/$binKubeletVersion"
        sum=$(curl -Lf "$kube_base_url/$bin.sha256")
        echo "$sum  $kube_dir/$bin" >>"$kube_sum_file"
    done
    sha256sum -c "$kube_sum_file"
    
    for bin in kubelet kubeadm kubectl; do
        ln -sf "$kube_dir/$bin" "$opt_bin"/$bin
    done
    
    if [[ ! -x /opt/bin/health-monitor.sh ]]; then
        curl -Lfo /opt/bin/health-monitor.sh https://raw.githubusercontent.com/kubermatic/machine-controller/7967a0af2b75f29ad2ab227eeaa26ea7b0f2fbde/pkg/userdata/scripts/health-monitor.sh
        chmod +x /opt/bin/health-monitor.sh
    fi
    
    # set kubelet nodeip environment variable
    /opt/bin/setup_net_env.sh
    
    systemctl enable --now kubelet
    systemctl enable --now --no-block kubelet-healthcheck.service
    

- path: '/opt/bin/supervise.sh'
  permissions: '0755'
  content: |-
    #!/bin/bash
    set -xeuo pipefail
    while ! "$@"; do
      sleep 1
    done
    

- path: '/etc/systemd/system/kubelet.service'
  content: |-
    [Unit]
    After=docker.service
    Requires=docker.service
    
    Description=kubelet: The Kubernetes Node Agent
    Documentation=https://kubernetes.io/docs/home/
    
    [Service]
    Restart=always
    StartLimitInterval=0
    RestartSec=10
    CPUAccounting=true
    MemoryAccounting=true
    
    Environment="PATH=/opt/bin:/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin/"
    EnvironmentFile=-/etc/environment
    
    ExecStartPre=/bin/bash /opt/load-kernel-modules.sh
    ExecStartPre=/bin/bash /opt/bin/setup_net_env.sh
    ExecStart=/opt/bin/kubelet $KUBELET_EXTRA_ARGS \
      --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf \
      --kubeconfig=/var/lib/kubelet/kubeconfig \
      --config=/etc/kubernetes/kubelet.conf \
      --network-plugin=cni \
      --cert-dir=/etc/kubernetes/pki \
      --cloud-provider=aws \
      --cloud-config=/etc/kubernetes/cloud-config \
      --dynamic-config-dir=/etc/kubernetes/dynamic-config-dir \
      --exit-on-lock-contention \
      --lock-file=/tmp/kubelet.lock \
      --container-runtime=docker \
      --container-runtime-endpoint=unix:///var/run/dockershim.sock \
      --node-ip ${KUBELET_NODE_IP}
    
    [Install]
    WantedBy=multi-user.target
    

- path: '/etc/systemd/system/kubelet.service.d/extras.conf'
  content: |-
    [Service]
    Environment="KUBELET_EXTRA_ARGS=--resolv-conf=/run/systemd/resolve/resolv.conf"
    

- path: '/etc/kubernetes/cloud-config'
  permissions: '0600'
  content: |-
    [global]
    Zone=""
    VPC=""
    SubnetID=""
    
    

- path: '/opt/bin/setup_net_env.sh'
  permissions: '0755'
  content: |-
    #!/usr/bin/env bash
    echodate() {
      echo "[$(date -Is)]" "$@"
    }
    
    # get the default interface IP address
    DEFAULT_IFC_IP=$(ip -o  route get 1 | grep -oP "src \K\S+")
    
    if [ -z "${DEFAULT_IFC_IP}" ]
    then
      echodate "Failed to get IP address for the default route interface"
      exit 1
    fi
    
     # get the full hostname
    FULL_HOSTNAME=$(hostname -f)
    
    # write the nodeip_env file
    # we need the line below because flatcar has the same string "coreos" in that file
    if grep -q coreos /etc/os-release
    then
      echo "KUBELET_NODE_IP=${DEFAULT_IFC_IP}\nKUBELET_HOSTNAME=${FULL_HOSTNAME}" > /etc/kubernetes/nodeip.conf
    elif [ ! -d /etc/systemd/system/kubelet.service.d ]
    then
      echodate "Can't find kubelet service extras directory"
      exit 1
    else
      echo -e "[Service]\nEnvironment=\"KUBELET_NODE_IP=${DEFAULT_IFC_IP}\"\nEnvironment=\"KUBELET_HOSTNAME=${FULL_HOSTNAME}\"" > /etc/systemd/system/kubelet.service.d/nodeip.conf
    fi
    

- path: '/etc/kubernetes/bootstrap-kubelet.conf'
  permissions: '0600'
  content: |-
    apiVersion: v1
    clusters:
    - cluster:
        certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVXakNDQTBLZ0F3SUJBZ0lKQUxmUmxXc0k4WVFITUEwR0NTcUdTSWIzRFFFQkJRVUFNSHN4Q3pBSkJnTlYKQkFZVEFsVlRNUXN3Q1FZRFZRUUlFd0pEUVRFV01CUUdBMVVFQnhNTlUyRnVJRVp5WVc1amFYTmpiekVVTUJJRwpBMVVFQ2hNTFFuSmhaR1pwZEhwcGJtTXhFakFRQmdOVkJBTVRDV3h2WTJGc2FHOXpkREVkTUJzR0NTcUdTSWIzCkRRRUpBUllPWW5KaFpFQmtZVzVuWVM1amIyMHdIaGNOTVRRd056RTFNakEwTmpBMVdoY05NVGN3TlRBME1qQTAKTmpBMVdqQjdNUXN3Q1FZRFZRUUdFd0pWVXpFTE1Ba0dBMVVFQ0JNQ1EwRXhGakFVQmdOVkJBY1REVk5oYmlCRwpjbUZ1WTJselkyOHhGREFTQmdOVkJBb1RDMEp5WVdSbWFYUjZhVzVqTVJJd0VBWURWUVFERXdsc2IyTmhiR2h2CmMzUXhIVEFiQmdrcWhraUc5dzBCQ1FFV0RtSnlZV1JBWkdGdVoyRXVZMjl0TUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdDVmQWpwNGZUY2VrV1VUZnpzcDBreWloMU9ZYnNHTDBLWDFlUmJTUwpSOE9kMCs5UTYySHlueStHRndNVGI0QS9LVThtc3NvSHZjY2VTQUFid2ZieEZLLytzNTFUb2JxVW5PUlpyT29UClpqa1V5Z2J5WERTSzk5WUJiY1IxUGlwOHZ3TVRtNFhLdUx0Q2lnZUJCZGpqQVFkZ1VPMjhMRU5HbHNNbm1lWWsKSmZPRFZHblZtcjVMdGI5QU5BOElLeVRmc25ISjRpT0NTL1BsUGJVajJxN1lub1ZMcG9zVUJNbGdVYi9DeWtYMwptT29MYjR5SkpReUEvaVNUNlp4aUlFajM2RDR5V1o1bGc3WUpsK1VpaUJRSEdDblBkR3lpcHFWMDZleDBoZVlXCmNhaVc4TFdaU1VROTNqUStXVkNIOGhUN0RRTzFkbXN2VW1YbHEvSmVBbHdRL1FJREFRQUJvNEhnTUlIZE1CMEcKQTFVZERnUVdCQlJjQVJPdGhTNFA0VTd2VGZqQnlDNTY5UjdFNkRDQnJRWURWUjBqQklHbE1JR2lnQlJjQVJPdApoUzRQNFU3dlRmakJ5QzU2OVI3RTZLRi9wSDB3ZXpFTE1Ba0dBMVVFQmhNQ1ZWTXhDekFKQmdOVkJBZ1RBa05CCk1SWXdGQVlEVlFRSEV3MVRZVzRnUm5KaGJtTnBjMk52TVJRd0VnWURWUVFLRXd0Q2NtRmtabWwwZW1sdVl6RVMKTUJBR0ExVUVBeE1KYkc5allXeG9iM04wTVIwd0d3WUpLb1pJaHZjTkFRa0JGZzVpY21Ga1FHUmhibWRoTG1OdgpiWUlKQUxmUmxXc0k4WVFITUF3R0ExVWRFd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVGQlFBRGdnRUJBRzZoClU5ZjlzTkgwLzZvQmJHR3kyRVZVMFVnSVRVUUlyRldvOXJGa3JXNWsvWGtEalFtKzNsempUMGlHUjRJeEUvQW8KZVU2c1FodWE3d3JXZUZFbjQ3R0w5OGxuQ3NKZEQ3b1pOaEZtUTk1VGIvTG5EVWpzNVlqOWJyUDBOV3pYZllVNApVSzJabklOSlJjSnBCOGlSQ2FDeEU4RGRjVUYwWHFJRXE2cEEyNzJzbm9MbWlYTE12Tmwza1lFZG0ramU2dm9ECjU4U05WRVVzenR6UXlYbUpFaENwd1ZJMEE2UUNqelhqK3F2cG13M1paSGk4SndYZWk4WlpCTFRTRkJraThaN24Kc0g5QkJIMzgvU3pVbUFONFFIU1B5MWdqcW0wME9BRThOYVlEa2gvYnpFNGQ3bUxHR01XcC9XRTNLUFN1ODJIRgprUGU2WG9TYmlMbS9reGszMlQwPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
        server: https://server:443
      name: ""
    contexts: null
    current-context: ""
    kind: Config
    preferences: {}
    users:
    - name: ""
      user:
        token: my-token
    
    

- path: '/etc/kubernetes/pki/ca.crt'
  content: |-
    -----BEGIN CERTIFICATE-----
    MIIEWjCCA0KgAwIBAgIJALfRlWsI8YQHMA0GCSqGSIb3DQEBBQUAMHsxCzAJBgNV
    BAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzEUMBIG
    A1UEChMLQnJhZGZpdHppbmMxEjAQBgNVBAMTCWxvY2FsaG9zdDEdMBsGCSqGSIb3
    DQEJARYOYnJhZEBkYW5nYS5jb20wHhcNMTQwNzE1MjA0NjA1WhcNMTcwNTA0MjA0
    NjA1WjB7MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExFjAUBgNVBAcTDVNhbiBG
    cmFuY2lzY28xFDASBgNVBAoTC0JyYWRmaXR6aW5jMRIwEAYDVQQDEwlsb2NhbGhv
    c3QxHTAbBgkqhkiG9w0BCQEWDmJyYWRAZGFuZ2EuY29tMIIBIjANBgkqhkiG9w0B
    AQEFAAOCAQ8AMIIBCgKCAQEAt5fAjp4fTcekWUTfzsp0kyih1OYbsGL0KX1eRbSS
    R8Od0+9Q62Hyny+GFwMTb4A/KU8mssoHvcceSAAbwfbxFK/+s51TobqUnORZrOoT
    ZjkUygbyXDSK99YBbcR1Pip8vwMTm4XKuLtCigeBBdjjAQdgUO28LENGlsMnmeYk
    JfODVGnVmr5Ltb9ANA8IKyTfsnHJ4iOCS/PlPbUj2q7YnoVLposUBMlgUb/CykX3
    mOoLb4yJJQyA/iST6ZxiIEj36D4yWZ5lg7YJl+UiiBQHGCnPdGyipqV06ex0heYW
    caiW8LWZSUQ93jQ+WVCH8hT7DQO1dmsvUmXlq/JeAlwQ/QIDAQABo4HgMIHdMB0G
    A1UdDgQWBBRcAROthS4P4U7vTfjByC569R7E6DCBrQYDVR0jBIGlMIGigBRcAROt
    hS4P4U7vTfjByC569R7E6KF/pH0wezELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNB
    MRYwFAYDVQQHEw1TYW4gRnJhbmNpc2NvMRQwEgYDVQQKEwtCcmFkZml0emluYzES
    MBAGA1UEAxMJbG9jYWxob3N0MR0wGwYJKoZIhvcNAQkBFg5icmFkQGRhbmdhLmNv
    bYIJALfRlWsI8YQHMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEFBQADggEBAG6h
    U9f9sNH0/6oBbGGy2EVU0UgITUQIrFWo9rFkrW5k/XkDjQm+3lzjT0iGR4IxE/Ao
    eU6sQhua7wrWeFEn47GL98lnCsJdD7oZNhFmQ95Tb/LnDUjs5Yj9brP0NWzXfYU4
    UK2ZnINJRcJpB8iRCaCxE8DdcUF0XqIEq6pA272snoLmiXLMvNl3kYEdm+je6voD
    58SNVEUsztzQyXmJEhCpwVI0A6QCjzXj+qvpmw3ZZHi8JwXei8ZZBLTSFBki8Z7n
    sH9BBH38/SzUmAN4QHSPy1gjqm00OAE8NaYDkh/bzE4d7mLGGMWp/WE3KPSu82HF
    kPe6XoSbiLm/kxk32T0=
    -----END CERTIFICATE-----
    

- path: '/etc/systemd/system/setup.service'
  permissions: '0644'
  content: |-
    [Install]
    WantedBy=multi-user.target
    
    [Unit]
    Requires=network-online.target
    After=network-online.target
    
    [Service]
    Type=oneshot
    RemainAfterExit=true
    EnvironmentFile=-/etc/environment
    ExecStart=/opt/bin/supervise.sh /opt/bin/setup
    

- path: '/etc/profile.d/opt-bin-path.sh'
  permissions: '0644'
  content: |-
    export PATH="/opt/bin:$PATH"
    

- path: '/etc/kubernetes/kubelet.conf'
  content: |-
    apiVersion: kubelet.config.k8s.io/v1beta1
    kind: KubeletConfiguration
    authentication:
      anonymous:
        enabled: false
      webhook:
        enabled: true
      x509:
        clientCAFile: /etc/kubernetes/pki/ca.crt
    authorization:
      mode: Webhook
    cgroupDriver: systemd
    clusterDNS:
    - 10.0.0.0
    clusterDomain: cluster.local
    featureGates:
      RotateKubeletServerCertificate: true
    protectKernelDefaults: true
    readOnlyPort: 0
    rotateCertificates: true
    serverTLSBootstrap: true
    staticPodPath: /etc/kubernetes/manifests
    kubeReserved:
      cpu: 200m
      ephemeral-storage: 1Gi
      memory: 200Mi
    systemReserved:
      cpu: 200m
      ephemeral-storage: 1Gi
      memory: 200Mi
    volumePluginDir: /var/lib/kubelet/volumeplugins
    

- path: '/etc/systemd/system/kubelet-healthcheck.service'
  permissions: '0644'
  content: |-
    [Unit]
    Requires=kubelet.service
    After=kubelet.service
    
    [Service]
    ExecStart=/opt/bin/health-monitor.sh kubelet
    
    [Install]
    WantedBy=multi-user.target
    

- path: '/etc/docker/daemon.json'
  permissions: '0644'
  content: |-
    {"exec-opts":["native.cgroupdriver=systemd"],"storage-driver":"overlay2","log-driver":"json-file","log-opts":{"max-file":"5","max-size":"10m"}}

runcmd:
- systemctl restart kubelet.service
- systemctl restart setup.service
- systemctl restart kubelet-healthcheck.service
- systemctl daemon-reload

kind: Secret
metadata:
  creationTimestamp: null
  name: ubuntu-20.04-aws-osc-provisioning
  namespace: kube-system
  resourceVersion: "1"
