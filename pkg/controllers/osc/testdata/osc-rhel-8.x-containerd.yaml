apiVersion: operatingsystemmanager.k8c.io/v1alpha1
kind: OperatingSystemConfig
metadata:
  creationTimestamp: null
  name: osp-rhel-aws-kube-system-osc-provisioning
  namespace: kube-system
  resourceVersion: "1"
spec:
  cloudProvider:
    name: aws
    spec:
      availabilityZone: eu-central-1b
      subnetID: test-subnet
      vpcId: e-123f
  files:
  - content:
      inline:
        data: |
          #!/usr/bin/env bash

          # Copyright 2016 The Kubernetes Authors.
          #
          # Licensed under the Apache License, Version 2.0 (the "License");
          # you may not use this file except in compliance with the License.
          # You may obtain a copy of the License at
          #
          #     http://www.apache.org/licenses/LICENSE-2.0
          #
          # Unless required by applicable law or agreed to in writing, software
          # distributed under the License is distributed on an "AS IS" BASIS,
          # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          # See the License for the specific language governing permissions and
          # limitations under the License.

          # This script is for master and node instance health monitoring, which is
          # packed in kube-manifest tarball. It is executed through a systemd service
          # in cluster/gce/gci/<master/node>.yaml. The env variables come from an env
          # file provided by the systemd service.

          # This script is a slightly adjusted version of
          # https://github.com/kubernetes/kubernetes/blob/e1a1aa211224fcd9b213420b80b2ae680669683d/cluster/gce/gci/health-monitor.sh
          # Adjustments are:
          # * Kubelet health port is 10248 not 10255
          # * Removal of all all references to the KUBE_ENV file

          set -o nounset
          set -o pipefail

          # We simply kill the process when there is a failure. Another systemd service will
          # automatically restart the process.
          function container_runtime_monitoring() {
            local -r max_attempts=5
            local attempt=1
            local -r container_runtime_name="${CONTAINER_RUNTIME_NAME:-docker}"
            # We still need to use 'docker ps' when container runtime is "docker". This is because
            # dockershim is still part of kubelet today. When kubelet is down, crictl pods
            # will also fail, and docker will be killed. This is undesirable especially when
            # docker live restore is disabled.
            local healthcheck_command="docker ps"
            if [[ "${CONTAINER_RUNTIME:-docker}" != "docker" ]]; then
              healthcheck_command="crictl pods"
            fi
            # Container runtime startup takes time. Make initial attempts before starting
            # killing the container runtime.
            until timeout 60 ${healthcheck_command} > /dev/null; do
              if ((attempt == max_attempts)); then
                echo "Max attempt ${max_attempts} reached! Proceeding to monitor container runtime healthiness."
                break
              fi
              echo "$attempt initial attempt \"${healthcheck_command}\"! Trying again in $attempt seconds..."
              sleep "$((2 ** attempt++))"
            done
            while true; do
              if ! timeout 60 ${healthcheck_command} > /dev/null; then
                echo "Container runtime ${container_runtime_name} failed!"
                if [[ "$container_runtime_name" == "docker" ]]; then
                  # Dump stack of docker daemon for investigation.
                  # Log file name looks like goroutine-stacks-TIMESTAMP and will be saved to
                  # the exec root directory, which is /var/run/docker/ on Ubuntu and COS.
                  pkill -SIGUSR1 dockerd
                fi
                systemctl kill --kill-who=main "${container_runtime_name}"
                # Wait for a while, as we don't want to kill it again before it is really up.
                sleep 120
              else
                sleep "${SLEEP_SECONDS}"
              fi
            done
          }

          function kubelet_monitoring() {
            echo "Wait for 2 minutes for kubelet to be functional"
            sleep 120
            local -r max_seconds=10
            local output=""
            while true; do
              local failed=false

              if journalctl -u kubelet -n 1 | grep -q "use of closed network connection"; then
                failed=true
                echo "Kubelet stopped posting node status. Restarting"
              elif ! output=$(curl -m "${max_seconds}" -f -s -S http://127.0.0.1:10248/healthz 2>&1); then
                failed=true
                # Print the response and/or errors.
                echo "$output"
              fi

              if [[ "$failed" == "true" ]]; then
                echo "Kubelet is unhealthy!"
                systemctl kill kubelet
                # Wait for a while, as we don't want to kill it again before it is really up.
                sleep 60
              else
                sleep "${SLEEP_SECONDS}"
              fi
            done
          }

          ############## Main Function ################
          if [[ "$#" -ne 1 ]]; then
            echo "Usage: health-monitor.sh <container-runtime/kubelet>"
            exit 1
          fi

          SLEEP_SECONDS=10
          component=$1
          echo "Start kubernetes health monitoring for ${component}"
          if [[ "${component}" == "container-runtime" ]]; then
            container_runtime_monitoring
          elif [[ "${component}" == "kubelet" ]]; then
            kubelet_monitoring
          else
            echo "Health monitoring for component ${component} is not supported!"
          fi
        encoding: b64
    path: /opt/bin/health-monitor.sh
    permissions: 493
  - content:
      inline:
        data: |
          [Journal]
          SystemMaxUse=5G
        encoding: b64
    path: /etc/systemd/journald.conf.d/max_disk_use.conf
  - content:
      inline:
        data: |
          #!/usr/bin/env bash
          set -euo pipefail

          modprobe ip_vs
          modprobe ip_vs_rr
          modprobe ip_vs_wrr
          modprobe ip_vs_sh

          if modinfo nf_conntrack_ipv4 &> /dev/null; then
            modprobe nf_conntrack_ipv4
          else
            modprobe nf_conntrack
          fi
        encoding: b64
    path: /opt/load-kernel-modules.sh
    permissions: 493
  - content:
      inline:
        data: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          kernel.panic_on_oops = 1
          kernel.panic = 10
          net.ipv4.ip_forward = 1
          vm.overcommit_memory = 1
          fs.inotify.max_user_watches = 1048576
          fs.inotify.max_user_instances = 8192
        encoding: b64
    path: /etc/sysctl.d/k8s.conf
  - content:
      inline:
        data: |
          # This file controls the state of SELinux on the system.
          # SELINUX= can take one of these three values:
          #     enforcing - SELinux security policy is enforced.
          #     permissive - SELinux prints warnings instead of enforcing.
          #     disabled - No SELinux policy is loaded.
          SELINUX=permissive
          # SELINUXTYPE= can take one of three two values:
          #     targeted - Targeted processes are protected,
          #     minimum - Modification of targeted policy. Only selected processes are protected.
          #     mls - Multi Level Security protection.
          SELINUXTYPE=targeted
        encoding: b64
    path: /etc/selinux/config
  - content:
      inline:
        data: |
          #!/bin/bash
          set -xeuo pipefail

          setenforce 0 || true
          systemctl restart systemd-modules-load.service
          sysctl --system
          sed -i.orig '/.*swap.*/d' /etc/fstab
          swapoff -a


          yum install -y \
            device-mapper-persistent-data \
            lvm2 \
            ebtables \
            ethtool \
            nfs-utils \
            bash-completion \
            sudo \
            socat \
            wget \
            curl \
            ipvsadm

          systemctl disable --now firewalld || true
          yum install -y yum-utils
          yum-config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo
          yum-config-manager --save --setopt=docker-ce-stable.module_hotfixes=true

          yum install -y containerd.io-1.4* yum-plugin-versionlock
          yum versionlock add containerd.io

          systemctl daemon-reload
          systemctl enable --now containerd

          opt_bin=/opt/bin
          usr_local_bin=/usr/local/bin
          cni_bin_dir=/opt/cni/bin
          mkdir -p /etc/cni/net.d /etc/kubernetes/dynamic-config-dir /etc/kubernetes/manifests "$opt_bin" "$cni_bin_dir"
          arch=${HOST_ARCH-}
          if [ -z "$arch" ]
          then
          case $(uname -m) in
          x86_64)
              arch="amd64"
              ;;
          aarch64)
              arch="arm64"
              ;;
          *)
              echo "unsupported CPU architecture, exiting"
              exit 1
              ;;
          esac
          fi
          CNI_VERSION="${CNI_VERSION:-v0.8.7}"
          cni_base_url="https://github.com/containernetworking/plugins/releases/download/$CNI_VERSION"
          cni_filename="cni-plugins-linux-$arch-$CNI_VERSION.tgz"
          curl -Lfo "$cni_bin_dir/$cni_filename" "$cni_base_url/$cni_filename"
          cni_sum=$(curl -Lf "$cni_base_url/$cni_filename.sha256")
          cd "$cni_bin_dir"
          sha256sum -c <<<"$cni_sum"
          tar xvf "$cni_filename"
          rm -f "$cni_filename"
          cd -
          CRI_TOOLS_RELEASE="${CRI_TOOLS_RELEASE:-v1.22.0}"
          cri_tools_base_url="https://github.com/kubernetes-sigs/cri-tools/releases/download/${CRI_TOOLS_RELEASE}"
          cri_tools_filename="crictl-${CRI_TOOLS_RELEASE}-linux-${arch}.tar.gz"
          curl -Lfo "$opt_bin/$cri_tools_filename" "$cri_tools_base_url/$cri_tools_filename"
          cri_tools_sum=$(curl -Lf "$cri_tools_base_url/$cri_tools_filename.sha256" | sed 's/\*\///')
          cd "$opt_bin"
          sha256sum -c <<<"$cri_tools_sum"
          tar xvf "$cri_tools_filename"
          rm -f "$cri_tools_filename"
          ln -sf "$opt_bin/crictl" "$usr_local_bin"/crictl || echo "symbolic link is skipped"
          cd -
          KUBE_VERSION="${KUBE_VERSION:-v1.22.1}"
          kube_dir="$opt_bin/kubernetes-$KUBE_VERSION"
          kube_base_url="https://storage.googleapis.com/kubernetes-release/release/$KUBE_VERSION/bin/linux/$arch"
          kube_sum_file="$kube_dir/sha256"
          mkdir -p "$kube_dir"
          : >"$kube_sum_file"

          for bin in kubelet kubeadm kubectl; do
              curl -Lfo "$kube_dir/$bin" "$kube_base_url/$bin"
              chmod +x "$kube_dir/$bin"
              sum=$(curl -Lf "$kube_base_url/$bin.sha256")
              echo "$sum  $kube_dir/$bin" >>"$kube_sum_file"
          done
          sha256sum -c "$kube_sum_file"

          for bin in kubelet kubeadm kubectl; do
              ln -sf "$kube_dir/$bin" "$opt_bin"/$bin
          done

          mkdir -p /etc/systemd/system/kubelet.service.d/
          # set kubelet nodeip environment variable
          /opt/bin/setup_net_env.sh

          systemctl enable --now kubelet
          systemctl enable --now --no-block kubelet-healthcheck.service
        encoding: b64
    path: /opt/bin/setup
    permissions: 493
  - content:
      inline:
        data: |
          #!/bin/bash
          set -xeuo pipefail
          while ! "$@"; do
            sleep 1
          done
        encoding: b64
    path: /opt/bin/supervise.sh
    permissions: 493
  - content:
      inline:
        data: |
          [Unit]
          After=containerd.service
          Requires=containerd.service

          Description=kubelet: The Kubernetes Node Agent
          Documentation=https://kubernetes.io/docs/home/

          [Service]
          Restart=always
          StartLimitInterval=0
          RestartSec=10
          CPUAccounting=true
          MemoryAccounting=true

          Environment="PATH=/opt/bin:/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin/"
          EnvironmentFile=-/etc/environment

          ExecStartPre=/bin/bash /opt/load-kernel-modules.sh
          ExecStartPre=/bin/bash /opt/bin/setup_net_env.sh
          ExecStart=/opt/bin/kubelet $KUBELET_EXTRA_ARGS \
            --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf \
            --kubeconfig=/var/lib/kubelet/kubeconfig \
            --config=/etc/kubernetes/kubelet.conf \
            --network-plugin=cni \
            --cert-dir=/etc/kubernetes/pki \
            --cloud-provider=aws \
            --cloud-config=/etc/kubernetes/cloud-config \
            --dynamic-config-dir=/etc/kubernetes/dynamic-config-dir \
            --feature-gates=DynamicKubeletConfig=true \
            --exit-on-lock-contention \
            --lock-file=/tmp/kubelet.lock \
            --container-runtime=remote \
            --container-runtime-endpoint=unix:///run/containerd/containerd.sock \
            --node-ip ${KUBELET_NODE_IP}

          [Install]
          WantedBy=multi-user.target
        encoding: b64
    path: /etc/systemd/system/kubelet.service
  - content:
      inline:
        data: |+
          [global]
          Zone="eu-central-1b"
          VPC="e-123f"
          SubnetID="test-subnet"

        encoding: b64
    path: /etc/kubernetes/cloud-config
    permissions: 384
  - content:
      inline:
        data: |
          #!/usr/bin/env bash
          echodate() {
            echo "[$(date -Is)]" "$@"
          }

          # get the default interface IP address
          DEFAULT_IFC_IP=$(ip -o  route get 1 | grep -oP "src \K\S+")

          if [ -z "${DEFAULT_IFC_IP}" ]
          then
            echodate "Failed to get IP address for the default route interface"
            exit 1
          fi

           # get the full hostname
          FULL_HOSTNAME=$(hostname -f)

          # write the nodeip_env file
          # we need the line below because flatcar has the same string "coreos" in that file
          if grep -q coreos /etc/os-release
          then
            echo "KUBELET_NODE_IP=${DEFAULT_IFC_IP}\nKUBELET_HOSTNAME=${FULL_HOSTNAME}" > /etc/kubernetes/nodeip.conf
          elif [ ! -d /etc/systemd/system/kubelet.service.d ]
          then
            echodate "Can't find kubelet service extras directory"
            exit 1
          else
            echo -e "[Service]\nEnvironment=\"KUBELET_NODE_IP=${DEFAULT_IFC_IP}\"\nEnvironment=\"KUBELET_HOSTNAME=${FULL_HOSTNAME}\"" > /etc/systemd/system/kubelet.service.d/nodeip.conf
          fi
        encoding: b64
    path: /opt/bin/setup_net_env.sh
    permissions: 493
  - content:
      inline:
        data: |
          -----BEGIN CERTIFICATE-----
          MIIEWjCCA0KgAwIBAgIJALfRlWsI8YQHMA0GCSqGSIb3DQEBBQUAMHsxCzAJBgNV
          BAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzEUMBIG
          A1UEChMLQnJhZGZpdHppbmMxEjAQBgNVBAMTCWxvY2FsaG9zdDEdMBsGCSqGSIb3
          DQEJARYOYnJhZEBkYW5nYS5jb20wHhcNMTQwNzE1MjA0NjA1WhcNMTcwNTA0MjA0
          NjA1WjB7MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExFjAUBgNVBAcTDVNhbiBG
          cmFuY2lzY28xFDASBgNVBAoTC0JyYWRmaXR6aW5jMRIwEAYDVQQDEwlsb2NhbGhv
          c3QxHTAbBgkqhkiG9w0BCQEWDmJyYWRAZGFuZ2EuY29tMIIBIjANBgkqhkiG9w0B
          AQEFAAOCAQ8AMIIBCgKCAQEAt5fAjp4fTcekWUTfzsp0kyih1OYbsGL0KX1eRbSS
          R8Od0+9Q62Hyny+GFwMTb4A/KU8mssoHvcceSAAbwfbxFK/+s51TobqUnORZrOoT
          ZjkUygbyXDSK99YBbcR1Pip8vwMTm4XKuLtCigeBBdjjAQdgUO28LENGlsMnmeYk
          JfODVGnVmr5Ltb9ANA8IKyTfsnHJ4iOCS/PlPbUj2q7YnoVLposUBMlgUb/CykX3
          mOoLb4yJJQyA/iST6ZxiIEj36D4yWZ5lg7YJl+UiiBQHGCnPdGyipqV06ex0heYW
          caiW8LWZSUQ93jQ+WVCH8hT7DQO1dmsvUmXlq/JeAlwQ/QIDAQABo4HgMIHdMB0G
          A1UdDgQWBBRcAROthS4P4U7vTfjByC569R7E6DCBrQYDVR0jBIGlMIGigBRcAROt
          hS4P4U7vTfjByC569R7E6KF/pH0wezELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNB
          MRYwFAYDVQQHEw1TYW4gRnJhbmNpc2NvMRQwEgYDVQQKEwtCcmFkZml0emluYzES
          MBAGA1UEAxMJbG9jYWxob3N0MR0wGwYJKoZIhvcNAQkBFg5icmFkQGRhbmdhLmNv
          bYIJALfRlWsI8YQHMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEFBQADggEBAG6h
          U9f9sNH0/6oBbGGy2EVU0UgITUQIrFWo9rFkrW5k/XkDjQm+3lzjT0iGR4IxE/Ao
          eU6sQhua7wrWeFEn47GL98lnCsJdD7oZNhFmQ95Tb/LnDUjs5Yj9brP0NWzXfYU4
          UK2ZnINJRcJpB8iRCaCxE8DdcUF0XqIEq6pA272snoLmiXLMvNl3kYEdm+je6voD
          58SNVEUsztzQyXmJEhCpwVI0A6QCjzXj+qvpmw3ZZHi8JwXei8ZZBLTSFBki8Z7n
          sH9BBH38/SzUmAN4QHSPy1gjqm00OAE8NaYDkh/bzE4d7mLGGMWp/WE3KPSu82HF
          kPe6XoSbiLm/kxk32T0=
          -----END CERTIFICATE-----
        encoding: b64
    path: /etc/kubernetes/pki/ca.crt
  - content:
      inline:
        data: |
          [Install]
          WantedBy=multi-user.target

          [Unit]
          Requires=network-online.target
          After=network-online.target

          [Service]
          Type=oneshot
          RemainAfterExit=true
          EnvironmentFile=-/etc/environment
          ExecStart=/opt/bin/supervise.sh /opt/bin/setup
        encoding: b64
    path: /etc/systemd/system/setup.service
    permissions: 420
  - content:
      inline:
        data: |
          export PATH="/opt/bin:$PATH"
        encoding: b64
    path: /etc/profile.d/opt-bin-path.sh
    permissions: 420
  - content:
      inline:
        data: |
          apiVersion: kubelet.config.k8s.io/v1beta1
          kind: KubeletConfiguration
          authentication:
            anonymous:
              enabled: false
            webhook:
              enabled: true
            x509:
              clientCAFile: /etc/kubernetes/pki/ca.crt
          authorization:
            mode: Webhook
          cgroupDriver: systemd
          clusterDNS:
          - "10.0.0.0"
          clusterDomain: cluster.local
          containerLogMaxSize: 100Mi
          containerLogMaxFiles: 5
          featureGates:
            GracefulNodeShutdown: true
            IdentifyPodOS: false
          protectKernelDefaults: true
          readOnlyPort: 0
          rotateCertificates: true
          serverTLSBootstrap: true
          staticPodPath: /etc/kubernetes/manifests
          kubeReserved:
            cpu: 200m
            ephemeral-storage: 1Gi
            memory: 200Mi
          systemReserved:
            cpu: 200m
            ephemeral-storage: 1Gi
            memory: 200Mi
          evictionHard:
            imagefs.available: 15%
            memory.available: 100Mi
            nodefs.available: 10%
            nodefs.inodesFree: 5%
          tlsCipherSuites:
          - TLS_AES_128_GCM_SHA256
          - TLS_AES_256_GCM_SHA384
          - TLS_CHACHA20_POLY1305_SHA256
          - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
          - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
          - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
          - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
          volumePluginDir: /var/lib/kubelet/volumeplugins
        encoding: b64
    path: /etc/kubernetes/kubelet.conf
  - content:
      inline:
        data: |
          [Unit]
          Requires=kubelet.service
          After=kubelet.service

          [Service]
          ExecStart=/opt/bin/health-monitor.sh kubelet

          [Install]
          WantedBy=multi-user.target
        encoding: b64
    path: /etc/systemd/system/kubelet-healthcheck.service
    permissions: 420
  - content:
      inline:
        data: |
          runtime-endpoint: unix:///run/containerd/containerd.sock
    path: /etc/crictl.yaml
  - content:
      inline:
        data: |
          [Service]
          Restart=always
          EnvironmentFile=-/etc/environment
    path: /etc/systemd/system/containerd.service.d/environment.conf
  - content:
      inline:
        data: |+
          version = 2

          [metrics]
          address = "127.0.0.1:1338"

          [plugins]
          [plugins."io.containerd.grpc.v1.cri"]
          sandbox_image = "192.168.100.100:5000/kubernetes/pause:v3.1"
          [plugins."io.containerd.grpc.v1.cri".containerd]
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
          runtime_type = "io.containerd.runc.v2"
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
          SystemdCgroup = true
          [plugins."io.containerd.grpc.v1.cri".registry]
          [plugins."io.containerd.grpc.v1.cri".registry.mirrors]
          [plugins."io.containerd.grpc.v1.cri".registry.mirrors."docker.io"]
          endpoint = ["https://registry.docker-cn.com"]
          [plugins."io.containerd.grpc.v1.cri".registry.configs]
          [plugins."io.containerd.grpc.v1.cri".registry.configs."10.0.0.1:5000"]
          [plugins."io.containerd.grpc.v1.cri".registry.configs."10.0.0.1:5000".tls]
          insecure_skip_verify = true
          [plugins."io.containerd.grpc.v1.cri".registry.configs."192.168.100.100:5000"]
          [plugins."io.containerd.grpc.v1.cri".registry.configs."192.168.100.100:5000".tls]
          insecure_skip_verify = true

        encoding: b64
    path: /etc/containerd/config.toml
    permissions: 384
  modules:
    bootcmd:
    - modprobe ip_tables
  osName: rhel
  osVersion: "8.4"
  userSSHKeys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDdOIhYmzCK5DSVLu3c
