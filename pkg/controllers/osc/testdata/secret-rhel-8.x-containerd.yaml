apiVersion: v1
data:
  cloud-config: 
immutable: true
kind: Secret
metadata:
  creationTimestamp: null
  name: osp-rhel-aws-kube-system-osc-provisioning
  namespace: cloud-init-settings
  resourceVersion: "1"
type: Opaque
