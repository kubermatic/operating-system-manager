apiVersion: operatingsystemmanager.k8c.io/v1alpha1
kind: OperatingSystemConfig
metadata:
  creationTimestamp: null
  name: flatcar-aws-docker-osc-provisioning
  namespace: cloud-init-settings
  resourceVersion: "1"
spec:
  cloudProvider:
    name: aws
    spec:
      cloud-config-key: cloud-config-value
  files:
  - content:
      inline:
        data: |
          [Journal]
          SystemMaxUse=5G
    path: /etc/systemd/journald.conf.d/max_disk_use.conf
  - content:
      inline:
        data: |
          #!/usr/bin/env bash
          set -euo pipefail

          modprobe ip_vs
          modprobe ip_vs_rr
          modprobe ip_vs_wrr
          modprobe ip_vs_sh

          if modinfo nf_conntrack_ipv4 &> /dev/null; then
            modprobe nf_conntrack_ipv4
          else
            modprobe nf_conntrack
          fi
    path: /opt/load-kernel-modules.sh
    permissions: 493
  - content:
      inline:
        data: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          kernel.panic_on_oops = 1
          kernel.panic = 10
          net.ipv4.ip_forward = 1
          vm.overcommit_memory = 1
          fs.inotify.max_user_watches = 1048576
    path: /etc/sysctl.d/k8s.conf
  - content:
      inline:
        data: |
          #!/usr/bin/env bash
          echodate() {
            echo "[$(date -Is)]" "$@"
          }

          # get the default interface IP address
          DEFAULT_IFC_IP=$(ip -o  route get 1 | grep -oP "src \K\S+")

          if [ -z "${DEFAULT_IFC_IP}" ]
          then
            echodate "Failed to get IP address for the default route interface"
            exit 1
          fi

          # get the full hostname
          FULL_HOSTNAME=$(hostname -f)
          # if /etc/hostname is not empty then use the hostname from there
          if [ -s /etc/hostname ]; then
              FULL_HOSTNAME=$(cat /etc/hostname)
          fi

          # write the nodeip_env file
          # we need the line below because flatcar has the same string "coreos" in that file
          if grep -q coreos /etc/os-release
          then
            echo -e "KUBELET_NODE_IP=${DEFAULT_IFC_IP}\nKUBELET_HOSTNAME=${FULL_HOSTNAME}" > /etc/kubernetes/nodeip.conf
          elif [ ! -d /etc/systemd/system/kubelet.service.d ]
          then
            echodate "Can't find kubelet service extras directory"
            exit 1
          else
            echo -e "[Service]\nEnvironment=\"KUBELET_NODE_IP=${DEFAULT_IFC_IP}\"\nEnvironment=\"KUBELET_HOSTNAME=${FULL_HOSTNAME}\"" > /etc/systemd/system/kubelet.service.d/nodeip.conf
          fi
    path: /opt/bin/setup_net_env.sh
    permissions: 493
  - content:
      inline:
        data: |
          #!/usr/bin/env bash
          set -xeuo pipefail
    path: /opt/bin/configure_static_network.sh
    permissions: 493
  - content:
      inline:
        data: |
          #!/usr/bin/env bash
          set -xeuo pipefail
          opt_bin=/opt/bin
          usr_local_bin=/usr/local/bin
          cni_bin_dir=/opt/cni/bin
          mkdir -p /etc/cni/net.d /etc/kubernetes/dynamic-config-dir /etc/kubernetes/manifests "$opt_bin" "$cni_bin_dir"
          arch=${HOST_ARCH-}
          if [ -z "$arch" ]
          then
          case $(uname -m) in
          x86_64)
              arch="amd64"
              ;;
          aarch64)
              arch="arm64"
              ;;
          *)
              echo "unsupported CPU architecture, exiting"
              exit 1
              ;;
          esac
          fi
          CNI_VERSION="${CNI_VERSION:-v0.8.7}"
          cni_base_url="https://github.com/containernetworking/plugins/releases/download/$CNI_VERSION"
          cni_filename="cni-plugins-linux-$arch-$CNI_VERSION.tgz"
          curl -Lfo "$cni_bin_dir/$cni_filename" "$cni_base_url/$cni_filename"
          cni_sum=$(curl -Lf "$cni_base_url/$cni_filename.sha256")
          cd "$cni_bin_dir"
          sha256sum -c <<<"$cni_sum"
          tar xvf "$cni_filename"
          rm -f "$cni_filename"
          cd -
          KUBE_VERSION="${KUBE_VERSION:-v1.22.1}"
          kube_dir="$opt_bin/kubernetes-$KUBE_VERSION"
          kube_base_url="https://storage.googleapis.com/kubernetes-release/release/$KUBE_VERSION/bin/linux/$arch"
          kube_sum_file="$kube_dir/sha256"
          mkdir -p "$kube_dir"
          : >"$kube_sum_file"

          for bin in kubelet kubeadm kubectl; do
              curl -Lfo "$kube_dir/$bin" "$kube_base_url/$bin"
              chmod +x "$kube_dir/$bin"
              sum=$(curl -Lf "$kube_base_url/$bin.sha256")
              echo "$sum  $kube_dir/$bin" >>"$kube_sum_file"
          done
          sha256sum -c "$kube_sum_file"

          for bin in kubelet kubeadm kubectl; do
              ln -sf "$kube_dir/$bin" "$opt_bin"/$bin
          done

          if [[ ! -x /opt/bin/health-monitor.sh ]]; then
              curl -Lfo /opt/bin/health-monitor.sh https://raw.githubusercontent.com/kubermatic/machine-controller/7967a0af2b75f29ad2ab227eeaa26ea7b0f2fbde/pkg/userdata/scripts/health-monitor.sh
              chmod +x /opt/bin/health-monitor.sh
          fi

          systemctl disable download-script.service
    path: /opt/bin/download.sh
    permissions: 493
  - content:
      inline:
        data: |
          #!/bin/bash
          set -xeuo pipefail
          cat << EOF | tee /etc/polkit-1/rules.d/60-noreboot_norestart.rules
          polkit.addRule(function(action, subject) {
            if (action.id == "org.freedesktop.login1.reboot" ||
                action.id == "org.freedesktop.login1.reboot-multiple-sessions") {
                if (subject.user == "core") {
                    return polkit.Result.YES;
                } else {
                    return polkit.Result.AUTH_ADMIN;
                }
            }
          });
          EOF
          systemctl stop containerd
          systemctl disable containerd

          systemctl enable --now kubelet
          systemctl enable --now --no-block kubelet-healthcheck.service
          systemctl disable setup.service
    path: /opt/bin/setup
    permissions: 493
  - content:
      inline:
        data: |
          -----BEGIN CERTIFICATE-----
          MIIEWjCCA0KgAwIBAgIJALfRlWsI8YQHMA0GCSqGSIb3DQEBBQUAMHsxCzAJBgNV
          BAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzEUMBIG
          A1UEChMLQnJhZGZpdHppbmMxEjAQBgNVBAMTCWxvY2FsaG9zdDEdMBsGCSqGSIb3
          DQEJARYOYnJhZEBkYW5nYS5jb20wHhcNMTQwNzE1MjA0NjA1WhcNMTcwNTA0MjA0
          NjA1WjB7MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExFjAUBgNVBAcTDVNhbiBG
          cmFuY2lzY28xFDASBgNVBAoTC0JyYWRmaXR6aW5jMRIwEAYDVQQDEwlsb2NhbGhv
          c3QxHTAbBgkqhkiG9w0BCQEWDmJyYWRAZGFuZ2EuY29tMIIBIjANBgkqhkiG9w0B
          AQEFAAOCAQ8AMIIBCgKCAQEAt5fAjp4fTcekWUTfzsp0kyih1OYbsGL0KX1eRbSS
          R8Od0+9Q62Hyny+GFwMTb4A/KU8mssoHvcceSAAbwfbxFK/+s51TobqUnORZrOoT
          ZjkUygbyXDSK99YBbcR1Pip8vwMTm4XKuLtCigeBBdjjAQdgUO28LENGlsMnmeYk
          JfODVGnVmr5Ltb9ANA8IKyTfsnHJ4iOCS/PlPbUj2q7YnoVLposUBMlgUb/CykX3
          mOoLb4yJJQyA/iST6ZxiIEj36D4yWZ5lg7YJl+UiiBQHGCnPdGyipqV06ex0heYW
          caiW8LWZSUQ93jQ+WVCH8hT7DQO1dmsvUmXlq/JeAlwQ/QIDAQABo4HgMIHdMB0G
          A1UdDgQWBBRcAROthS4P4U7vTfjByC569R7E6DCBrQYDVR0jBIGlMIGigBRcAROt
          hS4P4U7vTfjByC569R7E6KF/pH0wezELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNB
          MRYwFAYDVQQHEw1TYW4gRnJhbmNpc2NvMRQwEgYDVQQKEwtCcmFkZml0emluYzES
          MBAGA1UEAxMJbG9jYWxob3N0MR0wGwYJKoZIhvcNAQkBFg5icmFkQGRhbmdhLmNv
          bYIJALfRlWsI8YQHMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEFBQADggEBAG6h
          U9f9sNH0/6oBbGGy2EVU0UgITUQIrFWo9rFkrW5k/XkDjQm+3lzjT0iGR4IxE/Ao
          eU6sQhua7wrWeFEn47GL98lnCsJdD7oZNhFmQ95Tb/LnDUjs5Yj9brP0NWzXfYU4
          UK2ZnINJRcJpB8iRCaCxE8DdcUF0XqIEq6pA272snoLmiXLMvNl3kYEdm+je6voD
          58SNVEUsztzQyXmJEhCpwVI0A6QCjzXj+qvpmw3ZZHi8JwXei8ZZBLTSFBki8Z7n
          sH9BBH38/SzUmAN4QHSPy1gjqm00OAE8NaYDkh/bzE4d7mLGGMWp/WE3KPSu82HF
          kPe6XoSbiLm/kxk32T0=
          -----END CERTIFICATE-----
    path: /etc/kubernetes/pki/ca.crt
  - content:
      inline:
        data: |
          [Unit]
          After=docker.service
          Requires=docker.service

          Description=kubelet: The Kubernetes Node Agent
          Documentation=https://kubernetes.io/docs/home/

          [Service]
          Restart=always
          StartLimitInterval=0
          RestartSec=10
          CPUAccounting=true
          MemoryAccounting=true

          Environment="PATH=/opt/bin:/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin/"
          EnvironmentFile=-/etc/environment
          EnvironmentFile=/etc/kubernetes/nodeip.conf

          ExecStartPre=/bin/bash /opt/load-kernel-modules.sh
          ExecStartPre=/bin/bash /opt/bin/setup_net_env.sh
          ExecStart=/opt/bin/kubelet $KUBELET_EXTRA_ARGS \
            --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf \
            --kubeconfig=/var/lib/kubelet/kubeconfig \
            --config=/etc/kubernetes/kubelet.conf \
            --network-plugin=cni \
            --cert-dir=/etc/kubernetes/pki \
            --cloud-provider=aws \
            --cloud-config=/etc/kubernetes/cloud-config \
            --dynamic-config-dir=/etc/kubernetes/dynamic-config-dir \
            --feature-gates=DynamicKubeletConfig=true \
            --exit-on-lock-contention \
            --lock-file=/tmp/kubelet.lock \
            --container-runtime=docker \
            --container-runtime-endpoint=unix:///var/run/dockershim.sock \
            --node-ip ${KUBELET_NODE_IP}

          [Install]
          WantedBy=multi-user.target
    path: /etc/systemd/system/kubelet.service
  - content:
      inline:
        data: |+
          [global]
          Zone=""
          VPC=""
          SubnetID=""

    path: /etc/kubernetes/cloud-config
    permissions: 256
  - content:
      inline:
        data: |
          apiVersion: kubelet.config.k8s.io/v1beta1
          kind: KubeletConfiguration
          authentication:
            anonymous:
              enabled: false
            webhook:
              enabled: true
            x509:
              clientCAFile: /etc/kubernetes/pki/ca.crt
          authorization:
            mode: Webhook
          cgroupDriver: systemd
          clusterDNS:
          - "10.0.0.0"
          clusterDomain: cluster.local
          featureGates:
            GracefulNodeShutdown: true
            IdentifyPodOS: false
          protectKernelDefaults: true
          readOnlyPort: 0
          rotateCertificates: true
          serverTLSBootstrap: true
          staticPodPath: /etc/kubernetes/manifests
          kubeReserved:
            cpu: 200m
            ephemeral-storage: 1Gi
            memory: 200Mi
          systemReserved:
            cpu: 200m
            ephemeral-storage: 1Gi
            memory: 200Mi
          evictionHard:
            imagefs.available: 15%
            memory.available: 100Mi
            nodefs.available: 10%
            nodefs.inodesFree: 5%
          tlsCipherSuites:
          - TLS_AES_128_GCM_SHA256
          - TLS_AES_256_GCM_SHA384
          - TLS_CHACHA20_POLY1305_SHA256
          - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
          - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
          - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
          - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
          - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
          volumePluginDir: /var/lib/kubelet/volumeplugins
    path: /etc/kubernetes/kubelet.conf
  - content:
      inline:
        data: |
          [Unit]
          Requires=kubelet.service
          After=kubelet.service

          [Service]
          ExecStart=/opt/bin/health-monitor.sh kubelet

          [Install]
          WantedBy=multi-user.target
    path: /etc/systemd/system/kubelet-healthcheck.service
    permissions: 420
  - content:
      inline:
        data: |
          1
    path: /proc/sys/kernel/panic_on_oops
    permissions: 420
  - content:
      inline:
        data: |
          10
    path: /proc/sys/kernel/panic
    permissions: 420
  - content:
      inline:
        data: |
          1
    path: /proc/sys/vm/overcommit_memory
    permissions: 420
  - content:
      inline:
        data: |
          # Use most defaults for sshd configuration.
          Subsystem sftp internal-sftp
          ClientAliveInterval 180
          UseDNS no
          UsePAM yes
          PrintLastLog no # handled by PAM
          PrintMotd no # handled by PAM
          PasswordAuthentication no
          ChallengeResponseAuthentication no
    path: /etc/ssh/sshd_config
    permissions: 384
  - content:
      inline:
        data: '{"exec-opts":["native.cgroupdriver=systemd"],"storage-driver":"overlay2","log-driver":"json-file","log-opts":{"max-file":"5","max-size":"100m"}}'
    path: /etc/docker/daemon.json
    permissions: 420
  - content:
      inline:
        data: |-
          [Service]
          EnvironmentFile=-/etc/environment
    path: /etc/systemd/system/docker.service.d/10-custom.conf
    permissions: 420
  osName: flatcar
  osVersion: 2983.2.0
  units:
  - content: |
      [Install]
      WantedBy=multi-user.target

      [Unit]
      Requires=download-script.service
      Requires=nodeip.service
      After=download-script.service
      After=nodeip.service

      [Service]
      Type=oneshot
      RemainAfterExit=true
      EnvironmentFile=-/etc/environment
      ExecStart=/opt/bin/setup
    enable: true
    name: setup.service
  - content: |
      [Install]
      WantedBy=multi-user.target

      [Unit]
      Requires=network-online.target
      After=network-online.target

      [Service]
      Type=oneshot
      RemainAfterExit=true
      EnvironmentFile=-/etc/environment
      ExecStart=/opt/bin/download.sh
    enable: true
    name: download-script.service
  - content: |
      [Unit]
      Description=Setup Kubelet Node IP Env
      Requires=network-online.target
      After=network-online.target

      [Service]
      ExecStart=/opt/bin/setup_net_env.sh
      RemainAfterExit=yes
      Type=oneshot
      [Install]
      WantedBy=multi-user.target
    enable: true
    name: nodeip.service
  - content: |
      [Unit]
      Description=Setup Static Networking
      Requires=network-online.target
      After=network-online.target

      [Service]
      ExecStart=/opt/bin/configure_static_network.sh
      RemainAfterExit=yes
      Type=oneshot
      [Install]
      WantedBy=multi-user.target
    enable: true
    name: static-network-script.service
  userSSHKeys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDdOIhYmzCK5DSVLu3c
