apiVersion: v1
data:
  cloud-config: I2Nsb3VkLWNvbmZpZwoKc3NoX3B3YXV0aDogZmFsc2UKCnNzaF9hdXRob3JpemVkX2tleXM6Ci0gJ3NzaC1yc2EgQUFBQUIzTnphQzF5YzJFQUFBQURBUUFCQUFBQ0FRRGRPSWhZbXpDSzVEU1ZMdTNjJwp3cml0ZV9maWxlczoKLSBwYXRoOiAnL29wdC9iaW4vaGVhbHRoLW1vbml0b3Iuc2gnCiAgcGVybWlzc2lvbnM6ICcwNzU1JwogIGVuY29kaW5nOiAnYjY0JwogIGNvbnRlbnQ6IHwtCiAgICBJeUV2ZFhOeUwySnBiaTlsYm5ZZ1ltRnphQW9LSXlCRGIzQjVjbWxuYUhRZ01qQXhOaUJVYUdVZ1MzVmlaWEp1WlhSbGN5QkJkWFJvYjNKekxnb2pDaU1nVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUVGd1lXTm9aU0JNYVdObGJuTmxMQ0JXWlhKemFXOXVJREl1TUNBb2RHaGxJQ0pNYVdObGJuTmxJaWs3Q2lNZ2VXOTFJRzFoZVNCdWIzUWdkWE5sSUhSb2FYTWdabWxzWlNCbGVHTmxjSFFnYVc0Z1kyOXRjR3hwWVc1alpTQjNhWFJvSUhSb1pTQk1hV05sYm5ObExnb2pJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEFvakNpTWdJQ0FnSUdoMGRIQTZMeTkzZDNjdVlYQmhZMmhsTG05eVp5OXNhV05sYm5ObGN5OU1TVU5GVGxORkxUSXVNQW9qQ2lNZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MQ0J6YjJaMGQyRnlaUW9qSUdScGMzUnlhV0oxZEdWa0lIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObElHbHpJR1JwYzNSeWFXSjFkR1ZrSUc5dUlHRnVJQ0pCVXlCSlV5SWdRa0ZUU1ZNc0NpTWdWMGxVU0U5VlZDQlhRVkpTUVU1VVNVVlRJRTlTSUVOUFRrUkpWRWxQVGxNZ1QwWWdRVTVaSUV0SlRrUXNJR1ZwZEdobGNpQmxlSEJ5WlhOeklHOXlJR2x0Y0d4cFpXUXVDaU1nVTJWbElIUm9aU0JNYVdObGJuTmxJR1p2Y2lCMGFHVWdjM0JsWTJsbWFXTWdiR0Z1WjNWaFoyVWdaMjkyWlhKdWFXNW5JSEJsY20xcGMzTnBiMjV6SUdGdVpBb2pJR3hwYldsMFlYUnBiMjV6SUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sTGdvS0l5QlVhR2x6SUhOamNtbHdkQ0JwY3lCbWIzSWdiV0Z6ZEdWeUlHRnVaQ0J1YjJSbElHbHVjM1JoYm1ObElHaGxZV3gwYUNCdGIyNXBkRzl5YVc1bkxDQjNhR2xqYUNCcGN3b2pJSEJoWTJ0bFpDQnBiaUJyZFdKbExXMWhibWxtWlhOMElIUmhjbUpoYkd3dUlFbDBJR2x6SUdWNFpXTjFkR1ZrSUhSb2NtOTFaMmdnWVNCemVYTjBaVzFrSUhObGNuWnBZMlVLSXlCcGJpQmpiSFZ6ZEdWeUwyZGpaUzluWTJrdlBHMWhjM1JsY2k5dWIyUmxQaTU1WVcxc0xpQlVhR1VnWlc1MklIWmhjbWxoWW14bGN5QmpiMjFsSUdaeWIyMGdZVzRnWlc1MkNpTWdabWxzWlNCd2NtOTJhV1JsWkNCaWVTQjBhR1VnYzNsemRHVnRaQ0J6WlhKMmFXTmxMZ29LSXlCVWFHbHpJSE5qY21sd2RDQnBjeUJoSUhOc2FXZG9kR3g1SUdGa2FuVnpkR1ZrSUhabGNuTnBiMjRnYjJZS0l5Qm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZhM1ZpWlhKdVpYUmxjeTlyZFdKbGNtNWxkR1Z6TDJKc2IySXZaVEZoTVdGaE1qRXhNakkwWm1Oa09XSXlNVE0wTWpCaU9EQmlNbUZsTmpnd05qWTVOamd6WkM5amJIVnpkR1Z5TDJkalpTOW5ZMmt2YUdWaGJIUm9MVzF2Ym1sMGIzSXVjMmdLSXlCQlpHcDFjM1J0Wlc1MGN5QmhjbVU2Q2lNZ0tpQkxkV0psYkdWMElHaGxZV3gwYUNCd2IzSjBJR2x6SURFd01qUTRJRzV2ZENBeE1ESTFOUW9qSUNvZ1VtVnRiM1poYkNCdlppQmhiR3dnWVd4c0lISmxabVZ5Wlc1alpYTWdkRzhnZEdobElFdFZRa1ZmUlU1V0lHWnBiR1VLQ25ObGRDQXRieUJ1YjNWdWMyVjBDbk5sZENBdGJ5QndhWEJsWm1GcGJBb0tJeUJYWlNCemFXMXdiSGtnYTJsc2JDQjBhR1VnY0hKdlkyVnpjeUIzYUdWdUlIUm9aWEpsSUdseklHRWdabUZwYkhWeVpTNGdRVzV2ZEdobGNpQnplWE4wWlcxa0lITmxjblpwWTJVZ2QybHNiQW9qSUdGMWRHOXRZWFJwWTJGc2JIa2djbVZ6ZEdGeWRDQjBhR1VnY0hKdlkyVnpjeTRLWm5WdVkzUnBiMjRnWTI5dWRHRnBibVZ5WDNKMWJuUnBiV1ZmYlc5dWFYUnZjbWx1WnlncElIc0tJQ0JzYjJOaGJDQXRjaUJ0WVhoZllYUjBaVzF3ZEhNOU5Rb2dJR3h2WTJGc0lHRjBkR1Z0Y0hROU1Rb2dJR3h2WTJGc0lDMXlJR052Ym5SaGFXNWxjbDl5ZFc1MGFXMWxYMjVoYldVOUlpUjdRMDlPVkVGSlRrVlNYMUpWVGxSSlRVVmZUa0ZOUlRvdFpHOWphMlZ5ZlNJS0lDQWpJRmRsSUhOMGFXeHNJRzVsWldRZ2RHOGdkWE5sSUNka2IyTnJaWElnY0hNbklIZG9aVzRnWTI5dWRHRnBibVZ5SUhKMWJuUnBiV1VnYVhNZ0ltUnZZMnRsY2lJdUlGUm9hWE1nYVhNZ1ltVmpZWFZ6WlFvZ0lDTWdaRzlqYTJWeWMyaHBiU0JwY3lCemRHbHNiQ0J3WVhKMElHOW1JR3QxWW1Wc1pYUWdkRzlrWVhrdUlGZG9aVzRnYTNWaVpXeGxkQ0JwY3lCa2IzZHVMQ0JqY21samRHd2djRzlrY3dvZ0lDTWdkMmxzYkNCaGJITnZJR1poYVd3c0lHRnVaQ0JrYjJOclpYSWdkMmxzYkNCaVpTQnJhV3hzWldRdUlGUm9hWE1nYVhNZ2RXNWtaWE5wY21GaWJHVWdaWE53WldOcFlXeHNlU0IzYUdWdUNpQWdJeUJrYjJOclpYSWdiR2wyWlNCeVpYTjBiM0psSUdseklHUnBjMkZpYkdWa0xnb2dJR3h2WTJGc0lHaGxZV3gwYUdOb1pXTnJYMk52YlcxaGJtUTlJbVJ2WTJ0bGNpQndjeUlLSUNCcFppQmJXeUFpSkh0RFQwNVVRVWxPUlZKZlVsVk9WRWxOUlRvdFpHOWphMlZ5ZlNJZ0lUMGdJbVJ2WTJ0bGNpSWdYVjA3SUhSb1pXNEtJQ0FnSUdobFlXeDBhR05vWldOclgyTnZiVzFoYm1ROUltTnlhV04wYkNCd2IyUnpJZ29nSUdacENpQWdJeUJEYjI1MFlXbHVaWElnY25WdWRHbHRaU0J6ZEdGeWRIVndJSFJoYTJWeklIUnBiV1V1SUUxaGEyVWdhVzVwZEdsaGJDQmhkSFJsYlhCMGN5QmlaV1p2Y21VZ2MzUmhjblJwYm1jS0lDQWpJR3RwYkd4cGJtY2dkR2hsSUdOdmJuUmhhVzVsY2lCeWRXNTBhVzFsTGdvZ0lIVnVkR2xzSUhScGJXVnZkWFFnTmpBZ0pIdG9aV0ZzZEdoamFHVmphMTlqYjIxdFlXNWtmU0ErSUM5a1pYWXZiblZzYkRzZ1pHOEtJQ0FnSUdsbUlDZ29ZWFIwWlcxd2RDQTlQU0J0WVhoZllYUjBaVzF3ZEhNcEtUc2dkR2hsYmdvZ0lDQWdJQ0JsWTJodklDSk5ZWGdnWVhSMFpXMXdkQ0FrZTIxaGVGOWhkSFJsYlhCMGMzMGdjbVZoWTJobFpDRWdVSEp2WTJWbFpHbHVaeUIwYnlCdGIyNXBkRzl5SUdOdmJuUmhhVzVsY2lCeWRXNTBhVzFsSUdobFlXeDBhR2x1WlhOekxpSUtJQ0FnSUNBZ1luSmxZV3NLSUNBZ0lHWnBDaUFnSUNCbFkyaHZJQ0lrWVhSMFpXMXdkQ0JwYm1sMGFXRnNJR0YwZEdWdGNIUWdYQ0lrZTJobFlXeDBhR05vWldOclgyTnZiVzFoYm1SOVhDSWhJRlJ5ZVdsdVp5QmhaMkZwYmlCcGJpQWtZWFIwWlcxd2RDQnpaV052Ym1SekxpNHVJZ29nSUNBZ2MyeGxaWEFnSWlRb0tESWdLaW9nWVhSMFpXMXdkQ3NyS1NraUNpQWdaRzl1WlFvZ0lIZG9hV3hsSUhSeWRXVTdJR1J2Q2lBZ0lDQnBaaUFoSUhScGJXVnZkWFFnTmpBZ0pIdG9aV0ZzZEdoamFHVmphMTlqYjIxdFlXNWtmU0ErSUM5a1pYWXZiblZzYkRzZ2RHaGxiZ29nSUNBZ0lDQmxZMmh2SUNKRGIyNTBZV2x1WlhJZ2NuVnVkR2x0WlNBa2UyTnZiblJoYVc1bGNsOXlkVzUwYVcxbFgyNWhiV1Y5SUdaaGFXeGxaQ0VpQ2lBZ0lDQWdJR2xtSUZ0YklDSWtZMjl1ZEdGcGJtVnlYM0oxYm5ScGJXVmZibUZ0WlNJZ1BUMGdJbVJ2WTJ0bGNpSWdYVjA3SUhSb1pXNEtJQ0FnSUNBZ0lDQWpJRVIxYlhBZ2MzUmhZMnNnYjJZZ1pHOWphMlZ5SUdSaFpXMXZiaUJtYjNJZ2FXNTJaWE4wYVdkaGRHbHZiaTRLSUNBZ0lDQWdJQ0FqSUV4dlp5Qm1hV3hsSUc1aGJXVWdiRzl2YTNNZ2JHbHJaU0JuYjNKdmRYUnBibVV0YzNSaFkydHpMVlJKVFVWVFZFRk5VQ0JoYm1RZ2QybHNiQ0JpWlNCellYWmxaQ0IwYndvZ0lDQWdJQ0FnSUNNZ2RHaGxJR1Y0WldNZ2NtOXZkQ0JrYVhKbFkzUnZjbmtzSUhkb2FXTm9JR2x6SUM5MllYSXZjblZ1TDJSdlkydGxjaThnYjI0Z1ZXSjFiblIxSUdGdVpDQkRUMU11Q2lBZ0lDQWdJQ0FnY0d0cGJHd2dMVk5KUjFWVFVqRWdaRzlqYTJWeVpBb2dJQ0FnSUNCbWFRb2dJQ0FnSUNCemVYTjBaVzFqZEd3Z2EybHNiQ0F0TFd0cGJHd3RkMmh2UFcxaGFXNGdJaVI3WTI5dWRHRnBibVZ5WDNKMWJuUnBiV1ZmYm1GdFpYMGlDaUFnSUNBZ0lDTWdWMkZwZENCbWIzSWdZU0IzYUdsc1pTd2dZWE1nZDJVZ1pHOXVKM1FnZDJGdWRDQjBieUJyYVd4c0lHbDBJR0ZuWVdsdUlHSmxabTl5WlNCcGRDQnBjeUJ5WldGc2JIa2dkWEF1Q2lBZ0lDQWdJSE5zWldWd0lERXlNQW9nSUNBZ1pXeHpaUW9nSUNBZ0lDQnpiR1ZsY0NBaUpIdFRURVZGVUY5VFJVTlBUa1JUZlNJS0lDQWdJR1pwQ2lBZ1pHOXVaUXA5Q2dwbWRXNWpkR2x2YmlCcmRXSmxiR1YwWDIxdmJtbDBiM0pwYm1jb0tTQjdDaUFnWldOb2J5QWlWMkZwZENCbWIzSWdNaUJ0YVc1MWRHVnpJR1p2Y2lCcmRXSmxiR1YwSUhSdklHSmxJR1oxYm1OMGFXOXVZV3dpQ2lBZ2MyeGxaWEFnTVRJd0NpQWdiRzlqWVd3Z0xYSWdiV0Y0WDNObFkyOXVaSE05TVRBS0lDQnNiMk5oYkNCdmRYUndkWFE5SWlJS0lDQjNhR2xzWlNCMGNuVmxPeUJrYndvZ0lDQWdiRzlqWVd3Z1ptRnBiR1ZrUFdaaGJITmxDZ29nSUNBZ2FXWWdhbTkxY201aGJHTjBiQ0F0ZFNCcmRXSmxiR1YwSUMxdUlERWdmQ0JuY21Wd0lDMXhJQ0oxYzJVZ2IyWWdZMnh2YzJWa0lHNWxkSGR2Y21zZ1kyOXVibVZqZEdsdmJpSTdJSFJvWlc0S0lDQWdJQ0FnWm1GcGJHVmtQWFJ5ZFdVS0lDQWdJQ0FnWldOb2J5QWlTM1ZpWld4bGRDQnpkRzl3Y0dWa0lIQnZjM1JwYm1jZ2JtOWtaU0J6ZEdGMGRYTXVJRkpsYzNSaGNuUnBibWNpQ2lBZ0lDQmxiR2xtSUNFZ2IzVjBjSFYwUFNRb1kzVnliQ0F0YlNBaUpIdHRZWGhmYzJWamIyNWtjMzBpSUMxbUlDMXpJQzFUSUdoMGRIQTZMeTh4TWpjdU1DNHdMakU2TVRBeU5EZ3ZhR1ZoYkhSb2VpQXlQaVl4S1RzZ2RHaGxiZ29nSUNBZ0lDQm1ZV2xzWldROWRISjFaUW9nSUNBZ0lDQWpJRkJ5YVc1MElIUm9aU0J5WlhOd2IyNXpaU0JoYm1RdmIzSWdaWEp5YjNKekxnb2dJQ0FnSUNCbFkyaHZJQ0lrYjNWMGNIVjBJZ29nSUNBZ1pta0tDaUFnSUNCcFppQmJXeUFpSkdaaGFXeGxaQ0lnUFQwZ0luUnlkV1VpSUYxZE95QjBhR1Z1Q2lBZ0lDQWdJR1ZqYUc4Z0lrdDFZbVZzWlhRZ2FYTWdkVzVvWldGc2RHaDVJU0lLSUNBZ0lDQWdjM2x6ZEdWdFkzUnNJR3RwYkd3Z2EzVmlaV3hsZEFvZ0lDQWdJQ0FqSUZkaGFYUWdabTl5SUdFZ2QyaHBiR1VzSUdGeklIZGxJR1J2YmlkMElIZGhiblFnZEc4Z2EybHNiQ0JwZENCaFoyRnBiaUJpWldadmNtVWdhWFFnYVhNZ2NtVmhiR3g1SUhWd0xnb2dJQ0FnSUNCemJHVmxjQ0EyTUFvZ0lDQWdaV3h6WlFvZ0lDQWdJQ0J6YkdWbGNDQWlKSHRUVEVWRlVGOVRSVU5QVGtSVGZTSUtJQ0FnSUdacENpQWdaRzl1WlFwOUNnb2pJeU1qSXlNakl5TWpJeU1qSXlCTllXbHVJRVoxYm1OMGFXOXVJQ01qSXlNakl5TWpJeU1qSXlNakl5TUthV1lnVzFzZ0lpUWpJaUF0Ym1VZ01TQmRYVHNnZEdobGJnb2dJR1ZqYUc4Z0lsVnpZV2RsT2lCb1pXRnNkR2d0Ylc5dWFYUnZjaTV6YUNBOFkyOXVkR0ZwYm1WeUxYSjFiblJwYldVdmEzVmlaV3hsZEQ0aUNpQWdaWGhwZENBeENtWnBDZ3BUVEVWRlVGOVRSVU5QVGtSVFBURXdDbU52YlhCdmJtVnVkRDBrTVFwbFkyaHZJQ0pUZEdGeWRDQnJkV0psY201bGRHVnpJR2hsWVd4MGFDQnRiMjVwZEc5eWFXNW5JR1p2Y2lBa2UyTnZiWEJ2Ym1WdWRIMGlDbWxtSUZ0YklDSWtlMk52YlhCdmJtVnVkSDBpSUQwOUlDSmpiMjUwWVdsdVpYSXRjblZ1ZEdsdFpTSWdYVjA3SUhSb1pXNEtJQ0JqYjI1MFlXbHVaWEpmY25WdWRHbHRaVjl0YjI1cGRHOXlhVzVuQ21Wc2FXWWdXMXNnSWlSN1kyOXRjRzl1Wlc1MGZTSWdQVDBnSW10MVltVnNaWFFpSUYxZE95QjBhR1Z1Q2lBZ2EzVmlaV3hsZEY5dGIyNXBkRzl5YVc1bkNtVnNjMlVLSUNCbFkyaHZJQ0pJWldGc2RHZ2diVzl1YVhSdmNtbHVaeUJtYjNJZ1kyOXRjRzl1Wlc1MElDUjdZMjl0Y0c5dVpXNTBmU0JwY3lCdWIzUWdjM1Z3Y0c5eWRHVmtJU0lLWm1rSwoKLSBwYXRoOiAnL2V0Yy9zeXN0ZW1kL2pvdXJuYWxkLmNvbmYuZC9tYXhfZGlza191c2UuY29uZicKICBwZXJtaXNzaW9uczogJzA2NDQnCiAgZW5jb2Rpbmc6ICdiNjQnCiAgY29udGVudDogfC0KICAgIFcwcHZkWEp1WVd4ZENsTjVjM1JsYlUxaGVGVnpaVDAxUndvPQoKLSBwYXRoOiAnL29wdC9sb2FkLWtlcm5lbC1tb2R1bGVzLnNoJwogIHBlcm1pc3Npb25zOiAnMDc1NScKICBlbmNvZGluZzogJ2I2NCcKICBjb250ZW50OiB8LQogICAgSXlFdmRYTnlMMkpwYmk5bGJuWWdZbUZ6YUFwelpYUWdMV1YxYnlCd2FYQmxabUZwYkFvS2JXOWtjSEp2WW1VZ2FYQmZkbk1LYlc5a2NISnZZbVVnYVhCZmRuTmZjbklLYlc5a2NISnZZbVVnYVhCZmRuTmZkM0p5Q20xdlpIQnliMkpsSUdsd1gzWnpYM05vQ2dwcFppQnRiMlJwYm1adklHNW1YMk52Ym01MGNtRmphMTlwY0hZMElDWStJQzlrWlhZdmJuVnNiRHNnZEdobGJnb2dJRzF2WkhCeWIySmxJRzVtWDJOdmJtNTBjbUZqYTE5cGNIWTBDbVZzYzJVS0lDQnRiMlJ3Y205aVpTQnVabDlqYjI1dWRISmhZMnNLWm1rSwoKLSBwYXRoOiAnL2V0Yy9zeXNjdGwuZC9rOHMuY29uZicKICBwZXJtaXNzaW9uczogJzA2NDQnCiAgZW5jb2Rpbmc6ICdiNjQnCiAgY29udGVudDogfC0KICAgIGJtVjBMbUp5YVdSblpTNWljbWxrWjJVdGJtWXRZMkZzYkMxcGNEWjBZV0pzWlhNZ1BTQXhDbTVsZEM1aWNtbGtaMlV1WW5KcFpHZGxMVzVtTFdOaGJHd3RhWEIwWVdKc1pYTWdQU0F4Q210bGNtNWxiQzV3WVc1cFkxOXZibDl2YjNCeklEMGdNUXByWlhKdVpXd3VjR0Z1YVdNZ1BTQXhNQXB1WlhRdWFYQjJOQzVwY0Y5bWIzSjNZWEprSUQwZ01RcDJiUzV2ZG1WeVkyOXRiV2wwWDIxbGJXOXllU0E5SURFS1puTXVhVzV2ZEdsbWVTNXRZWGhmZFhObGNsOTNZWFJqYUdWeklEMGdNVEEwT0RVM05ncG1jeTVwYm05MGFXWjVMbTFoZUY5MWMyVnlYMmx1YzNSaGJtTmxjeUE5SURneE9USUsKCi0gcGF0aDogJy9ldGMvZGVmYXVsdC9ncnViLmQvNjAtc3dhcC1hY2NvdW50aW5nLmNmZycKICBwZXJtaXNzaW9uczogJzA2NDQnCiAgZW5jb2Rpbmc6ICdiNjQnCiAgY29udGVudDogfC0KICAgIEl5QkJaR1JsWkNCaWVTQnJkV0psY20xaGRHbGpJRzFoWTJocGJtVXRZMjl1ZEhKdmJHeGxjZ29qSUVWdVlXSnNaU0JqWjNKdmRYQnpJRzFsYlc5eWVTQmhibVFnYzNkaGNDQmhZMk52ZFc1MGFXNW5Da2RTVlVKZlEwMUVURWxPUlY5TVNVNVZXRDBpWTJkeWIzVndYMlZ1WVdKc1pUMXRaVzF2Y25rZ2MzZGhjR0ZqWTI5MWJuUTlNU0lLCgotIHBhdGg6ICcvb3B0L2Jpbi9zZXR1cCcKICBwZXJtaXNzaW9uczogJzA3NTUnCiAgZW5jb2Rpbmc6ICdiNjQnCiAgY29udGVudDogfC0KICAgIEl5RXZZbWx1TDJKaGMyZ0tjMlYwSUMxNFpYVnZJSEJwY0dWbVlXbHNDbWxtSUhONWMzUmxiV04wYkNCcGN5MWhZM1JwZG1VZ2RXWjNPeUIwYUdWdUlITjVjM1JsYldOMGJDQnpkRzl3SUhWbWR6c2dabWtLYzNsemRHVnRZM1JzSUcxaGMyc2dkV1ozQ25ONWMzUmxiV04wYkNCeVpYTjBZWEowSUhONWMzUmxiV1F0Ylc5a2RXeGxjeTFzYjJGa0xuTmxjblpwWTJVS2MzbHpZM1JzSUMwdGMzbHpkR1Z0Q2dvaklFOTJaWEp5YVdSbElHaHZjM1J1WVcxbElHbG1JQzlsZEdNdmJXRmphR2x1WlMxdVlXMWxJR1Y0YVhOMGN3cHBaaUJiSUMxNElDSWtLR052YlcxaGJtUWdMWFlnYUc5emRHNWhiV1ZqZEd3cElpQmRJQ1ltSUZzZ0xYTWdMMlYwWXk5dFlXTm9hVzVsTFc1aGJXVWdYVHNnZEdobGJnb2dJRzFoWTJocGJtVmZibUZ0WlQwa0tHTmhkQ0F2WlhSakwyMWhZMmhwYm1VdGJtRnRaU2tLSUNCb2IzTjBibUZ0WldOMGJDQnpaWFF0YUc5emRHNWhiV1VnSkh0dFlXTm9hVzVsWDI1aGJXVjlDbVpwQ2dwaGNIUXRaMlYwSUhWd1pHRjBaUW9LUkVWQ1NVRk9YMFpTVDA1VVJVNUVQVzV2Ym1sdWRHVnlZV04wYVhabElHRndkQzFuWlhRZ0xXOGdSSEJyWnpvNlQzQjBhVzl1Y3pvNlBTSXRMV1p2Y21ObExXTnZibVprWldZaUlDMXZJRVJ3YTJjNk9rOXdkR2x2Ym5NNk9qMGlMUzFtYjNKalpTMWpiMjVtYjJ4a0lpQnBibk4wWVd4c0lDMTVJRndLSUNCamRYSnNJRndLSUNCallTMWpaWEowYVdacFkyRjBaWE1nWEFvZ0lHTmxjR2d0WTI5dGJXOXVJRndLSUNCamFXWnpMWFYwYVd4eklGd0tJQ0JqYjI1dWRISmhZMnNnWEFvZ0lHVXlabk53Y205bmN5QmNDaUFnWldKMFlXSnNaWE1nWEFvZ0lHVjBhSFJ2YjJ3Z1hBb2dJR2RzZFhOMFpYSm1jeTFqYkdsbGJuUWdYQW9nSUdsd2RHRmliR1Z6SUZ3S0lDQnFjU0JjQ2lBZ2EyMXZaQ0JjQ2lBZ2IzQmxibk56YUMxamJHbGxiblFnWEFvZ0lHNW1jeTFqYjIxdGIyNGdYQW9nSUhOdlkyRjBJRndLSUNCMWRHbHNMV3hwYm5WNElGd0tJQ0JwY0haellXUnRDbUZ3ZEMxblpYUWdkWEJrWVhSbENtRndkQzFuWlhRZ2FXNXpkR0ZzYkNBdGVTQmhjSFF0ZEhKaGJuTndiM0owTFdoMGRIQnpJR05oTFdObGNuUnBabWxqWVhSbGN5QmpkWEpzSUhOdlpuUjNZWEpsTFhCeWIzQmxjblJwWlhNdFkyOXRiVzl1SUd4ellpMXlaV3hsWVhObENtTjFjbXdnTFdaelUwd2dhSFIwY0hNNkx5OWtiM2R1Ykc5aFpDNWtiMk5yWlhJdVkyOXRMMnhwYm5WNEwzVmlkVzUwZFM5bmNHY2dmQ0JoY0hRdGEyVjVJR0ZrWkNBdENtRmtaQzFoY0hRdGNtVndiM05wZEc5eWVTQWlaR1ZpSUdoMGRIQnpPaTh2Wkc5M2JteHZZV1F1Wkc5amEyVnlMbU52YlM5c2FXNTFlQzkxWW5WdWRIVWdKQ2hzYzJKZmNtVnNaV0Z6WlNBdFkzTXBJSE4wWVdKc1pTSUtDbUZ3ZEMxblpYUWdhVzV6ZEdGc2JDQXRMV0ZzYkc5M0xXUnZkMjVuY21Ga1pYTWdMWGtnWEFvZ0lDQWdZMjl1ZEdGcGJtVnlaQzVwYnoweExqVXFJRndLSUNBZ0lHUnZZMnRsY2kxalpTMWpiR2s5TlRveU1DNHhNQ29nWEFvZ0lDQWdaRzlqYTJWeUxXTmxQVFU2TWpBdU1UQXFDbUZ3ZEMxdFlYSnJJR2h2YkdRZ1pHOWphMlZ5TFdObEtpQmpiMjUwWVdsdVpYSmtMbWx2Q2dwemVYTjBaVzFqZEd3Z1pHRmxiVzl1TFhKbGJHOWhaQXB6ZVhOMFpXMWpkR3dnWlc1aFlteGxJQzB0Ym05M0lHUnZZMnRsY2dvS2IzQjBYMkpwYmowdmIzQjBMMkpwYmdwMWMzSmZiRzlqWVd4ZlltbHVQUzkxYzNJdmJHOWpZV3d2WW1sdUNtTnVhVjlpYVc1ZlpHbHlQUzl2Y0hRdlkyNXBMMkpwYmdwdGEyUnBjaUF0Y0NBdlpYUmpMMk51YVM5dVpYUXVaQ0F2WlhSakwydDFZbVZ5Ym1WMFpYTXZiV0Z1YVdabGMzUnpJQ0lrYjNCMFgySnBiaUlnSWlSamJtbGZZbWx1WDJScGNpSUtiV3RrYVhJZ0xYQWdMMlYwWXk5cmRXSmxjbTVsZEdWekwyUjVibUZ0YVdNdFkyOXVabWxuTFdScGNncGhjbU5vUFNSN1NFOVRWRjlCVWtOSUxYMEthV1lnV3lBdGVpQWlKR0Z5WTJnaUlGMEtkR2hsYmdwallYTmxJQ1FvZFc1aGJXVWdMVzBwSUdsdUNuZzRObDgyTkNrS0lDQWdJR0Z5WTJnOUltRnRaRFkwSWdvZ0lDQWdPenNLWVdGeVkyZzJOQ2tLSUNBZ0lHRnlZMmc5SW1GeWJUWTBJZ29nSUNBZ096c0tLaWtLSUNBZ0lHVmphRzhnSW5WdWMzVndjRzl5ZEdWa0lFTlFWU0JoY21Ob2FYUmxZM1IxY21Vc0lHVjRhWFJwYm1jaUNpQWdJQ0JsZUdsMElERUtJQ0FnSURzN0NtVnpZV01LWm1rS1EwNUpYMVpGVWxOSlQwNDlJaVI3UTA1SlgxWkZVbE5KVDA0NkxYWXdMamd1TjMwaUNtTnVhVjlpWVhObFgzVnliRDBpYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJOdmJuUmhhVzVsY201bGRIZHZjbXRwYm1jdmNHeDFaMmx1Y3k5eVpXeGxZWE5sY3k5a2IzZHViRzloWkM4a1EwNUpYMVpGVWxOSlQwNGlDbU51YVY5bWFXeGxibUZ0WlQwaVkyNXBMWEJzZFdkcGJuTXRiR2x1ZFhndEpHRnlZMmd0SkVOT1NWOVdSVkpUU1U5T0xuUm5laUlLWTNWeWJDQXRUR1p2SUNJa1kyNXBYMkpwYmw5a2FYSXZKR051YVY5bWFXeGxibUZ0WlNJZ0lpUmpibWxmWW1GelpWOTFjbXd2SkdOdWFWOW1hV3hsYm1GdFpTSUtZMjVwWDNOMWJUMGtLR04xY213Z0xVeG1JQ0lrWTI1cFgySmhjMlZmZFhKc0x5UmpibWxmWm1sc1pXNWhiV1V1YzJoaE1qVTJJaWtLWTJRZ0lpUmpibWxmWW1sdVgyUnBjaUlLYzJoaE1qVTJjM1Z0SUMxaklEdzhQQ0lrWTI1cFgzTjFiU0lLZEdGeUlIaDJaaUFpSkdOdWFWOW1hV3hsYm1GdFpTSUtjbTBnTFdZZ0lpUmpibWxmWm1sc1pXNWhiV1VpQ21Oa0lDMEtRMUpKWDFSUFQweFRYMUpGVEVWQlUwVTlJaVI3UTFKSlgxUlBUMHhUWDFKRlRFVkJVMFU2TFhZeExqSXlMakI5SWdwamNtbGZkRzl2YkhOZlltRnpaVjkxY213OUltaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXJkV0psY201bGRHVnpMWE5wWjNNdlkzSnBMWFJ2YjJ4ekwzSmxiR1ZoYzJWekwyUnZkMjVzYjJGa0x5UjdRMUpKWDFSUFQweFRYMUpGVEVWQlUwVjlJZ3BqY21sZmRHOXZiSE5mWm1sc1pXNWhiV1U5SW1OeWFXTjBiQzBrZTBOU1NWOVVUMDlNVTE5U1JVeEZRVk5GZlMxc2FXNTFlQzBrZTJGeVkyaDlMblJoY2k1bmVpSUtZM1Z5YkNBdFRHWnZJQ0lrYjNCMFgySnBiaThrWTNKcFgzUnZiMnh6WDJacGJHVnVZVzFsSWlBaUpHTnlhVjkwYjI5c2MxOWlZWE5sWDNWeWJDOGtZM0pwWDNSdmIyeHpYMlpwYkdWdVlXMWxJZ3BqY21sZmRHOXZiSE5mYzNWdFBTUW9ZM1Z5YkNBdFRHWWdJaVJqY21sZmRHOXZiSE5mWW1GelpWOTFjbXd2SkdOeWFWOTBiMjlzYzE5bWFXeGxibUZ0WlM1emFHRXlOVFlpSUh3Z2MyVmtJQ2R6TDF3cVhDOHZMeWNwQ21Oa0lDSWtiM0IwWDJKcGJpSUtjMmhoTWpVMmMzVnRJQzFqSUR3OFBDSWtZM0pwWDNSdmIyeHpYM04xYlNJS2RHRnlJSGgyWmlBaUpHTnlhVjkwYjI5c2MxOW1hV3hsYm1GdFpTSUtjbTBnTFdZZ0lpUmpjbWxmZEc5dmJITmZabWxzWlc1aGJXVWlDbXh1SUMxelppQWlKRzl3ZEY5aWFXNHZZM0pwWTNSc0lpQWlKSFZ6Y2w5c2IyTmhiRjlpYVc0aUwyTnlhV04wYkNCOGZDQmxZMmh2SUNKemVXMWliMnhwWXlCc2FXNXJJR2x6SUhOcmFYQndaV1FpQ21Oa0lDMEtTMVZDUlY5V1JWSlRTVTlPUFNJa2UwdFZRa1ZmVmtWU1UwbFBUam90ZGpFdU1qSXVNbjBpQ210MVltVmZaR2x5UFNJa2IzQjBYMkpwYmk5cmRXSmxjbTVsZEdWekxTUkxWVUpGWDFaRlVsTkpUMDRpQ210MVltVmZZbUZ6WlY5MWNtdzlJbWgwZEhCek9pOHZjM1J2Y21GblpTNW5iMjluYkdWaGNHbHpMbU52YlM5cmRXSmxjbTVsZEdWekxYSmxiR1ZoYzJVdmNtVnNaV0Z6WlM4a1MxVkNSVjlXUlZKVFNVOU9MMkpwYmk5c2FXNTFlQzhrWVhKamFDSUthM1ZpWlY5emRXMWZabWxzWlQwaUpHdDFZbVZmWkdseUwzTm9ZVEkxTmlJS2JXdGthWElnTFhBZ0lpUnJkV0psWDJScGNpSUtPaUErSWlScmRXSmxYM04xYlY5bWFXeGxJZ29LWm05eUlHSnBiaUJwYmlCcmRXSmxiR1YwSUd0MVltVmhaRzBnYTNWaVpXTjBiRHNnWkc4S0lDQWdJR04xY213Z0xVeG1ieUFpSkd0MVltVmZaR2x5THlSaWFXNGlJQ0lrYTNWaVpWOWlZWE5sWDNWeWJDOGtZbWx1SWdvZ0lDQWdZMmh0YjJRZ0szZ2dJaVJyZFdKbFgyUnBjaThrWW1sdUlnb2dJQ0FnYzNWdFBTUW9ZM1Z5YkNBdFRHWWdJaVJyZFdKbFgySmhjMlZmZFhKc0x5UmlhVzR1YzJoaE1qVTJJaWtLSUNBZ0lHVmphRzhnSWlSemRXMGdJQ1JyZFdKbFgyUnBjaThrWW1sdUlpQStQaUlrYTNWaVpWOXpkVzFmWm1sc1pTSUtaRzl1WlFwemFHRXlOVFp6ZFcwZ0xXTWdJaVJyZFdKbFgzTjFiVjltYVd4bElnb0tabTl5SUdKcGJpQnBiaUJyZFdKbGJHVjBJR3QxWW1WaFpHMGdhM1ZpWldOMGJEc2daRzhLSUNBZ0lHeHVJQzF6WmlBaUpHdDFZbVZmWkdseUx5UmlhVzRpSUNJa2IzQjBYMkpwYmlJdkpHSnBiZ3BrYjI1bENnb2pJSE5sZENCcmRXSmxiR1YwSUc1dlpHVnBjQ0JsYm5acGNtOXViV1Z1ZENCMllYSnBZV0pzWlFvdmIzQjBMMkpwYmk5elpYUjFjRjl1WlhSZlpXNTJMbk5vQ21OMWNtd2dMWE1nTFdzZ0xYWWdMUzFvWldGa1pYSWdKMEYxZEdodmNtbDZZWFJwYjI0NklFSmxZWEpsY2lCMGIzQXRjMlZqY21WMEp5Qm9kSFJ3Y3pvdkwyWnZieTVpWVhJNk5qUTBNeTloY0drdmRqRXZibUZ0WlhOd1lXTmxjeTlqYkc5MVpDMXBibWwwTFhObGRIUnBibWR6TDNObFkzSmxkSE12YTNWaVpTMXplWE4wWlcwdGEzVmlaV3hsZEMxamIyNW1hV2QxY21GMGFXOXVMV3QxWW1Wc1pYUXRZbTl2ZEhOMGNtRndMV052Ym1acFp5QjhJR3B4SUNjdVpHRjBZVnNpYTNWaVpXTnZibVpwWnlKZEp5QXRjbndnWW1GelpUWTBJQzFrSUQ0Z0wyVjBZeTlyZFdKbGNtNWxkR1Z6TDJKdmIzUnpkSEpoY0MxcmRXSmxiR1YwTG1OdmJtWUtDbk41YzNSbGJXTjBiQ0JsYm1GaWJHVWdMUzF1YjNjZ2EzVmlaV3hsZEFwemVYTjBaVzFqZEd3Z1pXNWhZbXhsSUMwdGJtOTNJQzB0Ym04dFlteHZZMnNnYTNWaVpXeGxkQzFvWldGc2RHaGphR1ZqYXk1elpYSjJhV05sQ25ONWMzUmxiV04wYkNCa2FYTmhZbXhsSUhObGRIVndMbk5sY25acFkyVUsKCi0gcGF0aDogJy9vcHQvYmluL3N1cGVydmlzZS5zaCcKICBwZXJtaXNzaW9uczogJzA3NTUnCiAgZW5jb2Rpbmc6ICdiNjQnCiAgY29udGVudDogfC0KICAgIEl5RXZZbWx1TDJKaGMyZ0tjMlYwSUMxNFpYVnZJSEJwY0dWbVlXbHNDbmRvYVd4bElDRWdJaVJBSWpzZ1pHOEtJQ0J6YkdWbGNDQXhDbVJ2Ym1VSwoKLSBwYXRoOiAnL2V0Yy9zeXN0ZW1kL3N5c3RlbS9rdWJlbGV0LnNlcnZpY2UnCiAgcGVybWlzc2lvbnM6ICcwNjQ0JwogIGVuY29kaW5nOiAnYjY0JwogIGNvbnRlbnQ6IHwtCiAgICBXMVZ1YVhSZENrRm1kR1Z5UFdSdlkydGxjaTV6WlhKMmFXTmxDbEpsY1hWcGNtVnpQV1J2WTJ0bGNpNXpaWEoyYVdObENncEVaWE5qY21sd2RHbHZiajFyZFdKbGJHVjBPaUJVYUdVZ1MzVmlaWEp1WlhSbGN5Qk9iMlJsSUVGblpXNTBDa1J2WTNWdFpXNTBZWFJwYjI0OWFIUjBjSE02THk5cmRXSmxjbTVsZEdWekxtbHZMMlJ2WTNNdmFHOXRaUzhLQ2x0VFpYSjJhV05sWFFwVmMyVnlQWEp2YjNRS1VtVnpkR0Z5ZEQxaGJIZGhlWE1LVTNSaGNuUk1hVzFwZEVsdWRHVnlkbUZzUFRBS1VtVnpkR0Z5ZEZObFl6MHhNQXBEVUZWQlkyTnZkVzUwYVc1blBYUnlkV1VLVFdWdGIzSjVRV05qYjNWdWRHbHVaejEwY25WbENncEZiblpwY205dWJXVnVkRDBpVUVGVVNEMHZiM0IwTDJKcGJqb3ZZbWx1T2k5MWMzSXZiRzlqWVd3dmMySnBiam92ZFhOeUwyeHZZMkZzTDJKcGJqb3ZkWE55TDNOaWFXNDZMM1Z6Y2k5aWFXNDZMM05pYVc0dklncEZiblpwY205dWJXVnVkRVpwYkdVOUxTOWxkR012Wlc1MmFYSnZibTFsYm5RS0NrVjRaV05UZEdGeWRGQnlaVDB2WW1sdUwySmhjMmdnTDI5d2RDOWthWE5oWW14bExYTjNZWEF1YzJnS1JYaGxZMU4wWVhKMFVISmxQUzlpYVc0dlltRnphQ0F2YjNCMEwyeHZZV1F0YTJWeWJtVnNMVzF2WkhWc1pYTXVjMmdLUlhobFkxTjBZWEowVUhKbFBTOWlhVzR2WW1GemFDQXZiM0IwTDJKcGJpOXpaWFIxY0Y5dVpYUmZaVzUyTG5Ob0NrVjRaV05UZEdGeWREMHZiM0IwTDJKcGJpOXJkV0psYkdWMElDUkxWVUpGVEVWVVgwVllWRkpCWDBGU1IxTWdYQW9nSUMwdFltOXZkSE4wY21Gd0xXdDFZbVZqYjI1bWFXYzlMMlYwWXk5cmRXSmxjbTVsZEdWekwySnZiM1J6ZEhKaGNDMXJkV0psYkdWMExtTnZibVlnWEFvZ0lDMHRhM1ZpWldOdmJtWnBaejB2ZG1GeUwyeHBZaTlyZFdKbGJHVjBMMnQxWW1WamIyNW1hV2NnWEFvZ0lDMHRZMjl1Wm1sblBTOWxkR012YTNWaVpYSnVaWFJsY3k5cmRXSmxiR1YwTG1OdmJtWWdYQW9nSUMwdGJtVjBkMjl5YXkxd2JIVm5hVzQ5WTI1cElGd0tJQ0F0TFdObGNuUXRaR2x5UFM5bGRHTXZhM1ZpWlhKdVpYUmxjeTl3YTJrZ1hBb2dJQzB0WTJ4dmRXUXRjSEp2ZG1sa1pYSTlZWGR6SUZ3S0lDQXRMV05zYjNWa0xXTnZibVpwWnowdlpYUmpMMnQxWW1WeWJtVjBaWE12WTJ4dmRXUXRZMjl1Wm1sbklGd0tJQ0F0TFdSNWJtRnRhV010WTI5dVptbG5MV1JwY2owdlpYUmpMMnQxWW1WeWJtVjBaWE12WkhsdVlXMXBZeTFqYjI1bWFXY3RaR2x5SUZ3S0lDQXRMV1psWVhSMWNtVXRaMkYwWlhNOVJIbHVZVzFwWTB0MVltVnNaWFJEYjI1bWFXYzlkSEoxWlNCY0NpQWdMUzFsZUdsMExXOXVMV3h2WTJzdFkyOXVkR1Z1ZEdsdmJpQmNDaUFnTFMxc2IyTnJMV1pwYkdVOUwzUnRjQzlyZFdKbGJHVjBMbXh2WTJzZ1hBb2dJQzB0WTI5dWRHRnBibVZ5TFhKMWJuUnBiV1U5Wkc5amEyVnlJRndLSUNBdExXTnZiblJoYVc1bGNpMXlkVzUwYVcxbExXVnVaSEJ2YVc1MFBYVnVhWGc2THk4dmRtRnlMM0oxYmk5a2IyTnJaWEp6YUdsdExuTnZZMnNnWEFvZ0lDMHRibTlrWlMxcGNDQWtlMHRWUWtWTVJWUmZUazlFUlY5SlVIMEtDbHRKYm5OMFlXeHNYUXBYWVc1MFpXUkNlVDF0ZFd4MGFTMTFjMlZ5TG5SaGNtZGxkQW89CgotIHBhdGg6ICcvZXRjL3N5c3RlbWQvc3lzdGVtL2t1YmVsZXQuc2VydmljZS5kL2V4dHJhcy5jb25mJwogIHBlcm1pc3Npb25zOiAnMDY0NCcKICBlbmNvZGluZzogJ2I2NCcKICBjb250ZW50OiB8LQogICAgVzFObGNuWnBZMlZkQ2tWdWRtbHliMjV0Wlc1MFBTSkxWVUpGVEVWVVgwVllWRkpCWDBGU1IxTTlMUzF5WlhOdmJIWXRZMjl1WmowdmNuVnVMM041YzNSbGJXUXZjbVZ6YjJ4MlpTOXlaWE52YkhZdVkyOXVaaUlLCgotIHBhdGg6ICcvZXRjL2t1YmVybmV0ZXMvY2xvdWQtY29uZmlnJwogIHBlcm1pc3Npb25zOiAnMDYwMCcKICBlbmNvZGluZzogJ2I2NCcKICBjb250ZW50OiB8LQogICAgVzJkc2IySmhiRjBLV205dVpUMGlaWFV0WTJWdWRISmhiQzB4WWlJS1ZsQkRQU0psTFRFeU0yWWlDbE4xWW01bGRFbEVQU0owWlhOMExYTjFZbTVsZENJS0NnPT0KCi0gcGF0aDogJy9vcHQvYmluL3NldHVwX25ldF9lbnYuc2gnCiAgcGVybWlzc2lvbnM6ICcwNzU1JwogIGVuY29kaW5nOiAnYjY0JwogIGNvbnRlbnQ6IHwtCiAgICBJeUV2ZFhOeUwySnBiaTlsYm5ZZ1ltRnphQXBsWTJodlpHRjBaU2dwSUhzS0lDQmxZMmh2SUNKYkpDaGtZWFJsSUMxSmN5bGRJaUFpSkVBaUNuMEtDaU1nWjJWMElIUm9aU0JrWldaaGRXeDBJR2x1ZEdWeVptRmpaU0JKVUNCaFpHUnlaWE56Q2tSRlJrRlZURlJmU1VaRFgwbFFQU1FvYVhBZ0xXOGdJSEp2ZFhSbElHZGxkQ0F4SUh3Z1ozSmxjQ0F0YjFBZ0luTnlZeUJjUzF4VEt5SXBDZ3BwWmlCYklDMTZJQ0lrZTBSRlJrRlZURlJmU1VaRFgwbFFmU0lnWFFwMGFHVnVDaUFnWldOb2IyUmhkR1VnSWtaaGFXeGxaQ0IwYnlCblpYUWdTVkFnWVdSa2NtVnpjeUJtYjNJZ2RHaGxJR1JsWm1GMWJIUWdjbTkxZEdVZ2FXNTBaWEptWVdObElnb2dJR1Y0YVhRZ01RcG1hUW9LSXlCblpYUWdkR2hsSUdaMWJHd2dhRzl6ZEc1aGJXVUtSbFZNVEY5SVQxTlVUa0ZOUlQwa0tHaHZjM1J1WVcxbElDMW1LUW9qSUdsbUlDOWxkR012YldGamFHbHVaUzF1WVcxbElHbHpJRzV2ZENCbGJYQjBlU0IwYUdWdUlIVnpaU0IwYUdVZ2FHOXpkRzVoYldVZ1puSnZiU0IwYUdWeVpRcHBaaUJiSUMxeklDOWxkR012YldGamFHbHVaUzF1WVcxbElGMDdJSFJvWlc0S0lDQkdWVXhNWDBoUFUxUk9RVTFGUFNRb1kyRjBJQzlsZEdNdmJXRmphR2x1WlMxdVlXMWxLUXBtYVFvS0l5QjNjbWwwWlNCMGFHVWdibTlrWldsd1gyVnVkaUJtYVd4bENpTWdkMlVnYm1WbFpDQjBhR1VnYkdsdVpTQmlaV3h2ZHlCaVpXTmhkWE5sSUdac1lYUmpZWElnYUdGeklIUm9aU0J6WVcxbElITjBjbWx1WnlBaVkyOXlaVzl6SWlCcGJpQjBhR0YwSUdacGJHVUthV1lnWjNKbGNDQXRjU0JqYjNKbGIzTWdMMlYwWXk5dmN5MXlaV3hsWVhObENuUm9aVzRLSUNCbFkyaHZJQ0pMVlVKRlRFVlVYMDVQUkVWZlNWQTlKSHRFUlVaQlZVeFVYMGxHUTE5SlVIMWNia3RWUWtWTVJWUmZTRTlUVkU1QlRVVTlKSHRHVlV4TVgwaFBVMVJPUVUxRmZTSWdQaUF2WlhSakwydDFZbVZ5Ym1WMFpYTXZibTlrWldsd0xtTnZibVlLWld4cFppQmJJQ0VnTFdRZ0wyVjBZeTl6ZVhOMFpXMWtMM041YzNSbGJTOXJkV0psYkdWMExuTmxjblpwWTJVdVpDQmRDblJvWlc0S0lDQmxZMmh2WkdGMFpTQWlRMkZ1SjNRZ1ptbHVaQ0JyZFdKbGJHVjBJSE5sY25acFkyVWdaWGgwY21GeklHUnBjbVZqZEc5eWVTSUtJQ0JsZUdsMElERUtaV3h6WlFvZ0lHVmphRzhnTFdVZ0lsdFRaWEoyYVdObFhWeHVSVzUyYVhKdmJtMWxiblE5WENKTFZVSkZURVZVWDA1UFJFVmZTVkE5Skh0RVJVWkJWVXhVWDBsR1ExOUpVSDFjSWx4dVJXNTJhWEp2Ym0xbGJuUTlYQ0pMVlVKRlRFVlVYMGhQVTFST1FVMUZQU1I3UmxWTVRGOUlUMU5VVGtGTlJYMWNJaUlnUGlBdlpYUmpMM041YzNSbGJXUXZjM2x6ZEdWdEwydDFZbVZzWlhRdWMyVnlkbWxqWlM1a0wyNXZaR1ZwY0M1amIyNW1DbVpwQ2c9PQoKLSBwYXRoOiAnL2V0Yy9rdWJlcm5ldGVzL3BraS9jYS5jcnQnCiAgcGVybWlzc2lvbnM6ICcwNjQ0JwogIGVuY29kaW5nOiAnYjY0JwogIGNvbnRlbnQ6IHwtCiAgICBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VWWGFrTkRRVEJMWjBGM1NVSkJaMGxLUVV4bVVteFhjMGs0V1ZGSVRVRXdSME5UY1VkVFNXSXpSRkZGUWtKUlZVRk5TSE40UTNwQlNrSm5UbFlLUWtGWlZFRnNWbFJOVVhOM1ExRlpSRlpSVVVsRmQwcEVVVlJGVjAxQ1VVZEJNVlZGUW5oTlRsVXlSblZKUlZwNVdWYzFhbUZZVG1waWVrVlZUVUpKUndwQk1WVkZRMmhOVEZGdVNtaGFSMXB3WkVod2NHSnRUWGhGYWtGUlFtZE9Wa0pCVFZSRFYzaDJXVEpHYzJGSE9YcGtSRVZrVFVKelIwTlRjVWRUU1dJekNrUlJSVXBCVWxsUFdXNUthRnBGUW10WlZ6VnVXVk0xYW1JeU1IZElhR05PVFZSUmQwNTZSVEZOYWtFd1RtcEJNVmRvWTA1TlZHTjNUbFJCTUUxcVFUQUtUbXBCTVZkcVFqZE5VWE4zUTFGWlJGWlJVVWRGZDBwV1ZYcEZURTFCYTBkQk1WVkZRMEpOUTFFd1JYaEdha0ZWUW1kT1ZrSkJZMVJFVms1b1ltbENSd3BqYlVaMVdUSnNlbGt5T0hoR1JFRlRRbWRPVmtKQmIxUkRNRXA1V1ZkU2JXRllValpoVnpWcVRWSkpkMFZCV1VSV1VWRkVSWGRzYzJJeVRtaGlSMmgyQ21NelVYaElWRUZpUW1kcmNXaHJhVWM1ZHpCQ1ExRkZWMFJ0U25sWlYxSkJXa2RHZFZveVJYVlpNamwwVFVsSlFrbHFRVTVDWjJ0eGFHdHBSemwzTUVJS1FWRkZSa0ZCVDBOQlVUaEJUVWxKUWtOblMwTkJVVVZCZERWbVFXcHdOR1pVWTJWclYxVlVabnB6Y0RCcmVXbG9NVTlaWW5OSFREQkxXREZsVW1KVFV3cFNPRTlrTUNzNVVUWXlTSGx1ZVN0SFJuZE5WR0kwUVM5TFZUaHRjM052U0haalkyVlRRVUZpZDJaaWVFWkxMeXR6TlRGVWIySnhWVzVQVWxweVQyOVVDbHBxYTFWNVoySjVXRVJUU3prNVdVSmlZMUl4VUdsd09IWjNUVlJ0TkZoTGRVeDBRMmxuWlVKQ1pHcHFRVkZrWjFWUE1qaE1SVTVIYkhOTmJtMWxXV3NLU21aUFJGWkhibFp0Y2pWTWRHSTVRVTVCT0VsTGVWUm1jMjVJU2pScFQwTlRMMUJzVUdKVmFqSnhOMWx1YjFaTWNHOXpWVUpOYkdkVllpOURlV3RZTXdwdFQyOU1ZalI1U2twUmVVRXZhVk5VTmxwNGFVbEZhak0yUkRSNVYxbzFiR2MzV1Vwc0sxVnBhVUpSU0VkRGJsQmtSM2xwY0hGV01EWmxlREJvWlZsWENtTmhhVmM0VEZkYVUxVlJPVE5xVVN0WFZrTklPR2hVTjBSUlR6RmtiWE4yVlcxWWJIRXZTbVZCYkhkUkwxRkpSRUZSUVVKdk5FaG5UVWxJWkUxQ01FY0tRVEZWWkVSblVWZENRbEpqUVZKUGRHaFRORkEwVlRkMlZHWnFRbmxETlRZNVVqZEZOa1JEUW5KUldVUldVakJxUWtsSGJFMUpSMmxuUWxKalFWSlBkQXBvVXpSUU5GVTNkbFJtYWtKNVF6VTJPVkkzUlRaTFJpOXdTREIzWlhwRlRFMUJhMGRCTVZWRlFtaE5RMVpXVFhoRGVrRktRbWRPVmtKQloxUkJhMDVDQ2sxU1dYZEdRVmxFVmxGUlNFVjNNVlJaVnpSblVtNUthR0p0VG5Cak1rNTJUVkpSZDBWbldVUldVVkZMUlhkMFEyTnRSbXRhYld3d1pXMXNkVmw2UlZNS1RVSkJSMEV4VlVWQmVFMUtZa2M1YWxsWGVHOWlNMDR3VFZJd2QwZDNXVXBMYjFwSmFIWmpUa0ZSYTBKR1p6VnBZMjFHYTFGSFVtaGliV1JvVEcxT2RncGlXVWxLUVV4bVVteFhjMGs0V1ZGSVRVRjNSMEV4VldSRmQxRkdUVUZOUWtGbU9IZEVVVmxLUzI5YVNXaDJZMDVCVVVWR1FsRkJSR2RuUlVKQlJ6Wm9DbFU1WmpselRrZ3dMelp2UW1KSFIza3lSVlpWTUZWblNWUlZVVWx5Umxkdk9YSkdhM0pYTldzdldHdEVhbEZ0S3pOc2VtcFVNR2xIVWpSSmVFVXZRVzhLWlZVMmMxRm9kV0UzZDNKWFpVWkZialEzUjB3NU9HeHVRM05LWkVRM2IxcE9hRVp0VVRrMVZHSXZURzVFVldwek5WbHFPV0p5VURCT1YzcFlabGxWTkFwVlN6SmFia2xPU2xKalNuQkNPR2xTUTJGRGVFVTRSR1JqVlVZd1dIRkpSWEUyY0VFeU56SnpibTlNYldsWVRFMTJUbXd6YTFsRlpHMHJhbVUyZG05RUNqVTRVMDVXUlZWemVuUjZVWGxZYlVwRmFFTndkMVpKTUVFMlVVTnFlbGhxSzNGMmNHMTNNMXBhU0drNFNuZFlaV2s0V2xwQ1RGUlRSa0pyYVRoYU4yNEtjMGc1UWtKSU16Z3ZVM3BWYlVGT05GRklVMUI1TVdkcWNXMHdNRTlCUlRoT1lWbEVhMmd2WW5wRk5HUTNiVXhIUjAxWGNDOVhSVE5MVUZOMU9ESklSZ3ByVUdVMldHOVRZbWxNYlM5cmVHc3pNbFF3UFFvdExTMHRMVVZPUkNCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2c9PQoKLSBwYXRoOiAnL2V0Yy9zeXN0ZW1kL3N5c3RlbS9zZXR1cC5zZXJ2aWNlJwogIHBlcm1pc3Npb25zOiAnMDY0NCcKICBlbmNvZGluZzogJ2I2NCcKICBjb250ZW50OiB8LQogICAgVzBsdWMzUmhiR3hkQ2xkaGJuUmxaRUo1UFcxMWJIUnBMWFZ6WlhJdWRHRnlaMlYwQ2dwYlZXNXBkRjBLVW1WeGRXbHlaWE05Ym1WMGQyOXlheTF2Ym14cGJtVXVkR0Z5WjJWMENrRm1kR1Z5UFc1bGRIZHZjbXN0YjI1c2FXNWxMblJoY21kbGRBb0tXMU5sY25acFkyVmRDbFI1Y0dVOWIyNWxjMmh2ZEFwU1pXMWhhVzVCWm5SbGNrVjRhWFE5ZEhKMVpRcEZiblpwY205dWJXVnVkRVpwYkdVOUxTOWxkR012Wlc1MmFYSnZibTFsYm5RS1JYaGxZMU4wWVhKMFBTOXZjSFF2WW1sdUwzTjFjR1Z5ZG1selpTNXphQ0F2YjNCMEwySnBiaTl6WlhSMWNBbz0KCi0gcGF0aDogJy9ldGMvcHJvZmlsZS5kL29wdC1iaW4tcGF0aC5zaCcKICBwZXJtaXNzaW9uczogJzA2NDQnCiAgZW5jb2Rpbmc6ICdiNjQnCiAgY29udGVudDogfC0KICAgIFpYaHdiM0owSUZCQlZFZzlJaTl2Y0hRdlltbHVPaVJRUVZSSUlnbz0KCi0gcGF0aDogJy9ldGMva3ViZXJuZXRlcy9rdWJlbGV0LmNvbmYnCiAgcGVybWlzc2lvbnM6ICcwNjQ0JwogIGVuY29kaW5nOiAnYjY0JwogIGNvbnRlbnQ6IHwtCiAgICBZWEJwVm1WeWMybHZiam9nYTNWaVpXeGxkQzVqYjI1bWFXY3Vhemh6TG1sdkwzWXhZbVYwWVRFS2EybHVaRG9nUzNWaVpXeGxkRU52Ym1acFozVnlZWFJwYjI0S1lYVjBhR1Z1ZEdsallYUnBiMjQ2Q2lBZ1lXNXZibmx0YjNWek9nb2dJQ0FnWlc1aFlteGxaRG9nWm1Gc2MyVUtJQ0IzWldKb2IyOXJPZ29nSUNBZ1kyRmphR1ZVVkV3NklEQnpDaUFnSUNCbGJtRmliR1ZrT2lCMGNuVmxDaUFnZURVd09Ub0tJQ0FnSUdOc2FXVnVkRU5CUm1sc1pUb2dMMlYwWXk5cmRXSmxjbTVsZEdWekwzQnJhUzlqWVM1amNuUUtZWFYwYUc5eWFYcGhkR2x2YmpvS0lDQnRiMlJsT2lCWFpXSm9iMjlyQ2lBZ2QyVmlhRzl2YXpvS0lDQWdJR05oWTJobFFYVjBhRzl5YVhwbFpGUlVURG9nTUhNS0lDQWdJR05oWTJobFZXNWhkWFJvYjNKcGVtVmtWRlJNT2lBd2N3cGpaM0p2ZFhCRWNtbDJaWEk2SUhONWMzUmxiV1FLWTJ4MWMzUmxja1JPVXpvS0xTQWlNVEF1TUM0d0xqQWlDbU5zZFhOMFpYSkViMjFoYVc0NklHTnNkWE4wWlhJdWJHOWpZV3dLWTNCMVRXRnVZV2RsY2xKbFkyOXVZMmxzWlZCbGNtbHZaRG9nTUhNS1pYWnBZM1JwYjI1UWNtVnpjM1Z5WlZSeVlXNXphWFJwYjI1UVpYSnBiMlE2SURCekNtWmxZWFIxY21WSFlYUmxjem9LSUNCSGNtRmpaV1oxYkU1dlpHVlRhSFYwWkc5M2Jqb2dkSEoxWlFvZ0lFbGtaVzUwYVdaNVVHOWtUMU02SUdaaGJITmxDbVpwYkdWRGFHVmphMFp5WlhGMVpXNWplVG9nTUhNS2FIUjBjRU5vWldOclJuSmxjWFZsYm1ONU9pQXdjd3BwYldGblpVMXBibWx0ZFcxSFEwRm5aVG9nTUhNS2JHOW5aMmx1WnpvS0lDQm1iSFZ6YUVaeVpYRjFaVzVqZVRvZ01Bb2dJRzl3ZEdsdmJuTTZDaUFnSUNCcWMyOXVPZ29nSUNBZ0lDQnBibVp2UW5WbVptVnlVMmw2WlRvZ0lqQWlDaUFnZG1WeVltOXphWFI1T2lBd0NtMWxiVzl5ZVZOM1lYQTZJSHQ5Q201dlpHVlRkR0YwZFhOU1pYQnZjblJHY21WeGRXVnVZM2s2SURCekNtNXZaR1ZUZEdGMGRYTlZjR1JoZEdWR2NtVnhkV1Z1WTNrNklEQnpDbkJ5YjNSbFkzUkxaWEp1Wld4RVpXWmhkV3gwY3pvZ2RISjFaUXB5WldGa1QyNXNlVkJ2Y25RNklEQUtjbTkwWVhSbFEyVnlkR2xtYVdOaGRHVnpPaUIwY25WbENuSjFiblJwYldWU1pYRjFaWE4wVkdsdFpXOTFkRG9nTUhNS2MyVnlkbVZ5VkV4VFFtOXZkSE4wY21Gd09pQjBjblZsQ25Ob2RYUmtiM2R1UjNKaFkyVlFaWEpwYjJRNklEQnpDbk5vZFhSa2IzZHVSM0poWTJWUVpYSnBiMlJEY21sMGFXTmhiRkJ2WkhNNklEQnpDbk4wWVhScFkxQnZaRkJoZEdnNklDOWxkR012YTNWaVpYSnVaWFJsY3k5dFlXNXBabVZ6ZEhNS2MzUnlaV0Z0YVc1blEyOXVibVZqZEdsdmJrbGtiR1ZVYVcxbGIzVjBPaUF3Y3dwemVXNWpSbkpsY1hWbGJtTjVPaUF3Y3dwcmRXSmxVbVZ6WlhKMlpXUTZDaUFnWTNCMU9pQXpNRzBLSUNCbGNHaGxiV1Z5WVd3dGMzUnZjbUZuWlRvZ016QkhhUXB6ZVhOMFpXMVNaWE5sY25abFpEb0tJQ0JqY0hVNklETXdiUW9nSUdWd2FHVnRaWEpoYkMxemRHOXlZV2RsT2lBek1FZHBDbVYyYVdOMGFXOXVTR0Z5WkRvS0lDQnRaVzF2Y25rdVlYWmhhV3hoWW14bE9pQXpNRTFwQ20xaGVGQnZaSE02SURFeE1BcDBiSE5EYVhCb1pYSlRkV2wwWlhNNkNpMGdWRXhUWDBGRlUxOHhNamhmUjBOTlgxTklRVEkxTmdvdElGUk1VMTlCUlZOZk1qVTJYMGREVFY5VFNFRXpPRFFLTFNCVVRGTmZRMGhCUTBoQk1qQmZVRTlNV1RFek1EVmZVMGhCTWpVMkNpMGdWRXhUWDBWRFJFaEZYMFZEUkZOQlgxZEpWRWhmUVVWVFh6RXlPRjlIUTAxZlUwaEJNalUyQ2kwZ1ZFeFRYMFZEUkVoRlgwVkRSRk5CWDFkSlZFaGZRVVZUWHpJMU5sOUhRMDFmVTBoQk16ZzBDaTBnVkV4VFgwVkRSRWhGWDBWRFJGTkJYMWRKVkVoZlEwaEJRMGhCTWpCZlVFOU1XVEV6TURVS0xTQlVURk5mUlVORVNFVmZVbE5CWDFkSlZFaGZRVVZUWHpFeU9GOUhRMDFmVTBoQk1qVTJDaTBnVkV4VFgwVkRSRWhGWDFKVFFWOVhTVlJJWDBGRlUxOHlOVFpmUjBOTlgxTklRVE00TkFvdElGUk1VMTlGUTBSSVJWOVNVMEZmVjBsVVNGOURTRUZEU0VFeU1GOVFUMHhaTVRNd05RcDJiMngxYldWUWJIVm5hVzVFYVhJNklDOTJZWEl2YkdsaUwydDFZbVZzWlhRdmRtOXNkVzFsY0d4MVoybHVjd3AyYjJ4MWJXVlRkR0YwYzBGbloxQmxjbWx2WkRvZ01ITUsKCi0gcGF0aDogJy9ldGMvc3lzdGVtZC9zeXN0ZW0va3ViZWxldC1oZWFsdGhjaGVjay5zZXJ2aWNlJwogIHBlcm1pc3Npb25zOiAnMDY0NCcKICBlbmNvZGluZzogJ2I2NCcKICBjb250ZW50OiB8LQogICAgVzFWdWFYUmRDbEpsY1hWcGNtVnpQV3QxWW1Wc1pYUXVjMlZ5ZG1salpRcEJablJsY2oxcmRXSmxiR1YwTG5ObGNuWnBZMlVLQ2x0VFpYSjJhV05sWFFwRmVHVmpVM1JoY25ROUwyOXdkQzlpYVc0dmFHVmhiSFJvTFcxdmJtbDBiM0l1YzJnZ2EzVmlaV3hsZEFvS1cwbHVjM1JoYkd4ZENsZGhiblJsWkVKNVBXMTFiSFJwTFhWelpYSXVkR0Z5WjJWMENnPT0KCi0gcGF0aDogJy9vcHQvZGlzYWJsZS1zd2FwLnNoJwogIHBlcm1pc3Npb25zOiAnMDc1NScKICBlbmNvZGluZzogJ2I2NCcKICBjb250ZW50OiB8LQogICAgSXlFdmRYTnlMMkpwYmk5bGJuWWdZbUZ6YUFwelpYUWdMV1YxYnlCd2FYQmxabUZwYkFvS0l5Qk5ZV3RsSUhOMWNtVWdkMlVnWVd4M1lYbHpJR1JwYzJGaWJHVWdjM2RoY0NBdElFOTBhR1Z5ZDJselpTQjBhR1VnYTNWaVpXeGxkQ0IzYjI0bmRDQnpkR0Z5ZENCaGN5Qm1iM0lnYzI5dFpTQmpiRzkxWkFvaklIQnliM1pwWkdWeWN5QnpkMkZ3SUdkbGRITWdaVzVoWW14bFpDQnZiaUJ5WldKdmIzUWdiM0lnWVdaMFpYSWdkR2hsSUhObGRIVndJSE5qY21sd2RDQm9ZWE1nWm1sdWFYTm9aV1FnWlhobFkzVjBhVzVuTGdwelpXUWdMV2t1YjNKcFp5QW5MeTRxYzNkaGNDNHFMMlFuSUM5bGRHTXZabk4wWVdJS2MzZGhjRzltWmlBdFlRbz0KCi0gcGF0aDogJy9ldGMvc3lzdGVtZC9zeXN0ZW0vY29udGFpbmVyZC5zZXJ2aWNlLmQvZW52aXJvbm1lbnQuY29uZicKICBwZXJtaXNzaW9uczogJzA2NDQnCiAgY29udGVudDogfC0KICAgIFtTZXJ2aWNlXQogICAgUmVzdGFydD1hbHdheXMKICAgIEVudmlyb25tZW50RmlsZT0tL2V0Yy9lbnZpcm9ubWVudAogICAgCgotIHBhdGg6ICcvZXRjL3N5c3RlbWQvc3lzdGVtL2RvY2tlci5zZXJ2aWNlLmQvZW52aXJvbm1lbnQuY29uZicKICBwZXJtaXNzaW9uczogJzA2NDQnCiAgY29udGVudDogfC0KICAgIFtTZXJ2aWNlXQogICAgUmVzdGFydD1hbHdheXMKICAgIEVudmlyb25tZW50RmlsZT0tL2V0Yy9lbnZpcm9ubWVudAogICAgCgotIHBhdGg6ICcvZXRjL2RvY2tlci9kYWVtb24uanNvbicKICBwZXJtaXNzaW9uczogJzA2NDQnCiAgZW5jb2Rpbmc6ICdiNjQnCiAgY29udGVudDogfC0KICAgIGV5SmxlR1ZqTFc5d2RITWlPbHNpYm1GMGFYWmxMbU5uY205MWNHUnlhWFpsY2oxemVYTjBaVzFrSWwwc0luTjBiM0poWjJVdFpISnBkbVZ5SWpvaWIzWmxjbXhoZVRJaUxDSnNiMmN0WkhKcGRtVnlJam9pYW5OdmJpMW1hV3hsSWl3aWJHOW5MVzl3ZEhNaU9uc2liV0Y0TFdacGJHVWlPaUl6TUNJc0ltMWhlQzF6YVhwbElqb2lNekF3YlNKOUxDSnBibk5sWTNWeVpTMXlaV2RwYzNSeWFXVnpJanBiSWpFNU1pNHhOamd1TVRBd0xqRXdNRG8xTURBd0lpd2lNVEF1TUM0d0xqRTZOVEF3TUNKZExDSnlaV2RwYzNSeWVTMXRhWEp5YjNKeklqcGJJbWgwZEhCek9pOHZjbVZuYVhOMGNua3VaRzlqYTJWeUxXTnVMbU52YlNKZGZRPT0KCi0gcGF0aDogJy9yb290Ly5kb2NrZXIvY29uZmlnLmpzb24nCiAgcGVybWlzc2lvbnM6ICcwNjAwJwogIGVuY29kaW5nOiAnYjY0JwogIGNvbnRlbnQ6IHwtCiAgICAK
immutable: true
kind: Secret
metadata:
  annotations:
    k8c.io/machine-deployment-revision: "1"
  creationTimestamp: null
  name: kubelet-configuration-kube-system-provisioning-config
  namespace: cloud-init-settings
  resourceVersion: "1"
type: Opaque
