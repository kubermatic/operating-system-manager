/*
Copyright 2021 The Kubermatic Kubernetes Platform contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "k8c.io/operating-system-manager/pkg/crd/osm/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OperatingSystemProfileLister helps list OperatingSystemProfiles.
// All objects returned here must be treated as read-only.
type OperatingSystemProfileLister interface {
	// List lists all OperatingSystemProfiles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OperatingSystemProfile, err error)
	// OperatingSystemProfiles returns an object that can list and get OperatingSystemProfiles.
	OperatingSystemProfiles(namespace string) OperatingSystemProfileNamespaceLister
	OperatingSystemProfileListerExpansion
}

// operatingSystemProfileLister implements the OperatingSystemProfileLister interface.
type operatingSystemProfileLister struct {
	indexer cache.Indexer
}

// NewOperatingSystemProfileLister returns a new OperatingSystemProfileLister.
func NewOperatingSystemProfileLister(indexer cache.Indexer) OperatingSystemProfileLister {
	return &operatingSystemProfileLister{indexer: indexer}
}

// List lists all OperatingSystemProfiles in the indexer.
func (s *operatingSystemProfileLister) List(selector labels.Selector) (ret []*v1alpha1.OperatingSystemProfile, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OperatingSystemProfile))
	})
	return ret, err
}

// OperatingSystemProfiles returns an object that can list and get OperatingSystemProfiles.
func (s *operatingSystemProfileLister) OperatingSystemProfiles(namespace string) OperatingSystemProfileNamespaceLister {
	return operatingSystemProfileNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OperatingSystemProfileNamespaceLister helps list and get OperatingSystemProfiles.
// All objects returned here must be treated as read-only.
type OperatingSystemProfileNamespaceLister interface {
	// List lists all OperatingSystemProfiles in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.OperatingSystemProfile, err error)
	// Get retrieves the OperatingSystemProfile from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.OperatingSystemProfile, error)
	OperatingSystemProfileNamespaceListerExpansion
}

// operatingSystemProfileNamespaceLister implements the OperatingSystemProfileNamespaceLister
// interface.
type operatingSystemProfileNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OperatingSystemProfiles in the indexer for a given namespace.
func (s operatingSystemProfileNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OperatingSystemProfile, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OperatingSystemProfile))
	})
	return ret, err
}

// Get retrieves the OperatingSystemProfile from the indexer for a given namespace and name.
func (s operatingSystemProfileNamespaceLister) Get(name string) (*v1alpha1.OperatingSystemProfile, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("operatingsystemprofile"), name)
	}
	return obj.(*v1alpha1.OperatingSystemProfile), nil
}
