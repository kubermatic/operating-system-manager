# Copyright 2021 The Operating System Manager contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: operatingsystemmanager.k8c.io/v1alpha1
kind: OperatingSystemProfile
metadata:
  name: osp-ubuntu
  namespace: cloud-init-settings
spec:
  osName: "ubuntu"
  osVersion: "20.04"
  version: "1.0.0"
  supportedCloudProviders:
    - name: "aws"
    - name: "azure"
    - name: "digitalocean"
    - name: "gce"
    - name: "hetzner"
    - name: "openstack"
    - name: "vsphere"
  supportedContainerRuntimes:
    - name: containerd
      files:
        - path: "/etc/containerd/config.toml"
          permissions: 0644
          content:
            inline:
              encoding: b64
              data: |
                version = 2

                [metrics]
                address = "127.0.0.1:1338"

                [plugins]
                [plugins."io.containerd.grpc.v1.cri"]
                [plugins."io.containerd.grpc.v1.cri".containerd]
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                runtime_type = "io.containerd.runc.v2"
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                SystemdCgroup = true
                [plugins."io.containerd.grpc.v1.cri".registry]
                [plugins."io.containerd.grpc.v1.cri".registry.mirrors]
                [plugins."io.containerd.grpc.v1.cri".registry.mirrors."docker.io"]
                endpoint = ["https://registry-1.docker.io"]
      templates:
        containerRuntimeInstallation: |-
          apt-get update
          apt-get install -y apt-transport-https ca-certificates curl software-properties-common lsb-release
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
          add-apt-repository "deb https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

          cat <<EOF | tee /etc/crictl.yaml
          runtime-endpoint: unix:///run/containerd/containerd.sock
          EOF

          mkdir -p /etc/systemd/system/containerd.service.d
          cat <<EOF | tee /etc/systemd/system/containerd.service.d/environment.conf
          [Service]
          Restart=always
          EnvironmentFile=-/etc/environment
          EOF

          apt-get install -y --allow-downgrades containerd.io=1.4*
          apt-mark hold containerd.io

          systemctl daemon-reload
          systemctl enable --now containerd

    - name: docker
      files:
        - path: /etc/docker/daemon.json
          permissions: 0644
          content:
            inline:
              encoding: b64
              data: |-
                {"exec-opts":["native.cgroupdriver=systemd"],"storage-driver":"overlay2","log-driver":"json-file","log-opts":{"max-file":"5","max-size":"100m"}}
      templates:
        containerRuntimeInstallation: |-
          apt-get update
          apt-get install -y apt-transport-https ca-certificates curl software-properties-common lsb-release
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
          add-apt-repository "deb https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

          mkdir -p /etc/systemd/system/containerd.service.d /etc/systemd/system/docker.service.d

          cat <<EOF | tee /etc/systemd/system/containerd.service.d/environment.conf /etc/systemd/system/docker.service.d/environment.conf
          [Service]
          Restart=always
          EnvironmentFile=-/etc/environment
          EOF

          apt-get install --allow-downgrades -y \
              containerd.io=1.4* \
              docker-ce-cli=5:19.03* \
              docker-ce=5:19.03*
          apt-mark hold docker-ce* containerd.io

          systemctl daemon-reload
          systemctl enable --now docker

  templates:
    safeDownloadBinariesScript: |-
      {{- /*setup some common directories */ -}}
      opt_bin=/opt/bin
      usr_local_bin=/usr/local/bin
      cni_bin_dir=/opt/cni/bin

      {{- /* create all the necessary dirs */}}
      mkdir -p /etc/cni/net.d /etc/kubernetes/dynamic-config-dir /etc/kubernetes/manifests "$opt_bin" "$cni_bin_dir"

      {{- /* HOST_ARCH can be defined outside of machine-controller (in kubeone for example) */}}
      arch=${HOST_ARCH-}
      if [ -z "$arch" ]
      then
      case $(uname -m) in
      x86_64)
          arch="amd64"
          ;;
      aarch64)
          arch="arm64"
          ;;
      *)
          echo "unsupported CPU architecture, exiting"
          exit 1
          ;;
      esac
      fi

      {{- /* # CNI variables */}}
      CNI_VERSION="${CNI_VERSION:-v0.8.7}"
      cni_base_url="https://github.com/containernetworking/plugins/releases/download/$CNI_VERSION"
      cni_filename="cni-plugins-linux-$arch-$CNI_VERSION.tgz"

      {{- /* download CNI */}}
      curl -Lfo "$cni_bin_dir/$cni_filename" "$cni_base_url/$cni_filename"

      {{- /* download CNI checksum */}}
      cni_sum=$(curl -Lf "$cni_base_url/$cni_filename.sha256")
      cd "$cni_bin_dir"

      {{- /* verify CNI checksum */}}
      sha256sum -c <<<"$cni_sum"

      {{- /* unpack CNI */}}
      tar xvf "$cni_filename"
      rm -f "$cni_filename"
      cd -

      {{- /* # cri-tools variables */}}
      CRI_TOOLS_RELEASE="${CRI_TOOLS_RELEASE:-v1.22.0}"
      cri_tools_base_url="https://github.com/kubernetes-sigs/cri-tools/releases/download/${CRI_TOOLS_RELEASE}"
      cri_tools_filename="crictl-${CRI_TOOLS_RELEASE}-linux-${arch}.tar.gz"

      {{- /* download cri-tools */}}
      curl -Lfo "$opt_bin/$cri_tools_filename" "$cri_tools_base_url/$cri_tools_filename"

      {{- /* download cri-tools checksum */}}
      {{- /* the cri-tools checksum file has a filename prefix that breaks sha256sum so we need to drop it with sed */}}
      cri_tools_sum=$(curl -Lf "$cri_tools_base_url/$cri_tools_filename.sha256" | sed 's/\*\///')
      cd "$opt_bin"

      {{- /* verify cri-tools checksum */}}
      sha256sum -c <<<"$cri_tools_sum"

      {{- /* unpack cri-tools and symlink to path so it's available to all users */}}
      tar xvf "$cri_tools_filename"
      rm -f "$cri_tools_filename"
      ln -sf "$opt_bin/crictl" "$usr_local_bin"/crictl || echo "symbolic link is skipped"
      cd -

      {{- /* kubelet */}}
      KUBE_VERSION="${KUBE_VERSION:-{{ .KubeVersion }}}"
      kube_dir="$opt_bin/kubernetes-$KUBE_VERSION"
      kube_base_url="https://storage.googleapis.com/kubernetes-release/release/$KUBE_VERSION/bin/linux/$arch"
      kube_sum_file="$kube_dir/sha256"

      {{- /* create versioned kube dir */}}
      mkdir -p "$kube_dir"
      : >"$kube_sum_file"

      for bin in kubelet kubeadm kubectl; do
          {{- /* download kube binary */}}
          curl -Lfo "$kube_dir/$bin" "$kube_base_url/$bin"
          chmod +x "$kube_dir/$bin"

          {{- /* download kube binary checksum */}}
          sum=$(curl -Lf "$kube_base_url/$bin.sha256")

          {{- /* save kube binary checksum */}}
          echo "$sum  $kube_dir/$bin" >>"$kube_sum_file"
      done

      {{- /* check kube binaries checksum */}}
      sha256sum -c "$kube_sum_file"

      for bin in kubelet kubeadm kubectl; do
          {{- /* link kube binaries from verioned dir to $opt_bin */}}
          ln -sf "$kube_dir/$bin" "$opt_bin"/$bin
      done

      if [[ ! -x /opt/bin/health-monitor.sh ]]; then
          curl -Lfo /opt/bin/health-monitor.sh https://raw.githubusercontent.com/kubermatic/machine-controller/7967a0af2b75f29ad2ab227eeaa26ea7b0f2fbde/pkg/userdata/scripts/health-monitor.sh
          chmod +x /opt/bin/health-monitor.sh
      fi

    configureProxyScript: |-
      {{- if .HTTPProxy }}
      cat <<EOF | tee -a /etc/environment
      HTTP_PROXY={{ .HTTPProxy }}
      http_proxy={{ .HTTPProxy }}
      HTTPS_PROXY={{ .HTTPProxy }}
      https_proxy={{ .HTTPProxy }}
      NO_PROXY={{ .NoProxy }}
      no_proxy={{ .NoProxy }}
      EOF
      {{- end }}

  files:
    - path: "/etc/systemd/journald.conf.d/max_disk_use.conf"
      content:
        inline:
          encoding: b64
          data: |
            [Journal]
            SystemMaxUse=5G

    - path: "/opt/load-kernel-modules.sh"
      permissions: 0755
      content:
        inline:
          encoding: b64
          data: |
            #!/usr/bin/env bash
            set -euo pipefail

            modprobe ip_vs
            modprobe ip_vs_rr
            modprobe ip_vs_wrr
            modprobe ip_vs_sh

            if modinfo nf_conntrack_ipv4 &> /dev/null; then
              modprobe nf_conntrack_ipv4
            else
              modprobe nf_conntrack
            fi

    - path: "/etc/sysctl.d/k8s.conf"
      content:
        inline:
          encoding: b64
          data: |
            net.bridge.bridge-nf-call-ip6tables = 1
            net.bridge.bridge-nf-call-iptables = 1
            kernel.panic_on_oops = 1
            kernel.panic = 10
            net.ipv4.ip_forward = 1
            vm.overcommit_memory = 1
            fs.inotify.max_user_watches = 1048576

    - path: "/etc/default/grub.d/60-swap-accounting.cfg"
      content:
        inline:
          encoding: b64
          data: |
            # Added by kubermatic machine-controller
            # Enable cgroups memory and swap accounting
            GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1"

    - path: "/opt/bin/setup"
      permissions: 0755
      content:
        inline:
          encoding: b64
          data: |
            #!/bin/bash
            set -xeuo pipefail
            if systemctl is-active ufw; then systemctl stop ufw; fi
            systemctl mask ufw

            {{- /* As we added some modules and don't want to reboot, restart the service */}}
            systemctl restart systemd-modules-load.service
            sysctl --system

            {{- /* Make sure we always disable swap - Otherwise the kubelet won't start'. */}}
            sed -i.orig '/.*swap.*/d' /etc/fstab
            swapoff -a

            apt-get update

            DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y \
              curl \
              ca-certificates \
              ceph-common \
              cifs-utils \
              conntrack \
              e2fsprogs \
              ebtables \
              ethtool \
              glusterfs-client \
              iptables \
              jq \
              kmod \
              openssh-client \
              nfs-common \
              socat \
              util-linux \
              {{- if eq .CloudProviderName "vsphere" }}
              open-vm-tools \
              {{- end }}
              ipvsadm

            {{- template "configureProxyScript" }}

            {{- template "containerRuntimeInstallation" }}

            {{- template "safeDownloadBinariesScript" }}

            # set kubelet nodeip environment variable
            /opt/bin/setup_net_env.sh

            systemctl enable --now kubelet
            systemctl enable --now --no-block kubelet-healthcheck.service

    - path: "/opt/bin/supervise.sh"
      permissions: 0755
      content:
        inline:
          encoding: b64
          data: |
            #!/bin/bash
            set -xeuo pipefail
            while ! "$@"; do
              sleep 1
            done

    - path: "/etc/systemd/system/kubelet.service"
      content:
        inline:
          encoding: b64
          data: |
            [Unit]
            After={{ .ContainerRuntime }}.service
            Requires={{ .ContainerRuntime }}.service

            Description=kubelet: The Kubernetes Node Agent
            Documentation=https://kubernetes.io/docs/home/

            [Service]
            Restart=always
            StartLimitInterval=0
            RestartSec=10
            CPUAccounting=true
            MemoryAccounting=true

            Environment="PATH=/opt/bin:/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin/"
            EnvironmentFile=-/etc/environment

            ExecStartPre=/bin/bash /opt/load-kernel-modules.sh
            ExecStartPre=/bin/bash /opt/bin/setup_net_env.sh
            ExecStart=/opt/bin/kubelet $KUBELET_EXTRA_ARGS \
              --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf \
              --kubeconfig=/var/lib/kubelet/kubeconfig \
              --config=/etc/kubernetes/kubelet.conf \
              --network-plugin=cni \
              --cert-dir=/etc/kubernetes/pki \
              {{- if or (.ExternalCloudProvider) (eq .CloudProviderName "external") }}
              --cloud-provider=external \
              {{- else if .CloudProviderName }}
              --cloud-provider={{- .CloudProviderName}} \
              --cloud-config=/etc/kubernetes/cloud-config \
              {{- end }}
              {{- if ne .CloudProviderName "aws" }}
              --hostname-override=${KUBELET_HOSTNAME} \
              {{- end }}
              --dynamic-config-dir=/etc/kubernetes/dynamic-config-dir \
              --feature-gates=DynamicKubeletConfig=true \
              --exit-on-lock-contention \
              --lock-file=/tmp/kubelet.lock \
              {{- if .PauseImage }}
              --pod-infra-container-image={{ .PauseImage }} \
              {{- end }}
              {{- if .InitialTaints }}
              --register-with-taints={{- .InitialTaints }} \
              {{- end }}
              {{- if eq .ContainerRuntime "containerd" }}
              --container-runtime=remote \
              --container-runtime-endpoint=unix:///run/containerd/containerd.sock \
              {{- end }}
              {{- if eq .ContainerRuntime "docker" }}
              --container-runtime=docker \
              --container-runtime-endpoint=unix:///var/run/dockershim.sock \
              {{- end }}
              --node-ip ${KUBELET_NODE_IP}

            [Install]
            WantedBy=multi-user.target

    - path: "/etc/systemd/system/kubelet.service.d/extras.conf"
      content:
        inline:
          encoding: b64
          data: |
            [Service]
            Environment="KUBELET_EXTRA_ARGS=--resolv-conf=/run/systemd/resolve/resolv.conf"

    - path: "/etc/kubernetes/cloud-config"
      permissions: 0600
      content:
        inline:
          encoding: b64
          data: |
            {{ .CloudConfig }}

    - path: "/opt/bin/setup_net_env.sh"
      permissions: 0755
      content:
        inline:
          encoding: b64
          data: |
            #!/usr/bin/env bash
            echodate() {
              echo "[$(date -Is)]" "$@"
            }

            # get the default interface IP address
            DEFAULT_IFC_IP=$(ip -o  route get 1 | grep -oP "src \K\S+")

            if [ -z "${DEFAULT_IFC_IP}" ]
            then
              echodate "Failed to get IP address for the default route interface"
              exit 1
            fi


            # get the full hostname
            FULL_HOSTNAME=$(hostname -f)
            # if /etc/hostname is not empty then use the hostname from there
            if [ -s /etc/hostname ]; then
              FULL_HOSTNAME=$(cat /etc/hostname)
            fi

            # write the nodeip_env file
            # we need the line below because flatcar has the same string "coreos" in that file
            if grep -q coreos /etc/os-release
            then
              echo "KUBELET_NODE_IP=${DEFAULT_IFC_IP}\nKUBELET_HOSTNAME=${FULL_HOSTNAME}" > /etc/kubernetes/nodeip.conf
            elif [ ! -d /etc/systemd/system/kubelet.service.d ]
            then
              echodate "Can't find kubelet service extras directory"
              exit 1
            else
              echo -e "[Service]\nEnvironment=\"KUBELET_NODE_IP=${DEFAULT_IFC_IP}\"\nEnvironment=\"KUBELET_HOSTNAME=${FULL_HOSTNAME}\"" > /etc/systemd/system/kubelet.service.d/nodeip.conf
            fi

    - path: "/etc/kubernetes/bootstrap-kubelet.conf"
      permissions: 0600
      content:
        inline:
          encoding: b64
          data: |
            {{ .Kubeconfig }}

    - path: "/etc/kubernetes/pki/ca.crt"
      content:
        inline:
          encoding: b64
          data: |
            {{ .KubernetesCACert }}

    - path: "/etc/systemd/system/setup.service"
      permissions: 0644
      content:
        inline:
          encoding: b64
          data: |
            [Install]
            WantedBy=multi-user.target

            [Unit]
            Requires=network-online.target
            After=network-online.target

            [Service]
            Type=oneshot
            RemainAfterExit=true
            EnvironmentFile=-/etc/environment
            ExecStart=/opt/bin/supervise.sh /opt/bin/setup

    - path: "/etc/profile.d/opt-bin-path.sh"
      permissions: 0644
      content:
        inline:
          encoding: b64
          data: |
            export PATH="/opt/bin:$PATH"

    - path: "/etc/kubernetes/kubelet.conf"
      content:
        inline:
          encoding: b64
          data: |
            apiVersion: kubelet.config.k8s.io/v1beta1
            kind: KubeletConfiguration
            authentication:
              anonymous:
                enabled: false
              webhook:
                enabled: true
              x509:
                clientCAFile: /etc/kubernetes/pki/ca.crt
            authorization:
              mode: Webhook
            cgroupDriver: systemd
            clusterDNS:
            {{- range .ClusterDNSIPs }}
            - "{{ . }}"
            {{- end }}
            clusterDomain: cluster.local
            featureGates:
              RotateKubeletServerCertificate: true
            protectKernelDefaults: true
            readOnlyPort: 0
            rotateCertificates: true
            serverTLSBootstrap: true
            staticPodPath: /etc/kubernetes/manifests
            kubeReserved:
              cpu: 200m
              ephemeral-storage: 1Gi
              memory: 200Mi
            systemReserved:
              cpu: 200m
              ephemeral-storage: 1Gi
              memory: 200Mi
            tlsCipherSuites:
            - TLS_AES_128_GCM_SHA256
            - TLS_AES_256_GCM_SHA384
            - TLS_CHACHA20_POLY1305_SHA256
            - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
            - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
            - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
            - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
            - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
            - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
            volumePluginDir: /var/lib/kubelet/volumeplugins

    - path: /etc/systemd/system/kubelet-healthcheck.service
      permissions: 0644
      content:
        inline:
          encoding: b64
          data: |
            [Unit]
            Requires=kubelet.service
            After=kubelet.service

            [Service]
            ExecStart=/opt/bin/health-monitor.sh kubelet

            [Install]
            WantedBy=multi-user.target
