# Copyright 2021 The Kubermatic Kubernetes Platform contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: operatingsystemmanager.k8c.io/v1alpha1
kind: OperatingSystemProfile
metadata:
  name: osp-flatcar-aws
  namespace: kube-system
spec:
  osName: "flatcar"
  ## Flatcar Stable (2021-10-27)
  osVersion: "2605.22.1"
  supportedCloudProviders:
    - name: "aws"
      spec:
        region: "us-west-1a"
  units:
    - name: download-script.service
      enable: true
      content: |
        [Unit]
        Requires=network-online.target
        After=network-online.target
        [Service]
        Type=oneshot
        EnvironmentFile=-/etc/environment
        ExecStart=/opt/bin/download.sh
        [Install]
        WantedBy=multi-user.target

    - name: nodeip.service
      enable: true
      content: |
        [Unit]
        Description=Setup Kubelet Node IP Env
        Requires=network-online.target
        After=network-online.target

        [Service]
        ExecStart=/opt/bin/setup_net_env.sh
        RemainAfterExit=yes
        Type=oneshot
        [Install]
        WantedBy=multi-user.target

    - name: containerd.service
      enable: true
      dropIns:
      - name: 10-environment.conf
        content: |
          [Service]
          EnvironmentFile=-/etc/environment

  files:
    - path: "/etc/systemd/journald.conf.d/max_disk_use.conf"
      content:
        inline:
          encoding: b64
          data: |
            [Journal]
            SystemMaxUse=5G

    - path: "/etc/kubernetes/kubelet.conf"
      content:
        inline:
          encoding: b64
          data: |
            {{ .KubeletConfiguration }}

    - path: "/opt/load-kernel-modules.sh"
      permissions: 0755
      content:
        inline:
          encoding: b64
          data: |
            #!/usr/bin/env bash
            set -euo pipefail

            modprobe ip_vs
            modprobe ip_vs_rr
            modprobe ip_vs_wrr
            modprobe ip_vs_sh

            if modinfo nf_conntrack_ipv4 &> /dev/null; then
              modprobe nf_conntrack_ipv4
            else
              modprobe nf_conntrack
            fi
 
    - path: "/etc/sysctl.d/k8s.conf"
      content:
        inline:
          encoding: b64
          data: |
            net.bridge.bridge-nf-call-ip6tables = 1
            net.bridge.bridge-nf-call-iptables = 1
            kernel.panic_on_oops = 1
            kernel.panic = 10
            net.ipv4.ip_forward = 1
            vm.overcommit_memory = 1
            fs.inotify.max_user_watches = 1048576

    - path: /proc/sys/kernel/panic_on_oops
      permissions: 0644
      content:
        inline:
          encoding: b64
          data: |
            1

    - path: /proc/sys/kernel/panic
      permissions: 0644
      content:
        inline:
          encoding: b64
          data: |
            10

    - path: /proc/sys/vm/overcommit_memory
      permissions: 0644
      content:
        inline:
          encoding: b64
          data: |
            1

    - path: "/opt/bin/setup_net_env.sh"
      permissions: 0755
      content:
        inline:
          encoding: b64
          data: |
            #!/usr/bin/env bash
            echodate() {
              echo "[$(date -Is)]" "$@"
            }

            # get the default interface IP address
            DEFAULT_IFC_IP=$(ip -o  route get 1 | grep -oP "src \K\S+")

            # get the full hostname
            FULL_HOSTNAME=$(hostname -f)

            if [ -z "${DEFAULT_IFC_IP}" ]
            then
              echodate "Failed to get IP address for the default route interface"
              exit 1
            fi

            # write the nodeip_env file
            # we need the line below because flatcar has the same string "coreos" in that file
            if grep -q coreos /etc/os-release
            then
              echo -e "KUBELET_NODE_IP=${DEFAULT_IFC_IP}\nKUBELET_HOSTNAME=${FULL_HOSTNAME}" > /etc/kubernetes/nodeip.conf
            elif [ ! -d /etc/systemd/system/kubelet.service.d ]
            then
              echodate "Can't find kubelet service extras directory"
              exit 1
            else
              echo -e "[Service]\nEnvironment=\"KUBELET_NODE_IP=${DEFAULT_IFC_IP}\"\nEnvironment=\"KUBELET_HOSTNAME=${FULL_HOSTNAME}\"" > /etc/systemd/system/kubelet.service.d/nodeip.conf
            fi

    - path: /etc/ssh/sshd_config
      permissions: 0600
      content:
        inline:
          encoding: b64
          data: |
            # Use most defaults for sshd configuration.
            Subsystem sftp internal-sftp
            ClientAliveInterval 180
            UseDNS no
            UsePAM yes
            PrintLastLog no # handled by PAM
            PrintMotd no # handled by PAM
            PasswordAuthentication no
            ChallengeResponseAuthentication no

    - path: "/opt/bin/setup"
      permissions: 0755
      content:
        inline:
          encoding: b64
          data: |
            #!/bin/bash
            set -xeuo pipefail
            if systemctl is-active ufw; then systemctl stop ufw; fi
            systemctl mask ufw

            {{- /* As we added some modules and don't want to reboot, restart the service */}}
            systemctl restart systemd-modules-load.service
            sysctl --system

            {{- /* Make sure we always disable swap - Otherwise the kubelet won't start'. */}}
            sed -i.orig '/.*swap.*/d' /etc/fstab
            swapoff -a

            apt-get update

            DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y \
              curl \
              ca-certificates \
              ceph-common \
              cifs-utils \
              conntrack \
              e2fsprogs \
              ebtables \
              ethtool \
              glusterfs-client \
              iptables \
              jq \
              kmod \
              openssh-client \
              nfs-common \
              socat \
              util-linux \
              {{- if eq .CloudProviderName "vsphere" }}
              open-vm-tools \
              {{- end }}
              ipvsadm

            # Update grub to include kernel command options to enable swap accounting.
            # Exclude alibaba cloud until this is fixed https://github.com/kubermatic/machine-controller/issues/682
            {{ if eq .CloudProviderName "alibaba" }}
            if grep -v -q swapaccount=1 /proc/cmdline
            then
              echo "Reboot system if not alibaba cloud"
              update-grub
              touch /var/run/reboot-required
            fi
            {{ end }}
            
            apt-get update
            apt-get install -y apt-transport-https ca-certificates curl software-properties-common lsb-release
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
            add-apt-repository "deb https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

            mkdir -p /etc/systemd/system/containerd.service.d /etc/systemd/system/docker.service.d

            cat <<EOF | tee /etc/systemd/system/containerd.service.d/environment.conf /etc/systemd/system/docker.service.d/environment.conf
            [Service]
            Restart=always
            EnvironmentFile=-/etc/environment
            EOF

            apt-get install -y \
                containerd.io=1.4.3* \
                docker-ce=5:19.03.13* \
                docker-ce-cli=5:19.03.13*
            apt-mark hold docker-ce docker-ce-cli containerd.io

            systemctl daemon-reload
            systemctl enable --now docker

            {{ .SafeDownloadBinariesScript }}
            # set kubelet nodeip environment variable
            /opt/bin/setup_net_env.sh

            systemctl enable --now kubelet
            systemctl enable --now --no-block kubelet-healthcheck.service

    - path: "/etc/systemd/system/kubelet.service"
      content:
        inline:
          encoding: b64
          data: |
            {{ .KubeletSystemdUnit }}