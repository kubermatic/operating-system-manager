# Copyright 2021 The Operating System Manager contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: operatingsystemmanager.k8c.io/v1alpha1
kind: OperatingSystemProfile
metadata:
  name: osp-flatcar-aws
  namespace: cloud-init-settings
spec:
  osName: flatcar
  ## Flatcar Stable (09/11/2021)
  osVersion: "2983.2.0"
  supportedCloudProviders:
    - name: aws
      spec:
        region: us-west-1a
  supportedContainerRuntimes:
    - name: containerd
      files:
        - path: /etc/containerd/config.toml
          permissions: 0644
          content:
            inline:
              data: |
                version = 2

                [metrics]
                address = "127.0.0.1:1338"

                [plugins]
                [plugins."io.containerd.grpc.v1.cri"]
                [plugins."io.containerd.grpc.v1.cri".containerd]
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                runtime_type = "io.containerd.runc.v2"
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                SystemdCgroup = true
                [plugins."io.containerd.grpc.v1.cri".registry]
                [plugins."io.containerd.grpc.v1.cri".registry.mirrors]
                [plugins."io.containerd.grpc.v1.cri".registry.mirrors."docker.io"]
                endpoint = ["https://registry-1.docker.io"]
        - path: /etc/systemd/system/containerd.service.d/10-custom.conf
          content:
            inline:
              data: |
                [Service]
                Restart=always
                EnvironmentFile=-/etc/environment
                Environment=CONTAINERD_CONFIG=/etc/containerd/config.toml
                ExecStart=
                ExecStart=/usr/bin/env PATH=${TORCX_BINDIR}:${PATH} ${TORCX_BINDIR}/containerd --config ${CONTAINERD_CONFIG}
        - path: /etc/crictl.yaml
          content:
            inline:
              data: |
                runtime-endpoint: unix:///run/containerd/containerd.sock

    - name: docker
      files:
        - path: /etc/docker/daemon.json
          permissions: 0644
          content:
            inline:
              data: |-
                {"exec-opts":["native.cgroupdriver=systemd"],"storage-driver":"overlay2","log-driver":"json-file","log-opts":{"max-file":"5","max-size":"10m"}}
        - path: /etc/systemd/system/docker.service.d/10-custom.conf
          permissions: 0644
          content:
            inline:
              data: |-
                [Service]
                EnvironmentFile=-/etc/environment

  templates:
    safeDownloadBinariesScript: |-
      {{- /*setup some common directories */ -}}
      opt_bin=/opt/bin
      usr_local_bin=/usr/local/bin
      cni_bin_dir=/opt/cni/bin

      {{- /* create all the necessary dirs */}}
      mkdir -p /etc/cni/net.d /etc/kubernetes/dynamic-config-dir /etc/kubernetes/manifests "$opt_bin" "$cni_bin_dir"

      {{- /* HOST_ARCH can be defined outside of machine-controller (in kubeone for example) */}}
      arch=${HOST_ARCH-}
      if [ -z "$arch" ]
      then
      case $(uname -m) in
      x86_64)
          arch="amd64"
          ;;
      aarch64)
          arch="arm64"
          ;;
      *)
          echo "unsupported CPU architecture, exiting"
          exit 1
          ;;
      esac
      fi

      {{- /* # CNI variables */}}
      CNI_VERSION="${CNI_VERSION:-{{ .CNIVersion }}}"
      cni_base_url="https://github.com/containernetworking/plugins/releases/download/$CNI_VERSION"
      cni_filename="cni-plugins-linux-$arch-$CNI_VERSION.tgz"

      {{- /* download CNI */}}
      curl -Lfo "$cni_bin_dir/$cni_filename" "$cni_base_url/$cni_filename"

      {{- /* download CNI checksum */}}
      cni_sum=$(curl -Lf "$cni_base_url/$cni_filename.sha256")
      cd "$cni_bin_dir"

      {{- /* verify CNI checksum */}}
      sha256sum -c <<<"$cni_sum"

      {{- /* unpack CNI */}}
      tar xvf "$cni_filename"
      rm -f "$cni_filename"
      cd -

      {{- /* kubelet */}}
      KUBE_VERSION="${KUBE_VERSION:-{{ .KubeVersion }}}"
      kube_dir="$opt_bin/kubernetes-$KUBE_VERSION"
      kube_base_url="https://storage.googleapis.com/kubernetes-release/release/$KUBE_VERSION/bin/linux/$arch"
      kube_sum_file="$kube_dir/sha256"

      {{- /* create versioned kube dir */}}
      mkdir -p "$kube_dir"
      : >"$kube_sum_file"

      for bin in kubelet kubeadm kubectl; do
          {{- /* download kube binary */}}
          curl -Lfo "$kube_dir/$bin" "$kube_base_url/$bin"
          chmod +x "$kube_dir/$bin"

          {{- /* download kube binary checksum */}}
          sum=$(curl -Lf "$kube_base_url/$bin.sha256")

          {{- /* save kube binary checksum */}}
          echo "$sum  $kube_dir/$bin" >>"$kube_sum_file"
      done

      {{- /* check kube binaries checksum */}}
      sha256sum -c "$kube_sum_file"

      for bin in kubelet kubeadm kubectl; do
          {{- /* link kube binaries from verioned dir to $opt_bin */}}
          ln -sf "$kube_dir/$bin" "$opt_bin"/$bin
      done

      if [[ ! -x /opt/bin/health-monitor.sh ]]; then
          curl -Lfo /opt/bin/health-monitor.sh https://raw.githubusercontent.com/kubermatic/machine-controller/7967a0af2b75f29ad2ab227eeaa26ea7b0f2fbde/pkg/userdata/scripts/health-monitor.sh
          chmod +x /opt/bin/health-monitor.sh
      fi

    configureStaticNetwork: |-
      {{- if .NetworkConfig }}
      mkdir -p /etc/systemd/system/systemd-networkd.service.d/
      cat << EOF | tee /etc/systemd/system/systemd-networkd.service.d/10-static-network.conf
      [Match]
      # Because of difficulty predicting specific NIC names on different cloud providers,
      # we only support static addressing on VSphere. There should be a single NIC attached
      # that we will match by name prefix 'en' which denotes ethernet devices.
      Name=en*

      [Network]
      DHCP=no
      Address={{ .NetworkConfig.CIDR }}
      Gateway={{ .NetworkConfig.Gateway }}
      {{range .NetworkConfig.DNS.Servers}}DNS={{.}}
      {{end}}
      EOF
      {{- end }}

  units:
    - name: setup.service
      enable: true
      content: |
        [Install]
        WantedBy=multi-user.target

        [Unit]
        Requires=download-script.service
        After=download-script.service

        [Service]
        Type=oneshot
        RemainAfterExit=true
        EnvironmentFile=-/etc/environment
        ExecStart=/opt/bin/setup

    - name: download-script.service
      enable: true
      content: |
        [Install]
        WantedBy=multi-user.target

        [Unit]
        Requires=network-online.target
        After=network-online.target

        [Service]
        Type=oneshot
        RemainAfterExit=true
        EnvironmentFile=-/etc/environment
        ExecStart=/opt/bin/download.sh

    - name: nodeip.service
      enable: true
      content: |
        [Unit]
        Description=Setup Kubelet Node IP Env
        Requires=network-online.target
        After=network-online.target

        [Service]
        ExecStart=/opt/bin/setup_net_env.sh
        RemainAfterExit=yes
        Type=oneshot
        [Install]
        WantedBy=multi-user.target

    - name: static-network-script.service
      enable: true
      content: |
        [Unit]
        Description=Setup Static Networking
        Requires=network-online.target
        After=network-online.target

        [Service]
        ExecStart=/opt/bin/configure_static_network.sh
        RemainAfterExit=yes
        Type=oneshot
        [Install]
        WantedBy=multi-user.target

  files:
    - path: /etc/systemd/journald.conf.d/max_disk_use.conf
      content:
        inline:
          data: |
            [Journal]
            SystemMaxUse=5G

    - path: /opt/load-kernel-modules.sh
      permissions: 0755
      content:
        inline:
          data: |
            #!/usr/bin/env bash
            set -euo pipefail

            modprobe ip_vs
            modprobe ip_vs_rr
            modprobe ip_vs_wrr
            modprobe ip_vs_sh

            if modinfo nf_conntrack_ipv4 &> /dev/null; then
              modprobe nf_conntrack_ipv4
            else
              modprobe nf_conntrack
            fi

    - path: /etc/sysctl.d/k8s.conf
      content:
        inline:
          data: |
            net.bridge.bridge-nf-call-ip6tables = 1
            net.bridge.bridge-nf-call-iptables = 1
            kernel.panic_on_oops = 1
            kernel.panic = 10
            net.ipv4.ip_forward = 1
            vm.overcommit_memory = 1
            fs.inotify.max_user_watches = 1048576

    - path: /opt/bin/setup_net_env.sh
      permissions: 0755
      content:
        inline:
          data: |
            #!/usr/bin/env bash
            echodate() {
              echo "[$(date -Is)]" "$@"
            }

            # get the default interface IP address
            DEFAULT_IFC_IP=$(ip -o  route get 1 | grep -oP "src \K\S+")

            if [ -z "${DEFAULT_IFC_IP}" ]
            then
              echodate "Failed to get IP address for the default route interface"
              exit 1
            fi

            # get the full hostname
            FULL_HOSTNAME=$(hostname -f)

            # write the nodeip_env file
            # we need the line below because flatcar has the same string "coreos" in that file
            if grep -q coreos /etc/os-release
            then
              echo -e "KUBELET_NODE_IP=${DEFAULT_IFC_IP}\nKUBELET_HOSTNAME=${FULL_HOSTNAME}" > /etc/kubernetes/nodeip.conf
            elif [ ! -d /etc/systemd/system/kubelet.service.d ]
            then
              echodate "Can't find kubelet service extras directory"
              exit 1
            else
              echo -e "[Service]\nEnvironment=\"KUBELET_NODE_IP=${DEFAULT_IFC_IP}\"\nEnvironment=\"KUBELET_HOSTNAME=${FULL_HOSTNAME}\"" > /etc/systemd/system/kubelet.service.d/nodeip.conf
            fi

    - path: /opt/bin/configure_static_network.sh
      permissions: 0755
      content:
        inline:
          data: |
            #!/usr/bin/env bash
            set -xeuo pipefail

            {{- template "configureStaticNetwork" }}

    - path: /opt/bin/download.sh
      permissions: 0755
      content:
        inline:
          data: |
            #!/usr/bin/env bash
            set -xeuo pipefail

            {{- template "safeDownloadBinariesScript" }}

            systemctl disable download-script.service

    - path: /opt/bin/setup
      permissions: 0755
      content:
        inline:
          data: |
            #!/bin/bash
            set -xeuo pipefail

            {{- if not .FlatcarConfig.DisableAutoUpdate }}
            cat << EOF | tee /etc/polkit-1/rules.d/60-noreboot_norestart.rules
            polkit.addRule(function(action, subject) {
              if (action.id == "org.freedesktop.login1.reboot" ||
                  action.id == "org.freedesktop.login1.reboot-multiple-sessions") {
                  if (subject.user == "core") {
                      return polkit.Result.YES;
                  } else {
                      return polkit.Result.AUTH_ADMIN;
                  }
              }
            });
            EOF
            {{- end }}

            {{- if or .FlatcarConfig.DisableUpdateEngine .FlatcarConfig.DisableAutoUpdate }}
            systemctl stop update-engine.service
            systemctl mask update-engine.service
            {{- end }}

            {{- if or .FlatcarConfig.DisableLocksmithD .FlatcarConfig.DisableAutoUpdate }}
            systemctl stop locksmithd.service
            systemctl mask locksmithd.service
            {{- end }}

            {{- /* Since both container runtimes are enabled/started by default in flatcar, disable the one that is not required */}}
            {{- if eq .ContainerRuntime "containerd" }}
            systemctl disable docker
            {{- end }}
            {{- if eq .ContainerRuntime "docker" }}
            systemctl disable containerd
            {{- end }}

            systemctl enable --now kubelet
            systemctl enable --now --no-block kubelet-healthcheck.service
            systemctl disable setup.service

    - path: /etc/kubernetes/bootstrap-kubelet.conf
      permissions: 0600
      content:
        inline:
          data: |
            {{ .Kubeconfig }}

    - path: /etc/kubernetes/pki/ca.crt
      content:
        inline:
          data: |
            {{ .KubernetesCACert }}

    - path: /etc/systemd/system/kubelet.service
      content:
        inline:
          data: |
            [Unit]
            After={{ .ContainerRuntime }}.service
            Requires={{ .ContainerRuntime }}.service

            Description=kubelet: The Kubernetes Node Agent
            Documentation=https://kubernetes.io/docs/home/

            [Service]
            Restart=always
            StartLimitInterval=0
            RestartSec=10
            CPUAccounting=true
            MemoryAccounting=true

            Environment="PATH=/opt/bin:/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin/"
            EnvironmentFile=-/etc/environment

            ExecStartPre=/bin/bash /opt/load-kernel-modules.sh
            ExecStartPre=/bin/bash /opt/bin/setup_net_env.sh
            ExecStart=/opt/bin/kubelet $KUBELET_EXTRA_ARGS \
              --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf \
              --kubeconfig=/var/lib/kubelet/kubeconfig \
              --config=/etc/kubernetes/kubelet.conf \
              --network-plugin=cni \
              --cert-dir=/etc/kubernetes/pki \
              {{- if .ExternalCloudProvider }}
              --cloud-provider=external \
              {{- else if .CloudProviderName }}
              --cloud-provider={{- .CloudProviderName}} \
              --cloud-config=/etc/kubernetes/cloud-config \
              {{- end }}
              {{- if ne .CloudProviderName "aws" }}
              --hostname-override=${KUBELET_HOSTNAME} \
              {{- end }}
              --dynamic-config-dir=/etc/kubernetes/dynamic-config-dir \
              --feature-gates=DynamicKubeletConfig=true \
              --exit-on-lock-contention \
              --lock-file=/tmp/kubelet.lock \
              {{- if .PauseImage }}
              --pod-infra-container-image={{ .PauseImage }} \
              {{- end }}
              {{- if .InitialTaints }}
              --register-with-taints={{- .InitialTaints }} \
              {{- end }}
              {{- if eq .ContainerRuntime "containerd" }}
              --container-runtime=remote \
              --container-runtime-endpoint=unix:///run/containerd/containerd.sock \
              {{- end }}
              {{- if eq .ContainerRuntime "docker" }}
              --container-runtime=docker \
              --container-runtime-endpoint=unix:///var/run/dockershim.sock \
              {{- end }}
              --node-ip ${KUBELET_NODE_IP}

            [Install]
            WantedBy=multi-user.target

    - path: /etc/kubernetes/cloud-config
      permissions: 0400
      content:
        inline:
          data: |
            {{ .CloudConfig }}

    - path: /etc/kubernetes/kubelet.conf
      content:
        inline:
          data: |
            apiVersion: kubelet.config.k8s.io/v1beta1
            kind: KubeletConfiguration
            authentication:
              anonymous:
                enabled: false
              webhook:
                enabled: true
              x509:
                clientCAFile: /etc/kubernetes/pki/ca.crt
            authorization:
              mode: Webhook
            cgroupDriver: systemd
            {{- if ne (len .ClusterDNSIPs) 0 }}
            clusterDNS:
            {{range .ClusterDNSIPs}}- {{.}}
            {{- end }}
            {{- end }}
            clusterDomain: cluster.local
            featureGates:
              RotateKubeletServerCertificate: true
            protectKernelDefaults: true
            readOnlyPort: 0
            rotateCertificates: true
            serverTLSBootstrap: true
            staticPodPath: /etc/kubernetes/manifests
            kubeReserved:
              cpu: 200m
              ephemeral-storage: 1Gi
              memory: 200Mi
            systemReserved:
              cpu: 200m
              ephemeral-storage: 1Gi
              memory: 200Mi
            tlsCipherSuites:
            - TLS_AES_128_GCM_SHA256
            - TLS_AES_256_GCM_SHA384
            - TLS_CHACHA20_POLY1305_SHA256
            - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
            - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
            - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
            - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
            - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
            - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
            volumePluginDir: /var/lib/kubelet/volumeplugins

    - path: /etc/systemd/system/kubelet-healthcheck.service
      permissions: 0644
      content:
        inline:
          data: |
            [Unit]
            Requires=kubelet.service
            After=kubelet.service

            [Service]
            ExecStart=/opt/bin/health-monitor.sh kubelet

            [Install]
            WantedBy=multi-user.target

    ## Flatcar specific configuration
    - path: /proc/sys/kernel/panic_on_oops
      permissions: 0644
      content:
        inline:
          data: |
            1

    - path: /proc/sys/kernel/panic
      permissions: 0644
      content:
        inline:
          data: |
            10

    - path: /proc/sys/vm/overcommit_memory
      permissions: 0644
      content:
        inline:
          data: |
            1

    - path: /etc/ssh/sshd_config
      permissions: 0600
      content:
        inline:
          data: |
            # Use most defaults for sshd configuration.
            Subsystem sftp internal-sftp
            ClientAliveInterval 180
            UseDNS no
            UsePAM yes
            PrintLastLog no # handled by PAM
            PrintMotd no # handled by PAM
            PasswordAuthentication no
            ChallengeResponseAuthentication no
