# Copyright 2021 The Kubermatic Kubernetes Platform contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: operatingsystemmanager.k8c.io/v1alpha1
kind: OperatingSystemProfile
metadata:
  name: osp-flatcar-aws
  namespace: kube-system
spec:
  osName: flatcar
  ## Flatcar Stable (2021-10-27)
  osVersion: "2605.22.1"
  supportedCloudProviders:
    - name: aws
      spec:
        region: us-west-1a
  units:
    - name: containerd.service
      enable: true
      dropIns:
      - name: 10-custom.conf
        content: |
          [Service]
          Restart=always
          EnvironmentFile=-/etc/environment
          Environment=CONTAINERD_CONFIG=/etc/containerd/config.toml
          ExecStart=
          ExecStart=/usr/bin/env PATH=${TORCX_BINDIR}:${PATH} ${TORCX_BINDIR}/containerd --config ${CONTAINERD_CONFIG}

    - name: download-script.service
      enable: true
      content: |
        [Unit]
        Requires=network-online.target
        After=network-online.target
        [Service]
        Type=oneshot
        EnvironmentFile=-/etc/environment
        ExecStart=/opt/bin/download.sh
        [Install]
        WantedBy=multi-user.target

    - name: kubelet-healthcheck.service
      enable: true
      dropIns:
      - name: 40-download.conf
        content: |
          [Unit]
          Requires=download-script.service
          After=download-script.service
      content: |
        [Unit]
        Requires=kubelet.service
        After=kubelet.service

        [Service]
        ExecStart=/opt/bin/health-monitor.sh kubelet

        [Install]
        WantedBy=multi-user.target

    - name: nodeip.service
      enable: true
      content: |
        [Unit]
        Description=Setup Kubelet Node IP Env
        Requires=network-online.target
        After=network-online.target

        [Service]
        ExecStart=/opt/bin/setup_net_env.sh
        RemainAfterExit=yes
        Type=oneshot
        [Install]
        WantedBy=multi-user.target

    - name: kubelet.service
      enable: true
      dropIns:
      - name: 10-nodeip.conf
        content: |
          [Service]
          EnvironmentFile=/etc/kubernetes/nodeip.conf
      - name: 40-download.conf
        content: |
          [Unit]
          Requires=download-script.service
          After=download-script.service
      content: |
        {{ .KubeletSystemdUnit}}
          
  files:
    - path: /etc/systemd/journald.conf.d/max_disk_use.conf
      content:
        inline:
          encoding: none
          data: |
            [Journal]
            SystemMaxUse=5G

    - path: /opt/load-kernel-modules.sh
      permissions: 0755
      content:
        inline:
          encoding: none
          data: |
            #!/usr/bin/env bash
            set -euo pipefail

            modprobe ip_vs
            modprobe ip_vs_rr
            modprobe ip_vs_wrr
            modprobe ip_vs_sh

            if modinfo nf_conntrack_ipv4 &> /dev/null; then
              modprobe nf_conntrack_ipv4
            else
              modprobe nf_conntrack
            fi

    - path: /etc/sysctl.d/k8s.conf
      content:
        inline:
          encoding: none
          data: |
            net.bridge.bridge-nf-call-ip6tables = 1
            net.bridge.bridge-nf-call-iptables = 1
            kernel.panic_on_oops = 1
            kernel.panic = 10
            net.ipv4.ip_forward = 1
            vm.overcommit_memory = 1
            fs.inotify.max_user_watches = 1048576

    - path: /proc/sys/kernel/panic_on_oops
      permissions: 0644
      content:
        inline:
          encoding: none
          data: |
            1

    - path: /proc/sys/kernel/panic
      permissions: 0644
      content:
        inline:
          encoding: none
          data: |
            10

    - path: /proc/sys/vm/overcommit_memory
      permissions: 0644
      content:
        inline:
          encoding: none
          data: |
            1

    - path: /opt/bin/setup_net_env.sh
      permissions: 0755
      content:
        inline:
          encoding: none
          data: |
            #!/usr/bin/env bash
            echodate() {
              echo "[$(date -Is)]" "$@"
            }

            # get the default interface IP address
            DEFAULT_IFC_IP=$(ip -o  route get 1 | grep -oP "src \K\S+")

            # get the full hostname
            FULL_HOSTNAME=$(hostname -f)

            if [ -z "${DEFAULT_IFC_IP}" ]
            then
              echodate "Failed to get IP address for the default route interface"
              exit 1
            fi

            # write the nodeip_env file
            # we need the line below because flatcar has the same string "coreos" in that file
            if grep -q coreos /etc/os-release
            then
              echo -e "KUBELET_NODE_IP=${DEFAULT_IFC_IP}\nKUBELET_HOSTNAME=${FULL_HOSTNAME}" > /etc/kubernetes/nodeip.conf
            elif [ ! -d /etc/systemd/system/kubelet.service.d ]
            then
              echodate "Can't find kubelet service extras directory"
              exit 1
            else
              echo -e "[Service]\nEnvironment=\"KUBELET_NODE_IP=${DEFAULT_IFC_IP}\"\nEnvironment=\"KUBELET_HOSTNAME=${FULL_HOSTNAME}\"" > /etc/systemd/system/kubelet.service.d/nodeip.conf
            fi

    - path: /opt/bin/setup_net_env.sh
      permissions: 0755
      content:
        inline:
          encoding: none
          data: |
            #!/bin/bash
            set -xeuo pipefail
            {{ .SafeDownloadBinariesScript }}
            systemctl disable download-script.service

    - path: /etc/kubernetes/bootstrap-kubelet.conf
      permissions: 0600
      content:
        inline:
          encoding: none
          data: |
            {{ .Kubeconfig }}


    - path: /etc/kubernetes/pki/ca.crt
      content:
        inline:
          encoding: none
          data: |
            {{ .KubernetesCACert }}

    - path: /etc/kubernetes/cloud-config
      permissions: 0400
      content:
        inline:
          encoding: none
          data: |
            {{ .CloudConfig }}

    - path: "/etc/kubernetes/kubelet.conf"
      content:
        inline:
          encoding: "none"
          data: |
            {{ .KubeletConfiguration }}

    - path: /etc/ssh/sshd_config
      permissions: 0600
      content:
        inline:
          encoding: "none"
          data: |
            # Use most defaults for sshd configuration.
            Subsystem sftp internal-sftp
            ClientAliveInterval 180
            UseDNS no
            UsePAM yes
            PrintLastLog no # handled by PAM
            PrintMotd no # handled by PAM
            PasswordAuthentication no
            ChallengeResponseAuthentication no
    
    - path: /etc/crictl.yaml
      content:
        inline:
          encoding: none
          data: |
            runtime-endpoint: unix:///run/containerd/containerd.sock

    - path: /etc/containerd/config.toml
      content:
        inline:
          encoding: none
          data: |
            version = 2
            [metrics]
            address = "127.0.0.1:1338"
            [plugins]
            [plugins."io.containerd.grpc.v1.cri"]
            [plugins."io.containerd.grpc.v1.cri".containerd]
            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
            runtime_type = "io.containerd.runc.v2"
            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
            SystemdCgroup = true
            [plugins."io.containerd.grpc.v1.cri".registry]
            [plugins."io.containerd.grpc.v1.cri".registry.mirrors]
            [plugins."io.containerd.grpc.v1.cri".registry.mirrors."docker.io"]
            endpoint = ["https://registry-1.docker.io"]