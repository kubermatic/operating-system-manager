# Copyright 2021 The Kubermatic Kubernetes Platform contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: operatingsystemmanager.k8c.io/v1alpha1
kind: OperatingSystemProfile
metadata:
  name: osp-ubuntu-aws
  namespace: kube-system
spec:
  osName: "ubuntu"
  osVersion: "20.04"
  supportedCloudProviders:
    - name: "aws"
      spec:
        region: "eu-central-1"
  supportedContainerRuntimes:
    - name: containerd
      script : |-
        apt-get update
        apt-get install -y apt-transport-https ca-certificates curl software-properties-common lsb-release
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
        add-apt-repository "deb https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

        cat <<EOF | tee /etc/crictl.yaml
        runtime-endpoint: unix:///run/containerd/containerd.sock
        EOF

        mkdir -p /etc/systemd/system/containerd.service.d
        cat <<EOF | tee /etc/systemd/system/containerd.service.d/environment.conf
        [Service]
        Restart=always
        EnvironmentFile=-/etc/environment
        EOF

        apt-get install -y --allow-downgrades containerd.io={{ .ContainerdVersion }}*
        apt-mark hold containerd.io

        systemctl daemon-reload
        systemctl enable --now containerd
      configFile: |-
        version = 2

        [metrics]
        address = "127.0.0.1:1338"

        [plugins]
        [plugins."io.containerd.grpc.v1.cri"]
        [plugins."io.containerd.grpc.v1.cri".containerd]
        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
        runtime_type = "io.containerd.runc.v2"
        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
        SystemdCgroup = true
        [plugins."io.containerd.grpc.v1.cri".registry]
        [plugins."io.containerd.grpc.v1.cri".registry.mirrors]
        [plugins."io.containerd.grpc.v1.cri".registry.mirrors."docker.io"]
        endpoint = ["https://registry-1.docker.io"]
  units:
    - name: test-unit-1
      enable: true
  files:
  - path: "/opt/bin/setup"
    permissions: 0755
    content:
      inline:
        encoding: b64
        data: |
          #!/bin/bash
          set -xeuo pipefail
          if systemctl is-active ufw; then systemctl stop ufw; fi
          systemctl mask ufw

          {{- /* As we added some modules and don't want to reboot, restart the service */}}
          systemctl restart systemd-modules-load.service
          sysctl --system

          {{- /* Make sure we always disable swap - Otherwise the kubelet won't start'. */}}
          sed -i.orig '/.*swap.*/d' /etc/fstab
          swapoff -a

          apt-get update

          DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install -y \
            curl \
            ca-certificates \
            ceph-common \
            cifs-utils \
            conntrack \
            e2fsprogs \
            ebtables \
            ethtool \
            glusterfs-client \
            iptables \
            jq \
            kmod \
            openssh-client \
            nfs-common \
            socat \
            util-linux \
            {{- if eq .CloudProviderName "vsphere" }}
            open-vm-tools \
            {{- end }}
            ipvsadm

          # Update grub to include kernel command options to enable swap accounting.
          # Exclude alibaba cloud until this is fixed https://github.com/kubermatic/machine-controller/issues/682
          {{ if eq .CloudProviderName "alibaba" }}
          if grep -v -q swapaccount=1 /proc/cmdline
          then
            echo "Reboot system if not alibaba cloud"
            update-grub
            touch /var/run/reboot-required
          fi
          {{ end }}
          
          {{ template "containerRuntimeScript" }}

          {{ .SafeDownloadBinariesScript }}
          # set kubelet nodeip environment variable
          /opt/bin/setup_net_env.sh

          systemctl enable --now kubelet
          systemctl enable --now --no-block kubelet-healthcheck.service
          
  - path: "/etc/containerd/config.toml"
    permissions: 0644
    content:
      inline:
        encoding: b64
        data: |
          {{ template "containerRuntimeConfig" }}

  - path: "/etc/systemd/system/kubelet.service"
    content:
      inline:
        encoding: b64
        data: |
          [Unit]
          After={{ .ContainerRuntime }}.service
          Requires={{ .ContainerRuntime }}.service

          Description=kubelet: The Kubernetes Node Agent
          Documentation=https://kubernetes.io/docs/home/

          [Service]
          Restart=always
          StartLimitInterval=0
          RestartSec=10
          CPUAccounting=true
          MemoryAccounting=true

          Environment="PATH=/opt/bin:/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin/"
          EnvironmentFile=-/etc/environment

          ExecStartPre=/bin/bash /opt/load-kernel-modules.sh
          ExecStartPre=/bin/bash /opt/bin/setup_net_env.sh
          ExecStart=/opt/bin/kubelet $KUBELET_EXTRA_ARGS \
            --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf \
            --kubeconfig=/var/lib/kubelet/kubeconfig \
            --config=/etc/kubernetes/kubelet.conf \
            --network-plugin=cni \
            --cert-dir=/etc/kubernetes/pki \
            {{- if .IsExternal }}
            --cloud-provider=external \
            {{- end }}
            {{- if and (.Hostname) (ne .CloudProvider "aws") }}
            --hostname-override=%H \
            {{- end }}
            --dynamic-config-dir=/etc/kubernetes/dynamic-config-dir \
            --exit-on-lock-contention \
            --lock-file=/tmp/kubelet.lock \
            {{- if .PauseImage }}
            --pod-infra-container-image={{ .PauseImage }} \
            {{- end }}
            {{- if .InitialTaints }}
            --register-with-taints={{- .InitialTaints }} \
            {{- end }}
            {{- range .ExtraKubeletFlags }}
            {{ . }} \
            {{- end }}
            --node-ip ${KUBELET_NODE_IP}

          [Install]
          WantedBy=multi-user.target

  - path: "/etc/kubernetes/kubelet.conf"
    content:
      inline:
        encoding: b64
        data: |-
          apiVersion: kubelet.config.k8s.io/v1beta1
          kind: KubeletConfiguration
          authentication:
            anonymous:
              enabled: false
            webhook:
              enabled: true
            x509:
              clientCAFile: /etc/kubernetes/pki/ca.crt
          authorization:
            mode: Webhook
          cgroupDriver: systemd
          clusterDNS: {{ .ClusterDNS }}
          clusterDomain: cluster.local
          featureGates:
            RotateKubeletServerCertificate: true
          protectKernelDefaults: true
          readOnlyPort: 0
          rotateCertificates: true
          serverTLSBootstrap: true
          staticPodPath: /etc/kubernetes/manifests  
          kubeReserved:
            cpu: 200m
            ephemeral-storage: 1Gi
            memory: 200Mi
          systemReserved:
            cpu: 200m
            ephemeral-storage: 1Gi
            memory: 200Mi          
          volumePluginDir: /var/lib/kubelet/volumeplugins
      