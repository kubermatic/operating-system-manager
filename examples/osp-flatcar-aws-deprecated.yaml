# Copyright 2021 The Kubermatic Kubernetes Platform contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: operatingsystemmanager.k8c.io/v1alpha1
kind: OperatingSystemProfile
metadata:
  name: osp-flatcar-aws-deprecated
  namespace: kube-system
spec:
  osName: flatcar
  ## Flatcar Stable (2021-10-27)
  osVersion: "2605.22.1"
  supportedCloudProviders:
    - name: aws
      spec:
        region: us-west-1a
  units:
    - name: download-script.service
      enable: true
      content: |
        [Unit]
        Requires=network-online.target
        After=network-online.target
        [Service]
        Type=oneshot
        EnvironmentFile=-/etc/environment
        ExecStart=/opt/bin/download.sh
        [Install]
        WantedBy=multi-user.target

    - name: docker.service
      enable: true

    - name: docker-healthcheck.service
      enable: true
      dropIns:
      - name: 40-docker.conf
        content: |
          [Unit]
          Requires=download-script.service
          After=download-script.service
      content: |
        [Unit]
        Requires=containerd.service
        After=containerd.service

        [Service]
        ExecStart=/opt/bin/health-monitor.sh container-runtime

        [Install]
        WantedBy=multi-user.target
    - name: kubelet-healthcheck.service
      enable: true
      dropIns:
      - name: 40-docker.conf
        content: |
          [Unit]
          Requires=kubelet.service
          After=kubelet.service

          [Service]
          ExecStart=/opt/bin/health-monitor.sh kubelet

          [Install]
          WantedBy=multi-user.target

    - name: nodeip.service
      enable: true
      content: |
        [Unit]
        Description=Setup Kubelet Node IP Env
        Requires=network-online.target
        After=network-online.target

        [Service]
        ExecStart=/opt/bin/setup_net_env.sh
        RemainAfterExit=yes
        Type=oneshot
        [Install]
        WantedBy=multi-user.target

    - name: kubelet.service
      enable: true
      content: |
        [Unit]
        Description=Kubernetes Kubelet
        Requires=docker.service
        After=docker.service
        [Service]
        TimeoutStartSec=5min
        CPUAccounting=true
        MemoryAccounting=true
        EnvironmentFile=-/etc/environment
        EnvironmentFile=/etc/kubernetes/nodeip.conf
        Environment=PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/opt/bin
        ExecStartPre=/bin/bash /opt/bin/setup_net_env.sh
        ExecStartPre=/bin/mkdir -p /var/lib/calico
        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/bin/mkdir -p /etc/cni/net.d
        ExecStartPre=/bin/mkdir -p /opt/cni/bin
        ExecStartPre=/bin/bash /opt/load-kernel-modules.sh
        ExecStartPre=/bin/sh -c '/usr/bin/env > /tmp/environment'
        ExecStart=/usr/bin/docker run --name %n \
          --rm --tty --restart no \
          --network host \
          --pid host \
          --env-file /tmp/environment \
          --privileged \
          --cgroup-parent system.slice \
          --entrypoint kubelet \
          -v /dev:/dev \
          -v /etc/cni/net.d:/etc/cni/net.d \
          -v /etc/kubernetes:/etc/kubernetes \
          -v /etc/machine-id:/etc/machine-id:ro \
          -v /etc/os-release:/etc/os-release:ro \
          -v /etc/resolv.conf:/etc/resolv.conf:ro \
          -v /lib/modules:/lib/modules \
          -v /mnt:/mnt:rshared \
          -v /opt/cni/bin:/opt/cni/bin:ro \
          -v /run:/run \
          -v /sys:/sys \
          -v /usr/sbin/iscsiadm:/usr/sbin/iscsiadm \
          -v /var/lib/calico:/var/lib/calico:ro \
          -v /var/lib/cni:/var/lib/cni \
          -v /var/lib/docker:/var/lib/dockfer \
          -v /var/lib/kubelet:/var/lib/kubelet:rshared \
          -v /var/log/pods:/var/log/pods \
          {{ .KubeletImage }} \
          --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf \
          --kubeconfig=/var/lib/kubelet/kubeconfig \
          --config=/etc/kubernetes/kubelet.conf \
          --network-plugin=cni \
          --cert-dir=/etc/kubernetes/pki \
          --cloud-provider=aws \
          --cloud-config=/etc/kubernetes/cloud-config \
          --hostname-override=node1 \
          --exit-on-lock-contention \
          --lock-file=/tmp/kubelet.lock \
          --container-runtime=remote \
          --container-runtime-endpoint=unix:///run/containerd/containerd.sock \
          --dynamic-config-dir=/etc/kubernetes/dynamic-config-dir \
          --feature-gates=DynamicKubeletConfig=true \
          --node-ip ${KUBELET_NODE_IP}
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target

    - name: docker.service
      enable: true
      dropIns:
      - name: 10-environment.conf
        content: |
          [Service]
          EnvironmentFile=-/etc/environment

  files:
    - path: "/etc/systemd/journald.conf.d/max_disk_use.conf"
      content:
        inline:
          encoding: "none"
          data: |
            [Journal]
            SystemMaxUse=5G

    - path: "/opt/load-kernel-modules.sh"
      permissions: 0755
      content:
        inline:
          encoding: "none"
          data: |
            #!/usr/bin/env bash
            set -euo pipefail

            modprobe ip_vs
            modprobe ip_vs_rr
            modprobe ip_vs_wrr
            modprobe ip_vs_sh

            if modinfo nf_conntrack_ipv4 &> /dev/null; then
              modprobe nf_conntrack_ipv4
            else
              modprobe nf_conntrack
            fi
 
    - path: "/etc/sysctl.d/k8s.conf"
      content:
        inline:
          encoding: "none"
          data: |
            net.bridge.bridge-nf-call-ip6tables = 1
            net.bridge.bridge-nf-call-iptables = 1
            kernel.panic_on_oops = 1
            kernel.panic = 10
            net.ipv4.ip_forward = 1
            vm.overcommit_memory = 1
            fs.inotify.max_user_watches = 1048576

    - path: /proc/sys/kernel/panic_on_oops
      permissions: 0644
      content:
        inline:
          encoding: "none"
          data: |
            1

    - path: /proc/sys/kernel/panic
      permissions: 0644
      content:
        inline:
          encoding: "none"
          data: |
            10

    - path: /proc/sys/vm/overcommit_memory
      permissions: 0644
      content:
        inline:
          encoding: "none"
          data: |
            1

    - path: "/opt/bin/setup_net_env.sh"
      permissions: 0755
      content:
        inline:
          encoding: "none"
          data: |
            #!/usr/bin/env bash
            echodate() {
              echo "[$(date -Is)]" "$@"
            }

            # get the default interface IP address
            DEFAULT_IFC_IP=$(ip -o  route get 1 | grep -oP "src \K\S+")

            # get the full hostname
            FULL_HOSTNAME=$(hostname -f)

            if [ -z "${DEFAULT_IFC_IP}" ]
            then
              echodate "Failed to get IP address for the default route interface"
              exit 1
            fi

            # write the nodeip_env file
            # we need the line below because flatcar has the same string "coreos" in that file
            if grep -q coreos /etc/os-release
            then
              echo -e "KUBELET_NODE_IP=${DEFAULT_IFC_IP}\nKUBELET_HOSTNAME=${FULL_HOSTNAME}" > /etc/kubernetes/nodeip.conf
            elif [ ! -d /etc/systemd/system/kubelet.service.d ]
            then
              echodate "Can't find kubelet service extras directory"
              exit 1
            else
              echo -e "[Service]\nEnvironment=\"KUBELET_NODE_IP=${DEFAULT_IFC_IP}\"\nEnvironment=\"KUBELET_HOSTNAME=${FULL_HOSTNAME}\"" > /etc/systemd/system/kubelet.service.d/nodeip.conf
            fi

    - path: /etc/kubernetes/bootstrap-kubelet.conf
      permissions: 0600
      content:
        inline:
          encoding: none
          data: |
            {{ .Kubeconfig }}


    - path: /etc/kubernetes/pki/ca.crt
      content:
        inline:
          encoding: none
          data: |
            {{ .KubernetesCACert }}

    - path: /etc/kubernetes/cloud-config
      permissions: 0400
      content:
        inline:
          encoding: none
          data: |
            {{ .CloudConfig }}

    - path: "/etc/kubernetes/kubelet.conf"
      content:
        inline:
          encoding: "none"
          data: |
            {{ .KubeletConfiguration }}


    - path: /etc/docker/daemon.json
      permissions: 0644
      content:
        inline:
          encoding: "none"
          data: |
            {"exec-opts":["native.cgroupdriver=systemd"],"storage-driver":"overlay2","log-driver":"json-file","log-opts":{"max-file":"5","max-size":"10m"}}

    - path: /opt/bin/download.sh
      permissions: 0755
      content:
        inline:
          encoding: "none"
          data: |
            #!/bin/bash
            set -xeuo pipefail
            opt_bin=/opt/bin
            usr_local_bin=/usr/local/bin
            cni_bin_dir=/opt/cni/bin
            mkdir -p /etc/cni/net.d /etc/kubernetes/dynamic-config-dir /etc/kubernetes/manifests "$opt_bin" "$cni_bin_dir"
            arch=${HOST_ARCH-}
            if [ -z "$arch" ]
            then
            case $(uname -m) in
            x86_64)
                arch="amd64"
                ;;
            aarch64)
                arch="arm64"
                ;;
            *)
                echo "unsupported CPU architecture, exiting"
                exit 1
                ;;
            esac
            fi
            CNI_VERSION="${CNI_VERSION:-v0.8.7}"
            cni_base_url="https://github.com/containernetworking/plugins/releases/download/$CNI_VERSION"
            cni_filename="cni-plugins-linux-$arch-$CNI_VERSION.tgz"
            curl -Lfo "$cni_bin_dir/$cni_filename" "$cni_base_url/$cni_filename"
            cni_sum=$(curl -Lf "$cni_base_url/$cni_filename.sha256")
            cd "$cni_bin_dir"
            sha256sum -c <<<"$cni_sum"
            tar xvf "$cni_filename"
            rm -f "$cni_filename"
            cd -
            CRI_TOOLS_RELEASE="${CRI_TOOLS_RELEASE:-v1.22.0}"
            cri_tools_base_url="https://github.com/kubernetes-sigs/cri-tools/releases/download/${CRI_TOOLS_RELEASE}"
            cri_tools_filename="crictl-${CRI_TOOLS_RELEASE}-linux-${arch}.tar.gz"
            curl -Lfo "$opt_bin/$cri_tools_filename" "$cri_tools_base_url/$cri_tools_filename"
            cri_tools_sum=$(curl -Lf "$cri_tools_base_url/$cri_tools_filename.sha256" | sed 's/\*\///')
            cd "$opt_bin"
            sha256sum -c <<<"$cri_tools_sum"
            tar xvf "$cri_tools_filename"
            rm -f "$cri_tools_filename"
            ln -sf "$opt_bin/crictl" "$usr_local_bin"/crictl || echo "symbolic link is skipped"
            cd -
            KUBE_VERSION="${KUBE_VERSION:-v1.20.1}"
            kube_dir="$opt_bin/kubernetes-$KUBE_VERSION"
            kube_base_url="https://storage.googleapis.com/kubernetes-release/release/$KUBE_VERSION/bin/linux/$arch"
            kube_sum_file="$kube_dir/sha256"
            mkdir -p "$kube_dir"
            : >"$kube_sum_file"

            for bin in kubelet kubeadm kubectl; do
                curl -Lfo "$kube_dir/$bin" "$kube_base_url/$bin"
                chmod +x "$kube_dir/$bin"
                sum=$(curl -Lf "$kube_base_url/$bin.sha256")
                echo "$sum  $kube_dir/$bin" >>"$kube_sum_file"
            done
            sha256sum -c "$kube_sum_file"

            for bin in kubelet kubeadm kubectl; do
                ln -sf "$kube_dir/$bin" "$opt_bin"/$bin
            done

            if [[ ! -x /opt/bin/health-monitor.sh ]]; then
                curl -Lfo /opt/bin/health-monitor.sh https://raw.githubusercontent.com/kubermatic/machine-controller/7967a0af2b75f29ad2ab227eeaa26ea7b0f2fbde/pkg/userdata/scripts/health-monitor.sh
                chmod +x /opt/bin/health-monitor.sh
            fi

            systemctl disable download-script.service

    - path: /etc/ssh/sshd_config
      permissions: 0600
      content:
        inline:
          encoding: "none"
          data: |
            # Use most defaults for sshd configuration.
            Subsystem sftp internal-sftp
            ClientAliveInterval 180
            UseDNS no
            UsePAM yes
            PrintLastLog no # handled by PAM
            PrintMotd no # handled by PAM
            PasswordAuthentication no
            ChallengeResponseAuthentication no