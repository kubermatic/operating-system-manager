# Copyright 2021 The Operating System Manager contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: machines.cluster.k8s.io
  labels:
    local-testing: "true"
  annotations:
    "api-approved.kubernetes.io": "unapproved, legacy API"
spec:
  group: cluster.k8s.io
  scope: Namespaced
  names:
    kind: Machine
    plural: machines
    singular: machine
    listKind: MachineList
    shortNames: ["ma"]
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          x-kubernetes-preserve-unknown-fields: true
          type: object
      additionalPrinterColumns:
        - name: Provider
          type: string
          jsonPath: .spec.providerSpec.value.cloudProvider
        - name: OS
          type: string
          jsonPath: .spec.providerSpec.value.operatingSystem
        - name: Node
          type: string
          jsonPath: .status.nodeRef.name
        - name: Kubelet
          type: string
          jsonPath: .spec.versions.kubelet
        - name: Address
          type: string
          jsonPath: .status.addresses[0].address
        - name: Age
          type: date
          jsonPath: .metadata.creationTimestamp
        - name: Deleted
          type: date
          jsonPath: .metadata.deletionTimestamp
          priority: 1
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: machinesets.cluster.k8s.io
  labels:
    local-testing: "true"
  annotations:
    "api-approved.kubernetes.io": "unapproved, legacy API"
spec:
  group: cluster.k8s.io
  scope: Namespaced
  names:
    kind: MachineSet
    plural: machinesets
    singular: machineset
    listKind: MachineSetList
    shortNames: ["ms"]
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          x-kubernetes-preserve-unknown-fields: true
          type: object
      subresources:
        status: {}
      additionalPrinterColumns:
        - name: Replicas
          type: integer
          jsonPath: .spec.replicas
        - name: Available-Replicas
          type: integer
          jsonPath: .status.availableReplicas
        - name: Provider
          type: string
          jsonPath: .spec.template.spec.providerSpec.value.cloudProvider
        - name: OS
          type: string
          jsonPath: .spec.template.spec.providerSpec.value.operatingSystem
        - name: MachineDeployment
          type: string
          jsonPath: .metadata.ownerReferences[0].name
        - name: Kubelet
          type: string
          jsonPath: .spec.template.spec.versions.kubelet
        - name: Age
          type: date
          jsonPath: .metadata.creationTimestamp
        - name: Deleted
          type: date
          jsonPath: .metadata.deletionTimestamp
          priority: 1
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: machinedeployments.cluster.k8s.io
  labels:
    local-testing: "true"
  annotations:
    "api-approved.kubernetes.io": "unapproved, legacy API"
spec:
  group: cluster.k8s.io
  scope: Namespaced
  names:
    kind: MachineDeployment
    plural: machinedeployments
    singular: machinedeployment
    listKind: MachineDeploymentList
    shortNames: ["md"]
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          x-kubernetes-preserve-unknown-fields: true
          type: object
      subresources:
        scale:
          specReplicasPath: .spec.replicas
          statusReplicasPath: .status.replicas
        status: {}
      additionalPrinterColumns:
        - name: Replicas
          type: integer
          jsonPath: .spec.replicas
        - name: Available-Replicas
          type: integer
          jsonPath: .status.availableReplicas
        - name: Provider
          type: string
          jsonPath: .spec.template.spec.providerSpec.value.cloudProvider
        - name: OS
          type: string
          jsonPath: .spec.template.spec.providerSpec.value.operatingSystem
        - name: Kubelet
          type: string
          jsonPath: .spec.template.spec.versions.kubelet
        - name: Age
          type: date
          jsonPath: .metadata.creationTimestamp
        - name: Deleted
          type: date
          jsonPath: .metadata.deletionTimestamp
          priority: 1
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: clusters.cluster.k8s.io
  labels:
    local-testing: "true"
  annotations:
    "api-approved.kubernetes.io": "unapproved, legacy API"
spec:
  group: cluster.k8s.io
  scope: Namespaced
  names:
    kind: Cluster
    plural: clusters
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          x-kubernetes-preserve-unknown-fields: true
          type: object
      subresources:
        # status enables the status subresource.
        status: {}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: machine-controller:kubelet-bootstrap
  labels:
    local-testing: "true"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:node-bootstrapper
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:bootstrappers:machine-controller:default-node-token
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: machine-controller:node-autoapprove-bootstrap
  labels:
    local-testing: "true"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:certificates.k8s.io:certificatesigningrequests:nodeclient
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:bootstrappers:machine-controller:default-node-token
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: machine-controller
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: machine-controller
  template:
    metadata:
      annotations:
        "prometheus.io/scrape": "true"
        "prometheus.io/port": "8080"
        "prometheus.io/path": "/metrics"
      labels:
        app: machine-controller
    spec:
      serviceAccountName: machine-controller
      containers:
        - image: kubermatic/machine-controller:latest
          imagePullPolicy: IfNotPresent
          name: machine-controller
          command:
            - /usr/local/bin/machine-controller
            - -logtostderr
            - -v=3
            - -worker-count=5
            - -cluster-dns=10.10.10.10
            - -metrics-address=0.0.0.0:8080
            - -health-probe-address=0.0.0.0:8085
            # Machines that fail to join the cluster within this timeout and
            # are owned by a MachineSet will get deleted so the MachineSet
            # controller re-creates them
            - -join-cluster-timeout=25m
          ports:
          - containerPort: 8085
          livenessProbe:
            httpGet:
              path: /readyz
              port: 8085
            initialDelaySeconds: 5
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8085
            periodSeconds: 5
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: machine-controller
  namespace: kube-system
  labels:
    local-testing: "true"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: machine-controller
  namespace: kube-system
  labels:
    local-testing: "true"
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  - configmaps
  verbs:
  - create
  - update
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - endpoints
  resourceNames:
  - machine-controller
  verbs:
  - "*"
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - create
- apiGroups:
  - "coordination.k8s.io"
  resources:
  - leases
  verbs:
  - "*"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: machine-controller
  namespace: kube-public
  labels:
    local-testing: "true"
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - watch
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: machine-controller
  namespace: default
  labels:
    local-testing: "true"
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - get
  - watch
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: machine-controller
  namespace: kube-system
  labels:
    local-testing: "true"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: machine-controller
subjects:
- kind: ServiceAccount
  name: machine-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: machine-controller
  namespace: kube-public
  labels:
    local-testing: "true"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: machine-controller
subjects:
- kind: ServiceAccount
  name: machine-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: machine-controller
  namespace: default
  labels:
    local-testing: "true"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: machine-controller
subjects:
- kind: ServiceAccount
  name: machine-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: machine-controller
  labels:
    local-testing: "true"
rules:
- apiGroups:
  - ""
  resources:
  - "events"
  verbs:
  - "create"
  - "patch"
- apiGroups:
  - "apiextensions.k8s.io"
  resources:
  - "customresourcedefinitions"
  verbs:
  - "create"
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - "apiextensions.k8s.io"
  resources:
  - "customresourcedefinitions"
  resourceNames:
  - "machines.machine.k8s.io"
  verbs:
  - "*"
- apiGroups:
  - "machine.k8s.io"
  resources:
  - "machines"
  verbs:
  - "*"
- apiGroups:
  - "cluster.k8s.io"
  resources:
  - "machines"
  - "machinesets"
  - "machinesets/status"
  - "machinedeployments"
  - "machinedeployments/status"
  - "clusters"
  - "clusters/status"
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - "nodes"
  verbs:
  - "*"
# Pods are required for draining
# PVs are required for vsphere to detach them prior to deleting the instance
# Secrets and configmaps are needed for the bootstrap token creation and when a ref is used for a
# value in the machineSpec
- apiGroups:
  - ""
  resources:
  - "pods"
  verbs:
  - "list"
  - "get"
- apiGroups:
  - ""
  resources:
  - "persistentvolumes"
  - "secrets"
  - "configmaps"
  verbs:
  - "list"
  - "get"
  - "watch"
- apiGroups:
  - ""
  resources:
  - "pods/eviction"
  verbs:
  - "create"
# The following roles are required for NodeCSRApprover controller to be able
# to reconcile CertificateSigningRequests for kubelet serving certificates.
- apiGroups:
  - "certificates.k8s.io"
  resources:
  - "certificatesigningrequests"
  verbs:
  - "get"
  - "list"
  - "watch"
- apiGroups:
  - "certificates.k8s.io"
  resources:
  - "certificatesigningrequests/approval"
  verbs:
  - "update"
- apiGroups:
  - "certificates.k8s.io"
  resources:
  - "signers"
  resourceNames:
  - "kubernetes.io/kubelet-serving"
  verbs:
  - "approve"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: machine-controller
  labels:
    local-testing: "true"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: machine-controller
subjects:
  - kind: ServiceAccount
    name: machine-controller
    namespace: kube-system
